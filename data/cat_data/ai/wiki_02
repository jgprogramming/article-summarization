{"url": "https://en.wikipedia.org/wiki?curid=38143080", "text": "Mobileye\n\nMobileye an Intel Company is an Israeli technology company that develops vision-based advanced driver-assistance systems (ADAS) providing warnings for collision prevention and mitigation. Mobileye N.V. headquarters and main R&D centre is located in Jerusalem operating under the company name Mobileye Vision Technology Ltd. The company has also sales and marketing offices in Jericho, New York; Shanghai, China; Tokyo, Japan and Düsseldorf, Germany.\n\nIn March 2017, Intel announced that they had agreed to a US$15.3 billion takeover of Mobileye. The deal is expected to be the largest exit in Israel's high-tech industry to date.\n\nMobileye N.V. was founded in 1999 by Amnon Shashua (a researcher of the Hebrew University), when he evolved his academic research into a technical solution for a vision system which could detect vehicles using only a camera and software algorithms on a processor. After receiving a license to use the technology which was owned by Yissum it was possible to incorporate the company. Together with Ziv Aviram, he set up the company's R&D headquarters in Jerusalem, Israel.\n\nAt first, the company developed algorithms, and a custom accelerator processor chip called the \"EyeQ\" chip. All of Mobileye’s proprietary image processing algorithms run on the EyeQ chip. After years of testing, the chip and software algorithms began to be sold as commercial products to original equipment manufacturer (OEM) customers. The company’s first clients were automotive manufacturers such as BMW, General Motors and Volvo. These companies electronics suppliers integrated Mobileye’s technologies into the companies' cars, at first as an optional accessory when buying a new car, and later as a standard option in new cars.\n\nIn 2006, Mobileye set up an aftermarket department, which sells finished products manufactured by Mobileye at their Philippines factory, IMI. The aftermarket products are sold to an international network of distributors on all continents who sell the products to fleets of trucks and buses, to car dealerships, and to car accessory shops.\n\nIn August 2015, Tesla Motors announced that it is using Mobileye's technology to enable its self-drive solution, which would be incorporated into Model S cars from August 2015. After the first deadly crash of a self-driving Model S with active \"Autopilot\" became public in June 2016, Mobileye issued a statement that its technology won't be able to recognize a crossing trailer (which was the cause of the accident) until 2018. In July 2016, Mobileye announced the end of its partnership with Tesla after the EyeQ3. EyeQ is used in over 15 million vehicles sold as of 2017.\n\nIn January 2017, Mobileye, BMW and Intel announced that they were developing a test fleet of autonomous vehicles that would be on the road in the second half of 2017. The companies plan to develop autonomous vehicles for the consumer market by 2021. In March 2017, Intel announced their recent deals to buy Mobileye for $15.3 billion. The deal was completed August 8.\n\n\nThe firm's technology is based on the use of optical vision systems with motion detection algorithms running on a custom hardware accelerator - the EyeQ chip. This is unlike many other competing systems which use a combination of visual detection, radar, and laser scanning. The firm's vehicle detection algorithms recognize motorised vehicles such as cars, motorcycles and trucks, in day and night time conditions. The firm's version performs its vehicle detection based functions using a single camera mounted in the rear view mirror, unlike the usual approach of using radars, laser scanners or in some cases stereo-cameras.\n\nIn 2011 the firm introduced the world's first OEM production of vision-only forward collision warning system (NHTSA compliant) on multiple BMW, GM and Opel vehicles.\n\nLane departure warning systems are in-vehicle electronic systems that monitor the position of a vehicle within a roadway lane and warn a driver if the vehicle deviates or is about to deviate outside the lane. Mobileye's version was launched in multiple production platforms through 2007 and 2008 with GM, BMW and Volvo. \n\nThe firm's pedestrian detection technology is based on the use of mono cameras only, using pattern recognition and classifiers with image processing and optic flow analysis. Both static and moving pedestrians can be detected to a range of around 30m using VGA resolution imagers. The firm announced in 2008 that by mid-2010 they would launch a world's first application of full emergency braking for collision mitigation for pedestrians. Mobileye announced in May 2009 as part of the next generation Volvo radar-vision fusion system which also provides lane departure warning and vehicle detection with radar-vision fusion for an enhanced collision mitigation by braking system on the next Volvo S60 vehicle.\n\nSince 2008, BMW 7-Series cars are equipped with the Mobileye traffic sign recognition systems, developed in cooperation with automotive supplier Continental AG.\n\nAdaptive highbeam systems automatically raises and lowering the high beams without inconveniencing oncoming or preceding traffic. The firm's version, Intelligent Headlight Control, is in production on the BMW 7 series.\n\nIn 2011, the firm introduced multi-functional bundles including vision based FCW on the Opel Zafira and Opel Insignia.\n\nIn 2016, Mobileye announced a deal to work with Renault Nissan on digital maps that will help the automaker’s move towards driverless cars.\n\nSince 2007 the firm has offered a range of aftermarket vision based ADAS systems, based on the same core technology as for production models. They currently offer lane departure warning, forward collision warning, headway monitoring and warning, low speed urban collision warning, intelligent headlamp control, speed limit indication (tsr) and pedestrian collision warning (including bicycles).\nThese systems have also been integrated with fleet management systems.\n\nBetween 2007 and 2011 the company raised $160 million. In 2013 the company sold 25% of its private shares for $400 million to a group of blue-chip investors. One of Mobileye's biggest investors was Colmobil CEO Shmuel Harlap, who held a 7.2% stake. Following the acquisition, he'll become Israel's newest billionaire, joining co-founders Amnon Shashua and Ziv Aviram in the billionaire's club.\n\n\nMobileye faces competition from Tier 1 automotive suppliers as well as from other technology companies, including potentially Google. There is also an increasing competition on the after-market space from radar-based systems manufacturers, such as Safe Drive Systems and others. Other competitors developing ADAS technology include Cognitive Technologies, Continental AG, Bosch, NVIDIA, OmniVision Technologies, Freescale, Texas Instruments, Toshiba, Renesas Electronics Corp., Denso, Green Hills Software, Intel (not a competition after the acquisition of Mobileye by Intel), Qualcomm, and TomTom.\n\n", "id": "38143080", "title": "Mobileye"}
{"url": "https://en.wikipedia.org/wiki?curid=38350839", "text": "SILVIA\n\nSymbolically Isolated Linguistically Variable Intelligence Algorithms, or more popularly known as SILVIA, is a core platform technology developed by Cognitive Code. SILVIA was developed, and designed to recognize and interpret speech, text, and interact with applications and operating systems, all while interacting with a user. The technology can be run and operate via cloud, a mobile application, a part of network, or via server.\n\nLeslie Spring founded Cognitive Code in 2007 and is the inventor and architect of Cognitive Code’s SILVIA Platform. Prior to founding Cognitive Code, Leslie worked for such companies such as Electronic Arts, Disney, and Sony heading up their software development teams responsible for building graphics systems, 3D game engines, and custom software developer tools.\n\nIn addition to Leslie Spring, the company's general partners include Mimi Chen and John Albert. Cognitive Code received venture capital funding from Channel Mark Ventures. The platform was initially released on January 1, 2008.\n\nSILVIA was developed to recognized and interpret any human interaction: through text, speech, and any other human input. The platform allows an application of it in all applicable and possible application which then allows natural and intuitive human interaction. The system also allows easy implementation. It has a complete set of graphical user interface tools which can aid in developing intelligent objects or entities, and has an array of API scripts which can be embed in any compatible applications.\n\nDifferentiating SILVIA from other similar technologies, the platform can be used in different computing platforms and operating systems which can seamlessly allow easy transfer of data. Aside from being available in almost all platforms, SILVIA uses a non-command based system wherein inputs are based on normal human conversational language, not on pre-coded commands like what Google's Google Now and Apple Inc.'s Siri used.\n\nSILVIA is composed of several components:\n\nSILVIA can be used in several applications, such as: being used in call centers, smart phones like the iPhone and Android devices, and voice search or other voice-related applications. Unlike other similar technologies, SILVIA can intelligently respond to its users, not in one or two words or small phrases but in complete sentences.\n\nSILVIA has been used by several companies such as Northrop Grumman. Northrop Grumman used the technology in order to aid the company's employees to much better communicate with computers and mobile devices using natural language. The company also utilizes the technology in the development and deployment of military training applications. \"SILVIA is also currently being used for training and simulation applications for the US Military.\n\nThe platform is also revolutionary as it can also be used in gaming through its SILVIA Unity platform, and is currently being introduced for use in toys.\n\nCognitive Code and its technology platform was included in the list of TechCrunch's \"TechCrunch40\".\n", "id": "38350839", "title": "SILVIA"}
{"url": "https://en.wikipedia.org/wiki?curid=40031725", "text": "Optical braille recognition\n\nOptical braille recognition is the act of capturing and processing images of braille characters into natural language characters. It is used to convert braille documents for people who cannot read them into text, and for preservation and reproduction of the documents.\n\nIn 1984, a group of researchers at the Delft University of Technology designed a braille reading tablet, in which a reading head with photosensitive cells was moved along set of rulers to capture braille text line-by-line. In 1988, a group of French researchers at the Lille University of Science and Technology developed an algorithm, called Lectobraille, which converted braille documents into plain text. The system photographed the braille text with a low-resolution CCD camera, and used spatial filtering techniques, median filtering, erosion, and dilation to extract the braille. The braille characters were then converted to natural language using adaptive recognition. The Lectobraille technique had an error rate of 1%, and took an average processing time of seven seconds per line. In 1993, a group of researchers from the Katholieke Universiteit Leuven developed a system to recognize braille that had been scanned with a commercially available scanner. The system, however, was unable to handle deformities in the braille grid, so well-formed braille documents were required. In 1999, a group at the Hong Kong Polytechnic University implemented an optical braille recognition technique using edge detection to translate braille into English or Chinese text. In 2001, Murray and Dais created a handheld recognition system, that scanned small sections of a document at once. Because of the small area scanned at once, grid deformation was less of an issue, and a simpler, more efficient algorithm was employed. In 2003, Morgavi and Morando designed a system to recognize braille characters using artificial neural networks. This system was noted for its ability to handle image degradation more successfully than other approaches.\n\nOptical braille recognition is used to digitize and reproduce texts that have been produced with non-computerized systems, such as with braille typewriters. Digitizing braille texts also helps reduce storage space, as braille texts take up much more space than their natural language counterparts. Optical braille recognition is also useful for people who cannot read braille, but need to access the content of braille documents.\n\nMany of the challenges to successfully processing braille text arise from the nature of braille documents. Braille is generally printed on solid-color paper, with no ink to produce contrast between the raised characters and the background paper. However, imperfections in the page can appear in a scan or image of the page.\n\nMany documents are printed \"inter-point\", meaning they are double-sided. As such, the depressions of the braille of one side appear interlaid with the protruding braille of the other side.\n\nSome optical braille recognition techniques attempt to use oblique lighting and a camera to reveal the shadows of the depressions and protrusions of the braille. Others make use of commercially available document scanners.\n\n", "id": "40031725", "title": "Optical braille recognition"}
{"url": "https://en.wikipedia.org/wiki?curid=40218456", "text": "Artificial Solutions\n\nArtificial Solutions is a multinational software company that develops and sells natural language interaction products for enterprise and consumer use. The company's natural language solutions have been deployed in a wide range of industries including finance, telecoms, the public sector, retail and travel.\n\nArtificial Solutions was founded in Stockholm in 2001 by friends Johan Åhlund, Johan Gustavsson and Michael Söderström to create interactive web assistants using a combination of artificial intelligence and natural language processing. Though Åhlund initially took some persuading, he thought it sounded ridiculous to be talking to a virtual agent on the internet.\n\nThe company expanded with the development of online customer service optimization products and by 2005 it had several offices throughout Europe supporting the development and sales of its online virtual assistants. Artificial Solutions was placed as visionary in the latest Gartner Magic Quadrant for CRM Web Customer Service Applications.\n\nIn 2006 Artificial Solutions acquired Kiwilogic, a German software house creating its own virtual assistants.\nElbot, Artificial Solutions’ test-bed to explore the psychology of human-machine communication, won the Loebner Prize in 2008 and is the closest contestant of the annual competition based on the Turing Test to reach the 30% threshold by fooling 25% of the human judges.\n\nWith a change in management in 2010 the company started to focus the basis of its technology on Natural Language Interaction and launched the Teneo Platform, which allows people to hold humanlike, intelligent conversations with applications and services running on electronic devices.\nIn 2013 Artificial Solutions launched Indigo, a mobile personal assistant that is able to operate and remember the context of the conversation across different platforms and operating systems.\nA new round of funding was announced in June 2013. The $9.4m will be used to support expansion in the US market.\n\nIn February 2014 Artificial Solutions announced the Teneo Network of Knowledge, a patented intelligent framework that enables users to interact using natural language with private, shared and public ecosystem of devices, also known as the Internet of Things.\n\n", "id": "40218456", "title": "Artificial Solutions"}
{"url": "https://en.wikipedia.org/wiki?curid=360030", "text": "Question answering\n\nQuestion answering (QA) is a computer science discipline within the fields of information retrieval and natural language processing (NLP), which is concerned with building systems that automatically answer questions posed by humans in a natural language.\n\nA QA implementation, usually a computer program, may construct its answers by querying a structured database of knowledge or information, usually a knowledge base. More commonly, QA systems can pull answers from an unstructured collection of natural language documents.\n\nSome examples of natural language document collections used for QA systems include:\n\n\nQA research attempts to deal with a wide range of question types including: fact, list, definition, \"How\", \"Why\", hypothetical, semantically constrained, and cross-lingual questions.\n\n\nTwo early QA systems were BASEBALL and LUNAR. BASEBALL answered questions about the US baseball league over a period of one year. LUNAR, in turn, answered questions about the geological analysis of rocks returned by the Apollo moon missions. Both QA systems were very effective in their chosen domains. In fact, LUNAR was demonstrated at a lunar science convention in 1971 and it was able to answer 90% of the questions in its domain posed by people untrained on the system. Further restricted-domain QA systems were developed in the following years. The common feature of all these systems is that they had a core database or knowledge system that was hand-written by experts of the chosen domain. The language abilities of BASEBALL and LUNAR used techniques similar to ELIZA and DOCTOR, the first chatterbot programs.\n\nSHRDLU was a highly successful question-answering program developed by Terry Winograd in the late 60s and early 70s. It simulated the operation of a robot in a toy world (the \"blocks world\"), and it offered the possibility of asking the robot questions about the state of the world. Again, the strength of this system was the choice of a very specific domain and a very simple world with rules of physics that were easy to encode in a computer program.\n\nIn the 1970s, knowledge bases were developed that targeted narrower domains of knowledge. The QA systems developed to interface with these expert systems produced more repeatable and valid responses to questions within an area of knowledge. These expert systems closely resembled modern QA systems except in their internal architecture. Expert systems rely heavily on expert-constructed and organized knowledge bases, whereas many modern QA systems rely on statistical processing of a large, unstructured, natural language text corpus.\n\nThe 1970s and 1980s saw the development of comprehensive theories in computational linguistics, which led to the development of ambitious projects in text comprehension and question answering. One example of such a system was the Unix Consultant (UC), developed by Robert Wilensky at U.C. Berkeley in the late 1980s. The system answered questions pertaining to the Unix operating system. It had a comprehensive hand-crafted knowledge base of its domain, and it aimed at phrasing the answer to accommodate various types of users. Another project was LILOG, a text-understanding system that operated on the domain of tourism information in a German city. The systems developed in the UC and LILOG projects never went past the stage of simple demonstrations, but they helped the development of theories on computational linguistics and reasoning.\n\nRecently, specialized natural language QA systems have been developed, such as EAGLi for health and life scientists.\n\nAs of 2001, QA systems typically included a \"question classifier\" module that determines the type of question and the type of answer. A \"multiagent\" question-answering architecture has been proposed, where each domain is represented by an agent which tries to answer questions taking into account its specific knowledge; a meta–agent controls the cooperation between question answering agents and chooses the most relevant answer(s).\n\nQA is very dependent on a good search corpus - for without documents containing the answer, there is little any QA system can do. It thus makes sense that larger collection sizes generally lend well to better QA performance, unless the question domain is orthogonal to the collection. The notion of data redundancy in massive collections, such as the web, means that nuggets of information are likely to be phrased in many different ways in differing contexts and documents, leading to two benefits:\n\n\nSome question answering systems rely heavily on automated reasoning. There are a number of question answering systems designed in Prolog, a logic programming language associated with artificial intelligence.\n\nIn information retrieval, an open domain question answering system aims at returning an answer in response to the user's question. The returned answer is in the form of short texts rather than a list of relevant documents. The system uses a combination of techniques from computational linguistics, information retrieval and knowledge representation for finding answers.\n\nThe system takes a natural language question as an input rather than a set of keywords, for example, \"When is the national day of China?\" The sentence is then transformed into a query through its logical form. Having the input in the form of a natural language question makes the system more user-friendly, but harder to implement, as there are various question types and the system will have to identify the correct one in order to give a sensible answer. Assigning a question type to the question is a crucial task, the entire answer extraction process relies on finding the correct question type and hence the correct answer type.\n\nKeyword extraction is the first step for identifying the input question type. In some cases, there are clear words that indicate the question type directly. i.e. \"Who\", \"Where\" or \"How many\", these words tell the system that the answers should be of type \"Person\", \"Location\", \"Number\" respectively. In the example above, the word \"When\" indicates that the answer should be of type \"Date\". POS (Part of Speech) tagging and syntactic parsing techniques can also be used to determine the answer type. In this case, the subject is \"Chinese National Day\", the predicate is \"is\" and the adverbial modifier is \"when\", therefore the answer type is \"Date\". Unfortunately, some interrogative words like \"Which\", \"What\" or \"How\" do not give clear answer types. Each of these words can represent more than one type. In situations like this, other words in the question need to be considered. First thing to do is to find the words that can indicate the meaning of the question. A lexical dictionary such as WordNet can then be used for understanding the context.\n\nOnce the question type has been identified, an Information retrieval system is used to find a set of documents containing the correct key words. A tagger and NP/Verb Group chunker can be used to verify whether the correct entities and relations are mentioned in the found documents. For questions such as \"Who\" or \"Where\", a Named Entity Recogniser is used to find relevant \"Person\" and \"Location\" names from the retrieved documents. Only the relevant paragraphs are selected for ranking.\n\nA vector space model can be used as a strategy for classifying the candidate answers. Check if the answer is of the correct type as determined in the question type analysis stage. Inference technique can also be used to validate the candidate answers. A score is then given to each of these candidates according to the number of question words it contains and how close these words are to the candidate, the more and the closer the better. The answer is then translated into a compact and meaningful representation by parsing. In the previous example, the expected output answer is \"1st Oct.\"\n\nIn 2002, a group of researchers presented an unpublished and largely unsourced report as a funding support document, in which they describe a 5-year roadmap of research current to the state of the question answering filed at that time.\nQA systems have been extended in recent years to encompass additional domains of knowledge For example, systems have been developed to automatically answer temporal and geospatial questions, questions of definition and terminology, biographical questions, multilingual questions, and questions about the content of audio, images, and video. Current QA research topics include:\n\n\nIBM's question answering system, Watson, defeated the two greatest Jeopardy! champions, Brad Rutter and Ken Jennings, by a significant margin.\n\n", "id": "360030", "title": "Question answering"}
{"url": "https://en.wikipedia.org/wiki?curid=3666033", "text": "Intelligent character recognition\n\nIn computer science, intelligent character recognition (ICR) is an advanced optical character recognition (OCR) or — rather more specific — handwriting recognition system that allows fonts and different styles of handwriting to be learned by a computer during processing to improve accuracy and recognition levels.\n\nMost ICR software has a self-learning system referred to as a neural network, which automatically updates the recognition database for new handwriting patterns. It extends the usefulness of scanning devices for the purpose of document processing, from printed character recognition (a function of OCR) to hand-written matter recognition. Because this process is involved in recognising hand writing, accuracy levels may, in some circumstances, not be very good but can achieve 97%+ accuracy rates in reading handwriting in structured forms. Often to achieve these high recognition rates several read engines are used within the software and each is given elective voting rights to determine the true reading of characters. In numeric fields, engines which are designed to read numbers take preference, while in alpha fields, engines designed to read hand written letters have higher elective rights. When used in conjunction with a bespoke interface hub, hand-written data can be automatically populated into a back office system avoiding laborious manual keying and can be more accurate than traditional human data entry.\n\nAn important development of ICR was the invention of Automated Forms Processing in 1993. This involved a three-stage process of capturing the image of the form to be processed by ICR and preparing it to enable the ICR engine to give best results, then capturing the information using the ICR engine and finally processing the results to automatically validate the output from the ICR engine.\n\nThis application of ICR increased the usefulness of the technology and made it applicable for use with real world forms in normal business applications. Modern software applications use ICR as a technology of recognizing text in forms filled in by hand (hand-printed).\n\nIntelligent word recognition (IWR) can recognize and extract RIA not only printed-handwritten information, but cursive handwriting as well. ICR recognizes on the character-level, whereas IWR works with full words or phrases. Capable of capturing unstructured information from every day pages, IWR is said to be more evolved than hand print ICR. \n\nNot meant to replace conventional ICR and OCR systems, IWR is optimized for processing real-world documents that contain mostly free-form, hard-to-recognize data fields that are inherently unsuitable for ICR. This means that the highest and best use of IWR is to eliminate a high percentage of the manual entry of handwritten data and run-on hand print fields on documents that otherwise could be keyed only by humans.\n\n", "id": "3666033", "title": "Intelligent character recognition"}
{"url": "https://en.wikipedia.org/wiki?curid=44374849", "text": "Sayre's paradox\n\nSayre’s Paradox is a dilemma encountered in the design of automated handwriting recognition systems. A standard statement of the paradox is that a cursively written word cannot be recognized without being segmented and cannot be segmented without being recognized. The paradox was first articulated in a 1973 publication by Kenneth M. Sayre, after whom it was named.\n\nIt is relatively easy to design automated systems capable of recognizing words inscribed in a printed format. Such words are segmented into letters by the very act of writing them on the page. Given templates matching typical letter shapes in a given language, individual letters can be identified with a high degree of probability. In cases of ambiguity, probable letter sequences can be compared with a selection of properly spelled words in that language (called a lexicon). If necessary, syntactic features of the language can be applied to render a generally accurate identification of the words in question. Printed-character recognition systems of this sort are commonly used in processing standardized government forms, in sorting mail by zip code, and so forth.\n\nIn cursive writing, however, letters comprising a given word typically flow sequentially without gaps between them. Unlike a sequence of printed letters, cursively connected letters are not segmented in advance. Here is where Sayre’s Paradox comes into play. Unless the word is already segmented into letters, template-matching techniques like those described above cannot be applied. Prior segmentation, that is to say, is necessary for word recognition. On the other hand, there are no reliable techniques for segmenting a word into letters unless the word itself has been previously identified. Word recognition requires letter segmentation, and letter segmentation requires word recognition. There is no way a cursive writing recognition system employing standard template-matching techniques can do both simultaneously.\n\nAdvantages to be gained by use of automated cursive writing recognition systems include routing mail with handwritten addresses, reading handwritten bank checks, and automated digitalization of hand-written documents. These are practical incentives for finding ways of circumventing Sayre’s Paradox.\n\nOne way of ameliorating the adverse effects of the paradox is to normalize the word inscriptions to be recognized. Normalization amounts to eliminating idiosyncrasies in the penmanship of the writer, such as unusual slope of the letters and unusual slant of the cursive line. This procedure can increase the probability of a correct match with a letter template, resulting in an incremental improvement in the success rate of the system. Since improvement of this sort still depends on accurate segmentation, however, it remains subject to the limitations of Sayre’s Paradox. Researchers have come to realize that the only way to circumvent the paradox is by use of procedures that do not rely on accurate segmentation.\n\nSegmentation is accurate to the extent that it matches distinctions among letters in the actual inscriptions presented to the system for recognition (the input data). This is sometimes referred to as “explicit segmentation”. “Implicit segmentation,” by contrast, is division of the cursive line into more parts than the number of actual letters in the cursive line itself. Processing these “implicit parts” to achieve eventual word identification requires specific statistical procedures involving Hidden Markov Models (HMM).\n\nA Markov model is a statistical representation of a random process, which is to say a process in which future states are independent of states occurring before the present. In such a process, a given state is dependent only on the conditional probability of its following the state immediately before it. An example is a series of outcomes from successive casts of a die. An HMM is a Markov model, individual states of which are not fully known. Conditional probabilities between states are still determinate, but the identities of individual states are not fully disclosed.\n\nRecognition proceeds by matching HMMs of words to be recognized with previously prepared HMMs of words in the lexicon. The best match in a given case is taken to indicate the identity of the handwritten word in question. As with systems based on explicit segmentation, automated recognition systems based on implicit segmentation are judged more or less successful according to the percentage of correct identifications they accomplish.\n\nInstead of explicit segmentation techniques, most automated handwriting recognition systems today employ implicit segmentation in conjunction with HMM-based matching procedures. The constraints epitomized by Sayre’s Paradox are largely responsible for this shift in approach.\n\n", "id": "44374849", "title": "Sayre's paradox"}
{"url": "https://en.wikipedia.org/wiki?curid=45001424", "text": "Braina\n\nBraina is an intelligent personal assistant application for Microsoft Windows developed by Brainasoft. Braina uses natural language interface and speech recognition to interact with its users and allows users to use English language sentences to perform various tasks on their computer. The application can find information from the internet, play songs and videos of user's choice, take dictation, find and open files, set alarms and reminders, performs math calculations, controls windows and programs etc. Braina's Android app can be used to interact with the system remotely over a Wi-Fi network.\n\nThe name Braina is a short form of Brain Artificial. The software adapts to the user's behavior over time to better anticipate needs. The software also allows users to type commands using keyboard instead of saying them. Braina comes in both free and paid version.\n\nFuture plc's TechRadar recognized Braina as one of the top 10 free essential software for 2015. Braina is a virtual assistant software with a freeware Lite and proprietary Pro version, for Windows 10 Cortana.\n", "id": "45001424", "title": "Braina"}
{"url": "https://en.wikipedia.org/wiki?curid=45396428", "text": "Big mechanism\n\nBig Mechanism is a $45 million DARPA research program, begun in 2014, aimed at developing software that will read cancer research papers, integrate them into a cancer model and frame new hypotheses by the end of 2017.\n\nThe program focuses on mutations in the Ras gene family, which underlie some one-third of human cancers. Currently, a rough road map shows interaction sequences among proteins affecting cell replication and death. However, the causal relations are poorly understood.\n\nThe program is to occur in three stages. The first is to read literature and convert it into formal representations. Second is to integrate the knowledge into computational models. Third is to produce experimentally testable explanations and predictions. Research teams are developing four separate systems targeting all three tasks.\n\nIn February 2015 an evaluation meeting reviewed progress on the first stage. Multiple tasks were considered. One was extraction of experimental procedure details and evaluating statements such as “we demonstrate” and “we suggest.” Another worked to map sentence meaning and relationships. The best machine-reading system extracted 40% of relevant information from a small corpus and correctly determined how each passage related to the model.\n\nThe second stage is to become active in summer 2015, when members attempt to produce a single reference model. The third stage is the most challenging, because the artificial intelligence community has had limited success at developing hypothesis generators. Molecular biology may be more amenable, because most domain knowledge is technical and available in written form.\n", "id": "45396428", "title": "Big mechanism"}
{"url": "https://en.wikipedia.org/wiki?curid=42129549", "text": "OpenNN\n\nOpenNN (Open Neural Networks Library) is a software library written in the C++ programming language which implements neural networks, a main area of deep learning research. The library is open source, licensed under the GNU Lesser General Public License. \n\nThe software implements any number of layers of non-linear processing units for supervised learning. This deep architecture allows the design of neural networks with universal approximation properties. Additionally, it allows multiprocessing programming by means of OpenMP, in order to increase computer performance. \n\nOpenNN contains data mining algorithms as a bundle of functions. These can be embedded in other software tools, using an application programming interface, for the integration of the predictive analytics tasks. In this regard, a graphical user interface is missing but some functions can be supported by specific visualization tools.\n\nThe development started in 2003 at the International Center for Numerical Methods in Engineering (CIMNE), within the research project funded by the European Union called RAMFLOOD (Risk Assessment and Management of FLOODs). Then it continued as part of similar projects.\nAt present, OpenNN is being developed by the startup company Artelnics.\n\nIn 2014, \"Big Data Analytics Today\" rated OpenNN as the #1 brain inspired artificial intelligence project. \nAlso, during the same year, \"ToppersWorld\" selected OpenNN among the top 5 open source data mining tools. \n\nOpenNN is a general purpose artificial intelligence software package. It uses machine learning techniques for solving data mining and predictive analytics tasks in different fields. For instance, the library has been applied in the engineering, energy, or chemistry sectors.\n\n\n", "id": "42129549", "title": "OpenNN"}
{"url": "https://en.wikipedia.org/wiki?curid=28650287", "text": "Cleverbot\n\nCleverbot is a chatterbot web application that uses an artificial intelligence (AI) algorithm to have conversations with humans. It was created by British AI scientist Rollo Carpenter. It was preceded by Jabberwacky, a chatbot project that began in 1988 and went online in 1997. In its first decade, Cleverbot held several thousand conversations with Carpenter and his associates. Since launching on the web, the number of conversations held has exceeded 200 million. Besides the web application, Cleverbot is also available as an iOS, Android, and Windows Phone app.\n\nUnlike some other chatterbots, Cleverbot's responses are not pre-programmed. Instead, it learns from human input: Humans type into the box below the Cleverbot logo and the system finds all keywords or an exact phrase matching the input. After searching through its saved conversations, it responds to the input by finding how a human responded to that input when it was asked, in part or in full, by Cleverbot.\n\nCleverbot participated in a formal Turing test at the 2011 Techniche festival at the Indian Institute of Technology Guwahati on September 3, 2011. Out of the 334 votes cast, Cleverbot was judged to be 59.3% human, compared to the rating of 63.3% human achieved by human participants. A score of 50.05% or higher is often considered to be a passing grade. The software running for the event had to handle just 1 or 2 simultaneous requests, whereas online Cleverbot is usually talking to around 80,000 people at once.\n\nCleverbot is constantly learning, growing in data size at a rate of 4 to 7 million interactions per second. Updates to the software have been mostly behind the scenes. In 2014, Cleverbot was upgraded to use GPU serving techniques. The program chooses how to respond to users fuzzily, the whole of the conversation being compared to the millions that have taken place before. Cleverbot now uses over 279 million interactions, about 3-4% of the data it has already accumulated. The developers of Cleverbot are attempting to build a new version using machine learning techniques.\n\nA significant part of the engine behind Cleverbot and an API for accessing it has been made available to developers in the form of Cleverscript. A service for directly accessing Cleverbot has been made available to developers in the form of Cleverbot.io. \n\nAn app that uses the Cleverscript engine to play a game of 20 Questions, has been launched under the name \"Clevernator\". Unlike other such games, the player asks the questions and it is the role of the AI to understand, and answer factually. An app that allows owners to create and talk to their own small Cleverbot-like AI has been launched, called \"Cleverme!\" for Apple products.\n\nIn early 2017, a Twitch stream of two Google Home devices modified to talk to each other using Cleverbot.io garnered over 700,000 visitors and over 30,000 peak concurrent viewers.\n\n\n", "id": "28650287", "title": "Cleverbot"}
{"url": "https://en.wikipedia.org/wiki?curid=47961606", "text": "Neural machine translation\n\nNeural machine translation (NMT) is an approach to machine translation that uses a large neural network. It departs from phrase-based statistical approaches that use separately engineered subcomponents. Neural machine translation (NMT) is not a drastic step beyond what has been traditionally done in statistical machine translation (SMT). Its main departure is the use of vector representations (\"embeddings\", \"continuous space representations\") for words and internal states. The structure of the models is simpler than phrase-based models. There is no separate language model, translation model, and reordering model, but just a single sequence model that predicts one word at a time. However, this sequence prediction is conditioned on the entire source sentence and the entire already produced target sequence.\n\nGoogle, Microsoft and translation services now use NMT. Google uses Google Neural Machine Translation (GNMT) in preference to its previous statistical methods. Microsoft uses a similar technology for its speech translations (including Microsoft Translator live and Skype Translator). An open source neural machine translation system, OpenNMT, has been released by the Harvard NLP group. Yandex.Translator has a hybrid model: its translation provides a statistical model and a neural network. After this, the algorithm CatBoost, which is based on machine learning, will select the best of the obtained results Machine translation providers who also offer neural machine translation include Omniscien Technologies (formerly Asia Online), KantanMT, SDL, Globalese, and TransPerfect.\n\nNMT models use deep learning and representation learning. They require only a fraction of the memory needed by traditional statistical machine translation (SMT) models. Furthermore, unlike conventional translation systems, all parts of the neural translation model are trained jointly (end-to-end) to maximize the translation performance. Deep neural machine translation is an extension of neural machine translation. Both use a large neural network with the difference that deep neural machine translation processes multiple neural network layers instead of just one. DeepL offers a generic machine translation system with deep learning AI systems while Omniscien Technologies provides customized deep neural machine translation (Deep NMT) and Systran offers Pure Neural Machine Translation with deep neural networks.\n\nA bidirectional recurrent neural network (RNN), known as an \"encoder\", is used by the neural network to encode a source sentence for a second RNN, known as a \"decoder\", that is used to predict words in the target language.\n", "id": "47961606", "title": "Neural machine translation"}
{"url": "https://en.wikipedia.org/wiki?curid=2539154", "text": "Orange (software)\n\nOrange is an open-source data visualization, machine learning and data mining toolkit. It features a visual programming front-end for explorative data analysis and interactive data visualization, and can also be used as a Python library.\n\nOrange is a component-based visual programming software package for data visualization, machine learning, data mining and data analysis.\n\nOrange components are called widgets and they range from simple data visualization, subset selection and preprocessing, to empirical evaluation of learning algorithms\nand predictive modeling.\n\nVisual programming is implemented through an interface in which workflows are created by linking predefined or user-designed widgets, while advanced users can use Orange as a Python library for data manipulation and widget alteration.\n\nOrange is an open-source software package released under GPL. Versions up to 3.0 include core components in C++ with wrappers in Python are available on github. From version 3.0 onwards, Orange uses common Python open-source libraries for scientific computing, such as numpy, scipy and scikit-learn, while its graphical user interface operates within the cross-platform Qt framework. Orange3 has a separate github.\n\nThe default installation includes a number of machine learning, preprocessing and data visualization algorithms in 6 widget sets (data, visualize, classify, regression, evaluate and unsupervised). Additional functionalities are available as add-ons (bioinformatics, data fusion and text-mining).\n\nOrange is supported on macOS, Windows and Linux and can also be installed from the Python Package Index repository (\"pip install Orange\"). As of 2016 the stable version is 3.3 and runs with Python 3, while the legacy version 2.7 that runs with Python 2.7 is still available.\n\nOrange consists of a canvas interface onto which the user places widgets and creates a data analysis workflow. Widgets offer basic functionalities such as reading the data, showing a data table, selecting features, training predictors, comparing learning algorithms, visualizing data elements, etc. The user can interactively explore visualizations or feed the selected subset into other widgets.\n\n\nThe program provides a platform for experiment selection, recommendation systems and predictive modeling and is used in biomedicine, bioinformatics, genomic research, and teaching. In science, it is used as a platform for testing new machine learning algorithms and for implementing new techniques in genetics and bioinformatics. In education, it was used for teaching machine learning and data mining methods to students of biology, biomedicine and informatics.\n\n\n\n", "id": "2539154", "title": "Orange (software)"}
{"url": "https://en.wikipedia.org/wiki?curid=49238421", "text": "Accord.NET\n\nAccord.NET is a framework for scientific computing in .NET. The source code of the project is available under the terms of the Gnu Lesser Public License, version 2.1.\n\nThe framework comprises a set of libraries that are available in source code as well as via executable installers and NuGet packages. The main areas covered include numerical linear algebra, numerical optimization, statistics, machine learning, artificial neural networks, signal and image processing, and support libraries (such as graph plotting and visualization). The project was originally created to extend the capabilities of the AForge.NET Framework, but has since incorporated AForge.NET inside itself. Newer releases have united both frameworks under the Accord.NET name.\n\nThe Accord.NET Framework has been featured in multiple books such as Mastering.NET Machine Learning by PACKT publishing and F# for Machine Learning Applications, featured in QCON San Francisco, and currently accumulates more than 1,000 forks in GitHub. Multiple scientific publications have been published with the use of the framework.\n\n\n", "id": "49238421", "title": "Accord.NET"}
{"url": "https://en.wikipedia.org/wiki?curid=50779447", "text": "Sunspring\n\nSunspring is a 2016 experimental science fiction short film entirely written by an artificial intelligence bot using neural networks. It was conceived by BAFTA-nominated filmmaker Oscar Sharp and NYU AI researcher Ross Goodwin. and produced by film production company, End Cue along with Allison Friedman and Andrew Swett. It stars Thomas Middleditch, Elisabeth Grey, and Humphrey Ker as three people, namely H, H2, and C, living in a future world and eventually connecting with each other through a love triangle. The script of the film was authored by a recurrent neural network called long short-term memory (LSTM) by an AI bot named Benjamin.\n\nOriginally made for the Sci-Fi-London film festival's 48hr Challenge, it was released online by technology news website Ars Technica on 9 June 2016.\n\nIt narrates the story of three people - H (Middleditch), H2 (Grey), and C (Ker) - set in a futuristic world and entangled with murder and love.\n\n\nOscar Sharp originally created the film for the 48hr Film Challenge contest of Sci-Fi-London, a film festival which focuses on science fiction. For the challenge, contestants are given a set of prompts (mostly props and lines) that have to appear in a movie they make over the next two days. It eventually contested in the festival and was nominated among the final top ten films\n\nSharp collaborated with his longtime associate Ross Goodwin, an AI researcher in New York University to create the AI bot, which was initially called Jetson. The bot, which later came to call itself Benjamin, wrote the screenplay including stage directions and dialog. The garbled script was then interpreted by Sharp who directed the actors to construe the plot points themselves and enact the play. According to Ars Technica, the final plot turned out to be a tale of romance and murder, set in a dark future world.\n\nCalled the world's first automatic screenwriter, Benjamin is a self-improving LSTM RNN machine intelligence trained on human screenplays conceived by Goodwin and Sharp. It was trained to write the screenplay by feeding it with a corpus of dozens of sci-fi screenplays found online—mostly movies from the 1980s and 90s.\n\nThe film contains a song from Brooklyn-based electro-acoustic duo Tiger and Man, with lyrics written by Benjamin using a database of 30,000 folk songs. As well as a score written by composer Andrew Orkin.\n\nCNet called it \"a beautiful, bizarre sci-fi novelty.\" Critic Amanda Kooser said, \"...probably won't start a rush for replacing human screenwriters with machines. Some day, neural networks may get better at imitating the art of coherent storytelling, but we're not there yet. That doesn't mean \"Sunspring\" isn't entertaining or worthy of viewing. It is. It's a thought experiment come to life, a novelty.\"\n\n\n", "id": "50779447", "title": "Sunspring"}
{"url": "https://en.wikipedia.org/wiki?curid=51128713", "text": "Echobox\n\nEchobox is a software company founded in 2013 by Swiss national Antoine Amann. Based in London Echobox helps publishers increase traffic by 'intelligently' posting articles on social media platforms such as Facebook and Twitter. By analysing large amounts of data, it learns how specific audiences respond to different articles at different times of the day. It then chooses the best stories to post and the best times to post them. It uses both historical and real-time data to understand to what has worked well in the past as well as what is currently trending on the web.Echobox uses big data and algorithms to intelligently automate social media for publishers. Echobox helps publishers to compete with digital disruptors by increasing traffic from social platforms\n\nEchobox integrates with a publisher’s existing analytics and data. The technology is used by a number of publishers including Le Monde, Le Figaro, Axel Springer and San Jose Mercury News.\n\nIn 2016, the company raised $3.4m in venture capital finance from Mangrove Capital Partners, an early backer of Skype, and LocalGlobe. Other investors include Entrepreneur First. The company’s advisors include Zoubin Ghahramani, Professor of Information Engineering at the University of Cambridge.\n\n", "id": "51128713", "title": "Echobox"}
{"url": "https://en.wikipedia.org/wiki?curid=51404222", "text": "Artisto\n\nArtisto is a video processing application with art and movie effects filters based on neural network algorithms created in 2016 by Mail.ru Group machine learning specialists.\n\nAt the moment the application can process videos up to 10 seconds long and offers users 21 filters, including those based on the works of famous artists (e.g. Blue Dream — Pablo Picasso), theme-based (Rio-2016 — related to the 2016 Summer Olympics in Rio de Janeiro) and others. The app works with both pre-recorded videos and videos recorded with the application.\n\nInformation on the application first appeared on Mail.ru Group Vice President Anna Artamonova's FB page on July 29, 2016. At the moment of posting there was only an Android version available. According to Anna, the application's first version only took eight days to develop. On July 31 the application was added to the AppStore for free download.\n\nFrom this moment and continuing on into the present, Artisto has been the world’s first app that uses neural networks for editing short videos, processing them in the style of famous artworks or any other source image. Prisma (app) application developers promise to deliver similar functionality at any moment.\n\nThe application soon won recognition and started to attract the attention of both international brands (e.g. Korean auto manufacturer Kia Motors) and popular singers and musicians.\n\nAccording to the independent App Annie analysis system, within the first two weeks on the market the application made it onto TOP download lists in nine countries.\n\nThe idea of transferring styles from the works by famous artists to images was first mentioned in September 2015 after the publication of Leon Gatys's article \"A Neural Algorithm of Artistic Style\", where he described the algorithm in detail. The major shortcoming of this algorithm is its slow performance, which is up to dozens of seconds depending on the algorithm's settings.\n\nIn March 2016, Russian researcher Dmitry Ulyanov's article was published, where he invented a way to improve the generation of stylized pictures using additional neuron generator network training. With this approach, stylized images can be generated within just dozens of milliseconds. Seventeen days after Ulyanov's article, Justin Johnson published an article containing an identical idea, the only difference being the structure of the generator network.\n\nThe Artisto application was developed using these open-source technologies, which Mail.ru Group's machine learning specialists improved for faster video processing and better quality.\n", "id": "51404222", "title": "Artisto"}
{"url": "https://en.wikipedia.org/wiki?curid=49091", "text": "Optical character recognition\n\nOptical character recognition (also optical character reader, OCR) is the mechanical or electronic conversion of images of typed, handwritten or printed text into machine-encoded text, whether from a scanned document, a photo of a document, a scene-photo (for example the text on signs and billboards in a landscape photo) or from subtitle text superimposed on an image (for example from a television broadcast). It is widely used as a form of information entry from printed paper data records, whether passport documents, invoices, bank statements, computerised receipts, business cards, mail, printouts of static-data, or any suitable documentation. It is a common method of digitising printed texts so that they can be electronically edited, searched, stored more compactly, displayed on-line, and used in machine processes such as cognitive computing, machine translation, (extracted) text-to-speech, key data and text mining. OCR is a field of research in pattern recognition, artificial intelligence and computer vision.\n\nEarly versions needed to be trained with images of each character, and worked on one font at a time. Advanced systems capable of producing a high degree of recognition accuracy for most fonts are now common, and with support for a variety of digital image file format inputs. Some systems are capable of reproducing formatted output that closely approximates the original page including images, columns, and other non-textual components.\n\nEarly optical character recognition may be traced to technologies involving telegraphy and creating reading devices for the blind. In 1914, Emanuel Goldberg developed a machine that read characters and converted them into standard telegraph code. Concurrently, Edmund Fournier d'Albe developed the Optophone, a handheld scanner that when moved across a printed page, produced tones that corresponded to specific letters or characters.\n\nIn the late 1920s and into the 1930s Emanuel Goldberg developed what he called a \"Statistical Machine\" for searching microfilm archives using an optical code recognition system. In 1931 he was granted USA Patent number 1,838,389 for the invention. The patent was acquired by IBM.\n\nWith the advent of smart-phones and smartglasses, OCR can be used in internet connected mobile device applications that extract text captured using the device's camera. These devices that do not have OCR functionality built into the operating system will typically use an OCR API to extract the text from the image file captured and provided by the device. The OCR API returns the extracted text, along with information about the location of the detected text in the original image back to the device app for further processing (such as text-to-speech) or display.\n\nIn 1974, Ray Kurzweil started the company Kurzweil Computer Products, Inc. and continued development of omni-font OCR, which could recognise text printed in virtually any font (Kurzweil is often credited with inventing omni-font OCR, but it was in use by companies, including CompuScan, in the late 1960s and 1970s). Kurzweil decided that the best application of this technology would be to create a reading machine for the blind, which would allow blind people to have a computer read text to them out loud. This device required the invention of two enabling technologiesthe CCD flatbed scanner and the text-to-speech synthesiser. On January 13, 1976, the successful finished product was unveiled during a widely reported news conference headed by Kurzweil and the leaders of the National Federation of the Blind. In 1978, Kurzweil Computer Products began selling a commercial version of the optical character recognition computer program. LexisNexis was one of the first customers, and bought the program to upload legal paper and news documents onto its nascent online databases. Two years later, Kurzweil sold his company to Xerox, which had an interest in further commercialising paper-to-computer text conversion. Xerox eventually spun it off as Scansoft, which merged with Nuance Communications. The research group headed by A. G. Ramakrishnan at the Medical intelligence and language engineering lab, Indian Institute of Science, has developed PrintToBraille tool, an open source GUI frontend that can be used by any OCR to convert scanned images of printed books to Braille books.\n\nIn the 2000s, OCR was made available online as a service (WebOCR), in a cloud computing environment, and in mobile applications like real-time translation of foreign-language signs on a smartphone.\n\nVarious commercial and open source OCR systems are available for most common writing systems, including Latin, Cyrillic, Arabic, Hebrew, Indic, Bengali (Bangla), Devanagari, Tamil, Chinese, Japanese, and Korean characters.\n\nOCR engines have been developed into many kinds of domain-specific OCR applications, such as receipt OCR, invoice OCR, check OCR, legal billing document OCR.\n\nThey can be used for:\n\n\nOCR is generally an \"offline\" process, which analyses a static document. Handwriting movement analysis can be used as input to handwriting recognition. Instead of merely using the shapes of glyphs and words, this technique is able to capture motions, such as the order in which segments are drawn, the direction, and the pattern of putting the pen down and lifting it. This additional information can make the end-to-end process more accurate. This technology is also known as \"on-line character recognition\", \"dynamic character recognition\", \"real-time character recognition\", and \"intelligent character recognition\".\n\nOCR software often \"pre-processes\" images to improve the chances of successful recognition. Techniques include:\n\nSegmentation of fixed-pitch fonts is accomplished relatively simply by aligning the image to a uniform grid based on where vertical grid lines will least often intersect black areas. For proportional fonts, more sophisticated techniques are needed because whitespace between letters can sometimes be greater than that between words, and vertical lines can intersect more than one character.\n\nThere are two basic types of core OCR algorithm, which may produce a ranked list of candidate characters.\n\nMatrix matching involves comparing an image to a stored glyph on a pixel-by-pixel basis; it is also known as \"pattern matching\", \"pattern recognition\", or \"image correlation\". This relies on the input glyph being correctly isolated from the rest of the image, and on the stored glyph being in a similar font and at the same scale. This technique works best with typewritten text and does not work well when new fonts are encountered. This is the technique the early physical photocell-based OCR implemented, rather directly.\n\nFeature extraction decomposes glyphs into \"features\" like lines, closed loops, line direction, and line intersections. The extraction features reduces the dimensionality of the representation and makes the recognition process computationally efficient. These features are compared with an abstract vector-like representation of a character, which might reduce to one or more glyph prototypes. General techniques of feature detection in computer vision are applicable to this type of OCR, which is commonly seen in \"intelligent\" handwriting recognition and indeed most modern OCR software. Nearest neighbour classifiers such as the k-nearest neighbors algorithm are used to compare image features with stored glyph features and choose the nearest match.\n\nSoftware such as Cuneiform and Tesseract use a two-pass approach to character recognition. The second pass is known as \"adaptive recognition\" and uses the letter shapes recognised with high confidence on the first pass to recognise better the remaining letters on the second pass. This is advantageous for unusual fonts or low-quality scans where the font is distorted (e.g. blurred or faded).\n\nThe OCR result can be stored in the standardised ALTO format, a dedicated XML schema maintained by the United States Library of Congress.\n\nFor a list of optical character recognition software see Comparison of optical character recognition software.\n\nOCR accuracy can be increased if the output is constrained by a lexicona list of words that are allowed to occur in a document. This might be, for example, all the words in the English language, or a more technical lexicon for a specific field. This technique can be problematic if the document contains words not in the lexicon, like proper nouns. Tesseract uses its dictionary to influence the character segmentation step, for improved accuracy.\n\nThe output stream may be a plain text stream or file of characters, but more sophisticated OCR systems can preserve the original layout of the page and produce, for example, an annotated PDF that includes both the original image of the page and a searchable textual representation.\n\n\"Near-neighbor analysis\" can make use of co-occurrence frequencies to correct errors, by noting that certain words are often seen together. For example, \"Washington, D.C.\" is generally far more common in English than \"Washington DOC\".\n\nKnowledge of the grammar of the language being scanned can also help determine if a word is likely to be a verb or a noun, for example, allowing greater accuracy.\n\nThe Levenshtein Distance algorithm has also been used in OCR post-processing to further optimize results from an OCR API.\n\nIn recent years, the major OCR technology providers began to tweak OCR systems to better deal with specific types of input. Beyond an application-specific lexicon, better performance can be had by taking into account business rules, standard expression, or rich information contained in color images. This strategy is called \"Application-Oriented OCR\" or \"Customised OCR\", and has been applied to OCR of license plates, invoices, screenshots, ID cards, driver licenses, and automobile manufacturing.\n\nThere are several techniques for solving the problem of character recognition by means other than improved OCR algorithms.\n\nSpecial fonts like OCR-A, OCR-B, or MICR fonts, with precisely specified sizing, spacing, and distinctive character shapes, allow a higher accuracy rate during transcription. These were often used in early matrix-matching systems.\n\n\"Comb fields\" are pre-printed boxes that encourage humans to write more legiblyone glyph per box. These are often printed in a \"dropout color\" which can be easily removed by the OCR system.\n\nPalm OS used a special set of glyphs, known as \"Graffiti\" which are similar to printed English characters but simplified or modified for easier recognition on the platform's computationally limited hardware. Users would need to learn how to write these special glyphs.\n\nZone-based OCR restricts the image to a specific part of a document. This is often referred to as \"Template OCR\".\n\nCrowdsourcing humans to perform the character recognition can quickly process images like computer-driven OCR, but with higher accuracy for recognising images than is obtained with computers. Practical systems include the Amazon Mechanical Turk and reCAPTCHA. The National Library of Finland has developed an online interface for users correct OCRed texts in the standardised ALTO format. Crowdsourcing has also been used not to perform character recognition directly but to invite software developers to develop image processing algorithms, for example, through the use of rank-order tournaments.\n\nCommissioned by the U.S. Department of Energy (DOE), the Information Science Research Institute (ISRI) had the mission to foster the improvement of automated technologies for understanding machine printed documents, and it conducted the most authoritative of the \"Annual Test of OCR Accuracy\" from 1992 to 1996.\n\nRecognition of Latin-script, typewritten text is still not 100% accurate even where clear imaging is available. One study based on recognition of 19th- and early 20th-century newspaper pages concluded that character-by-character OCR accuracy for commercial OCR software varied from 81% to 99%; total accuracy can be achieved by human review or Data Dictionary Authentication. Other areas—including recognition of hand printing, cursive handwriting, and printed text in other scripts (especially those East Asian language characters which have many strokes for a single character)—are still the subject of active research. The MNIST database is commonly used for testing systems' ability to recognise handwritten digits.\n\nAccuracy rates can be measured in several ways, and how they are measured can greatly affect the reported accuracy rate. For example, if word context (basically a lexicon of words) is not used to correct software finding non-existent words, a character error rate of 1% (99% accuracy) may result in an error rate of 5% (95% accuracy) or worse if the measurement is based on whether each whole word was recognised with no incorrect letters.\n\nWeb-based OCR systems for recognising hand-printed text on the fly have become well known as commercial products in recent years (see Tablet PC history). Accuracy rates of 80% to 90% on neat, clean hand-printed characters can be achieved by pen computing software, but that accuracy rate still translates to dozens of errors per page, making the technology useful only in very limited applications.\n\nRecognition of cursive text is an active area of research, with recognition rates even lower than that of hand-printed text. Higher rates of recognition of general cursive script will likely not be possible without the use of contextual or grammatical information. For example, recognising entire words from a dictionary is easier than trying to parse individual characters from script. Reading the \"Amount\" line of a cheque (which is always a written-out number) is an example where using a smaller dictionary can increase recognition rates greatly. The shapes of individual cursive characters themselves simply do not contain enough information to accurately (greater than 98%) recognise all handwritten cursive script.\n\nCharacters to support OCR were added to the Unicode Standard in June 1993, with the release of version 1.1.\n\nSome of these characters are mapped from fonts specific to MICR, OCR-A or OCR-B.\n\n", "id": "49091", "title": "Optical character recognition"}
{"url": "https://en.wikipedia.org/wiki?curid=439697", "text": "Optical mark recognition\n\nOptical mark recognition (also called optical mark reading and OMR) is the process of capturing human-marked data from document forms such as surveys and tests.They are used to read questionnaires, multiple choice examination paper in the form of lines or shadded areas.\n\nMany traditional OMR devices work with a dedicated scanner device that shines a beam of light onto the form paper. The contrasting reflectivity at predetermined positions on a page is then used to detect these marked areas because they reflect less light than the blank areas of the paper.\n\nSome OMR devices use forms which are preprinted onto 'transoptic' paper and measure the amount of light which passes through the paper, thus a mark on either side of the paper will reduce the amount of light passing through the paper.\n\nIn contrast to the dedicated OMR device, desktop OMR software allows a user to create their own forms in a word processor and print them on a laser printer. The OMR software then works with a common desktop image scanner with a document feeder to process the forms once filled out.\n\nOMR is generally distinguished from optical character recognition (OCR) by the fact that a complicated pattern recognition engine is not required. That is, the marks are constructed in such a way that there is little chance of not reading the marks correctly. This does require the image to have high contrast and an easily recognizable or irrelevant shape. A related field to OMR and OCR is the recognition of barcodes such as the UPC bar code found on product packaging.\n\nOne of the most familiar applications of optical mark recognition is the use of #2 pencil (HB in Europe) bubble optical answer sheets in multiple choice question examinations. Students mark their answers, or other personal information, by darkening circles marked on a pre-printed sheet. Afterwards the sheet is automatically graded by a scanning machine. In the United States and most European countries, a horizontal or vertical 'tick' in a rectangular 'lozenge' is the most commonly used type of OMR form, the most familiar application being the UK National lottery form. Lozenge marks are a later technology and have the advantage of being easier to mark and easier to erase. The large 'bubble' marks are legacy technology from the very early OMR machines that were so insensitive a large mark was required for reliability. In most Asian countries, a special marker is used to fill in an optical answer sheet. Students, likewise mark answers or other information via darkening circles marked on a pre-printed sheet. Then the sheet is automatically graded by a scanning machine.\n\nMany of today's OMR applications involve people filling in specialized forms. These forms are optimized for computer scanning, with careful registration in the printing, and careful design so that ambiguity is reduced to the minimum possible. Due to its extremely low error rate, low cost and ease-of-use, OMR is a popular method of tallying votes.\n\nOMR marks are also added to items of physical mail so folder inserter equipment can be used. The marks are added to each (normally facing/odd) page of a mail document and consist of a sequence of black dashes that folder inserter equipment scans in order to determine when the mail should be folded then inserted in an envelope.\n\nOMR software is a computer software application that makes OMR possible on a desktop computer by using an Image scanner to process surveys, tests, attendance sheets, checklists, and other plain-paper forms printed on a laser printer.\n\nOMR software is used to capture data from OMR sheets. While data capturing scanning devices focus on many factors like thickness of paper dimensions of OMR sheet and designing pattern.\n\nCommercial OMR software\n\nOne of the first OMR software packages that used images from common image scanners was Remark Office OMR, made by Gravic, Inc. (originally named Principia Products, Inc.). Remark Office OMR 1.0 was released in 1991.\n\nThe need for OMR software originated because early optical mark recognition systems used dedicated scanners and special pre-printed forms with drop-out colors and registration marks. Such forms typically cost US$0.10 to $0.19 a page. In contrast, OMR software users design their own mark-sense forms with a word processor or built-in form editor, print them locally on a printer, and can save thousands of dollars on large numbers of forms.\n\nIdentifying optical marks within a form, such as for processing census forms, has been offered by many forms-processing (Batch Transaction Capture) companies since the late 1980s. Mostly this is based on a bitonal image and pixel count with minimum and maximum pixel counts to eliminate extraneous marks, such as those erased with a dirty eraser that when converted into a black-and-white image (bitonal) can look like a legitimate mark. So this method can cause problems when a user changes his mind, and so some products started to use grayscale to better identify the intent of the marker—internally scantron and NCS scanners used grayscale.\n\nOMR software is also used for adding OMR marks to mail documents so they can be scanned by folder inserter equipment. An example of OMR software is Mail Markup from UK developer Funasset Limited. This software allows the user to configure and select an OMR sequence then apply the OMR marks to mail documents prior to printing.\n\nSome commercial OMR software products are as follows.\n\nSome OMR software products are developed and or distributed under open source licenses.\n\nOptical mark recognition (OMR) is the scanning of paper to detect the presence or absence of a mark in a predetermined position. Optical mark recognition has evolved from several other technologies. In the early 19th century and 20th century patents were given for machines that would aid the blind.\n\nOMR is now used as an input device for data entry. Two early forms of OMR are paper tape and punch cards which use actual holes punched into the medium instead of pencil filled circles on the medium. Paper tape was used as early as 1857 as an input device for telegraph. Punch cards were created in 1890 and were used as input devices for computers. The use of punch cards declined greatly in the early 1970s with the introduction of personal computers. With modern OMR, where the presence of a pencil filled in bubble is recognized, the recognition is done via an optical scanner.\n\nThe first mark sense scanner was the IBM 805 Test Scoring Machine; this read marks by sensing the electrical conductivity of graphite pencil lead using pairs of wire brushes that scanned the page. In the 1930s, Richard Warren at IBM experimented with optical mark sense systems for test scoring, as documented in US Patents 2,150,256 (filed in 1932, granted in 1939) and 2,010,653 (filed in 1933, granted in 1935). The first successful optical mark-sense scanner was developed by Everett Franklin Lindquist as documented in US Patent 3,050,248 (filed in 1955, granted in 1962). Lindquist had developed numerous standardized educational tests, and needed a better test scoring machine than the then-standard IBM 805. The rights to Lindquist's patents were held by the Measurement Research Center until 1968, when the University of Iowa sold the operation to Westinghouse Corporation.\n\nDuring the same period, IBM also developed a successful optical mark-sense test-scoring machine, as documented in US Patent 2,944,734 (filed in 1957, granted in 1960). IBM commercialized this as the IBM 1230 Optical mark scoring reader in 1962. This and a variety of related machines allowed IBM to migrate a wide variety of applications developed for its mark sense machines to the new optical technology. These applications included a variety of inventory management and trouble reporting forms, most of which had the dimensions of a standard punched card.\n\nWhile the other players in the educational testing arena focused on selling scanning services, Scantron Corporation, founded in 1972, had a different model; it would distribute inexpensive scanners to schools and make profits from selling the test forms. As a result, many people came to think of all mark-sense forms (whether optically sensed or not) as \"scantron\" forms. Scantron operates as a subsidiary of M&F Worldwide(MFW) and provides testing and assessment systems and services and data collection and analysis services to educational institutions, businesses and government.\n\nIn 1983, Westinghouse Learning Corporation was acquired by National Computer Systems (NCS). In 2000, NCS was acquired by Pearson Education, where the OMR technology formed the core of Pearson's Data Management group. In February 2008, M&F Worldwide purchased the Data Management group from Pearson; the group is now part of the Scantron brand.\n\nOMR has been used in many situations as mentioned below. The use of OMR in inventory systems was a transition between punch cards and bar codes and is not used as much for this purpose. OMR is still used extensively for surveys and testing though.\n\nThe use of OMR is not limited to schools or data collection agencies; many businesses and health care agencies use OMR to streamline their data input processes and reduce input error. OMR, OCR, and ICR technologies all provide a means of data collection from paper forms. OMR may also be done using an OMR (discrete read head) scanner or an imaging scanner.\n\nThere are many other applications for OMR, for example:\n\nOMR has different fields to provide the format the questioner desires. These fields include:\n\n\nIn the past and presently, some OMR systems require special paper, special ink and a special input reader (Bergeron, 1998). This restricts the types of questions that can be asked and does not allow for much variability when the form is being input. Progress in OMR now allows users to create and print their own forms and use a scanner (preferably with a document feeder) to read the information. The user is able to arrange questions in a format that suits their needs while still being able to easily input the data. OMR systems approach one hundred percent accuracy and only take 5 milliseconds on average to recognize marks. Users can use squares, circles, ellipses and hexagons for the mark zone. The software can then be set to recognize filled in bubbles, crosses or check marks.\n\nOMR can also be used for personal use. There are all-in-one printers in the market that will print the photos the user selects by filling in the bubbles for size and paper selection on an index sheet that has been printed. Once the sheet has been filled in, the individual places the sheet on the scanner to be scanned and the printer will print the photos according to the marks that were indicated.\n\nThere are also some disadvantages and limitations to OMR. If the user wants to gather large amounts of text, then OMR complicates the data collection. There is also the possibility of missing data in the scanning process, and incorrectly or unnumbered pages can lead to their being scanned in the wrong order. Also, unless safeguards are in place, a page could be rescanned, providing duplicate data and skewing the data.\n\nAs a result of the widespread adoption and ease of use of OMR, standardized examinations can consist primarily of multiple-choice questions, changing the nature of what is being tested.\n\n", "id": "439697", "title": "Optical mark recognition"}
{"url": "https://en.wikipedia.org/wiki?curid=15874732", "text": "Artificial intelligence marketing\n\nArtificial intelligence marketing (AIM) is a form of direct marketing leveraging database marketing techniques as well as AI concept and model such as machine learning and Bayesian Network. The main difference resides in the reasoning part which suggests it is performed by computer and algorithm instead of human.\n\nArtificial intelligence marketing provides a set of tools and techniques that enable behavioral targeting. \n\nArtificial intelligence marketing principle is based on the perception-reasoning-action cycle you find in cognitive science. In marketing context this cycle is adapted to form the collect, reason and act cycle.\n\nThis term relates to all activities which aims at capturing customer or prospect data. Whether taken online or offline these data are then saved into customer or prospect databases.\n\nThis is the part where data is transformed into information and eventually intelligence or insight. This is the section where artificial intelligence and machine learning in particular have a key role to play.\n\nWith the intelligence gathered from the \"reason\" step above you can then \"act\". In marketing context act would be some sort of communications that would attempt to influence a prospect or customer purchase decision using incentive driven message\n\nAgain artificial intelligence has a role to play in this stage as well. Ultimately in an unsupervised model the machine would take the decision and act accordingly to the information it receives at the \"collect\" stage.\n\n\"Machine learning is concerned with the design and development of algorithms and techniques that allow computers to \"learn\".\"\n\nAs defined above machine learning is one of the techniques that can be employed to enable more effective behavioral targeting\n\nAs mentioned in the behavioral targeting article :\n\"\"Many online users & advocacy groups are concerned about privacy issues around doing this type of targeting. This is an area that the behavioral targeting industry is trying to minimize through education, advocacy & product constraints to keep all information non-personally identifiable or to use opt-in and permission from end-users (permission marketing).\"\"\n\n", "id": "15874732", "title": "Artificial intelligence marketing"}
{"url": "https://en.wikipedia.org/wiki?curid=48198256", "text": "Emotion recognition\n\nEmotion recognition is the process of identifying human emotion, most typically from facial expressions. This is both something that humans do automatically but computational methodologies have also been developed.\n\nHumans show universal consistency in recognising emotions but also show a great deal of variability between individuals in their abilities. This has been a major topic of study in psychology.\n\nThis process leverages techniques from multiple areas, such as signal processing, machine learning, and computer vision. The computers use different methods to interpret emotion such as Bayesian networks.\n\nThe computer programmers often use Paul Ekman's Facial Action Coding System as a guide.\n\nEmotion recognition is used for a variety of reasons. Affectiva uses it to help advertisers and content creators to sell their products more effectively. Affectiva also makes a Q-sensor that gauges the emotions of autistic children. Emotient was a startup company which utilized artificial intelligence to predict \"attitudes and actions based on facial expressions\". Apple indicated its intention to buy Emotient in January 2016. nViso provides real-time emotion recognition for web and mobile applications through a real-time API. Visage Technologies AB offers emotion estimation as a part of their Visage SDK for marketing and scientific research and similar purposes. Eyeris is an emotion recognition company that works with embedded system manufacturers including car makers and social robotic companies on integrating its face analytics and emotion recognition software; as well as with video content creators to help them measure the perceived effectiveness of their short and long form video creative. Emotion recognition and emotion analysis are being studied by companies and universities around the world.\n\n", "id": "48198256", "title": "Emotion recognition"}
{"url": "https://en.wikipedia.org/wiki?curid=52202762", "text": "Niki.ai\n\nNiki is an artificial intelligence company headquartered in Bangalore, Karnataka. It was founded in May 2015 by 4 IIT Kharagpur graduates - Sachin Jaiswal, Keshav Prawasi, Shishir Modi and Nitin Babel.\n\nThe Niki android app was launched for a limited beta in June, 2015 and then released for public during YourStory's TechSparks 2015, and is a Tech30 company. The company has raised an undisclosed amount in seed funding from Unilazer Ventures, a Mumbai-based VC firm founded by Ronnie Screwvala, in October 2015. This was followed by another seed funding round by Ratan Tata in May 2016.\n\nThe product is an Artificial Intelligent powered chatbot which works as an intelligent personal assistant, named Niki. Leveraging on Natural Language processing and Machine Learning, Niki presents a chat based Natural Language User Interface to the users where they can interact with Niki in their natural language. Niki understands how users chat in India, and decipher the words, in the context of product/services that they would like to purchase, and comes up with the apt recommendations for the same.\n\nInitially it was only available on the Android platform as a mobile app, but now the company has expanded its operations to the Facebook messenger and Apple iOS platforms and have introduced a better user experience and Natural Language Processing Tech. In the near future the company aims to be present on more messaging platforms like Slack and WhatsApp. The company currently provides 10+ services to over 100k consumers, covering a wide spectrum ranging from utility services like mobile recharge and all bill payments and travel services like cabs, buses, hotels to entertainment services like movies and events. There are many more services in the pipeline, such as flights and healthcare in the next 3 months.\n\nNiki performs ordering tasks via chat such as Recharge, Cab booking and bill payments. Users can chat with Niki just as they would chat with a human, but the chat has to be related to the product/service that’s being ordering. Niki has three major services currently.\n\nUsers can ask for the best recharge plans as per his requirements such as talk-time, validity or data size. Niki, then comes up with the apt recommendations that suit the set criteria. Users can choose one of the provided options and make payment in-chat with Paytm wallet or online payment. In-chat payment in Niki is powered by Paytm integration wherein an OTP generated by Paytm is fetched to Niki to debit the user’s wallet and confirm the transaction.\n\nniki.ai has partnered with Ola & Uber to offer their cab services in chat through Niki. Users can now look up for all the Ola & Uber services in one app and pick the nearest or the cheapest cab or go with their preferred cab anytime. Also, cab booking now happens on 2G.\n\nNiki helps users pay their postpaid, water, gas, electricity & DTH bills, insurance premiums with their Paytm wallet in chat. Users have to enter their billing details for the first time and then, put up the bill amount and proceed with payment. Billing details get automatically saved with Niki for future transactions and customers then, have to just enter the bill amount & complete the payment.\n\nIn August 2017, Niki.ai partnered with LazyPay to enable 'buy now, pay later' feature for its users.\nIn September 2017, Infosys Finacle tied up with Niki.ai to provide chat-based service to banking customers.\nNiki was featured in \"The Economic Times\", \"Tech in Asia\", \"Business Standard\" and other magazines. Niki was lauded as the new innovation in the Artificial Intelligence space and one of the very few startups in India to take it up on Machine Learning to develop a chatbot for ordering.\n\n", "id": "52202762", "title": "Niki.ai"}
{"url": "https://en.wikipedia.org/wiki?curid=52404701", "text": "Quick, Draw!\n\nQuick, Draw! is an online game developed by Google that challenges players to draw a picture of an object or idea and then uses a neural network artificial intelligence to guess what the drawings represent. The AI learns from each drawing, increasing its ability to guess correctly in the future. The game is similar to Pictionary in that the player only has a limited time to draw (20 seconds). The concepts that it guesses can be simple, like 'foot', or more complicated, like 'animal migration'. This game is one of many simple games created by Google that are AI based as part of a project known as 'A.I. Experiments'.\n\n", "id": "52404701", "title": "Quick, Draw!"}
{"url": "https://en.wikipedia.org/wiki?curid=52588198", "text": "Artificial intelligence in healthcare\n\nArtificial intelligence (AI) in healthcare uses algorithms and software to approximate human cognition in the analysis of complex medical data. The primary aim of health-related AI applications is to analyze relationships between prevention or treatment techniques and patient outcomes. AI programs have been developed and applied to practices such as diagnosis processes, treatment protocol development, drug development, personalized medicine and patient monitoring and care, among others. Medical institutions such as The Mayo Clinic, Memorial Sloan Kettering Cancer Center and National Health Service, multinational technology companies such as IBM and Google and startups such as Welltok and Ayasdi, have created solutions currently used in the industry. Healthcare remains the top area of investment in AI as measured by venture capital deal flow.\n\nResearch in the 1960s and 1970s produced the first problem-solving program, or expert system, known as Dendral. While it was designed for applications in organic chemistry, it provided the basis for the subsequent system MYCIN, considered one of the most significant early uses of artificial intelligence in medicine. MYCIN and other systems such as INTERNIST-1 and CASNET did not achieve routine use by practitioners however.\n\nThe 1980s and 1990s brought the proliferation of the microcomputer and new levels of network connectivity, as well as the recognition by researchers and developers that AI systems in healthcare must be designed to accommodate the absence of perfect data and build on the expertise of physician users. New approaches involving fuzzy set theory, Bayesian networks and artificial neural networks, were created to reflect the evolved needs of intelligent computing systems in healthcare.\n\nMedical and technological advancements occurring over this half-century period that have simultaneously enabled the growth healthcare-related applications of AI include: \n\nIBM's Watson Oncology is in development at Memorial Sloan Kettering Cancer Center and Cleveland Clinic. IBM is also working with CVS Health on AI applications in chronic disease treatment and with Johnson & Johnson on analysis of scientific papers to find new connections for drug development.\n\nMicrosoft's Hanover project, in partnership with Oregon Health & Science University's Knight Cancer Institute, analyzes medical research to predict the most effective cancer drug treatment options for patients. Other projects include medical image analysis of tumor progression and the development of programmable cells.\n\nGoogle's DeepMind platform is being used by the UK National Health Service to detect certain health risks through data collected via a mobile app. A second project with the NHS involves analysis of medical images collected from NHS patients to develop computer vision algorithms to detect cancerous tissues.\n\nIntel's venture capital arm Intel Capital recently invested in startup Lumiata which uses AI to identify at-risk patients and develop care options.\n\nPredictive Medical Technologies uses intensive care unit data to identify patients likely to suffer cardiac incidents. Modernizing Medicine uses knowledge gathered from healthcare professionals as well as patient outcome data to recommend treatments. Nimblr.ai uses an A.I. Chatbot to connect scheduling Electronic health record systems and automate the confirmation and scheduling of patients.\n\nIn May 2016, the White House announced its plan to host a series of workshops and formation of the National Science and Technology Council (NSTC) Subcommittee on Machine Learning and Artificial Intelligence. In October 2016, the group published The National Artificial Intelligence Research and Development Strategic Plan, outlining its proposed priorities for Federally-funded AI research and development (within government and academia). The report notes a strategic R&D plan for the subfield of health information technology is in development stages.\n\nInvestments from the US government in healthcare initiatives that will rely on AI include its $1B proposed budget for the Cancer Moonshot and $215M proposed investment in the Precision Medicine Initiative.\n\n", "id": "52588198", "title": "Artificial intelligence in healthcare"}
{"url": "https://en.wikipedia.org/wiki?curid=49242352", "text": "AlphaGo\n\nAlphaGo is a computer program that plays the board game Go. It was developed by Alphabet Inc.'s Google DeepMind in London.\n\nIn October 2015, AlphaGo became the first computer Go program to beat a human professional Go player without handicaps on a full-sized 19×19 board. In March 2016, it beat Lee Sedol in a five-game match, the first time a computer Go program has beaten a 9-dan professional without handicaps. Although it lost to Lee Sedol in the fourth game, Lee resigned the final game, giving a final score of 4 games to 1 in favour of AlphaGo. In recognition of the victory, AlphaGo was awarded an honorary 9-dan by the Korea Baduk Association. The lead up and the challenge match with Lee Sedol were documented in a documentary film also titled \"AlphaGo\", directed by Greg Kohs. It was chosen by \"Science\" as one of the Breakthrough of the Year runners-up on 22 December 2016.\n\nAt the 2017 Future of Go Summit, AlphaGo beat Ke Jie, the world No.1 ranked player at the time, in a three-game match. After this, AlphaGo was awarded professional 9-dan by the Chinese Weiqi Association. After the match between AlphaGo and Ke Jie, AlphaGo retired while DeepMind continues AI research in other areas.\n\nAlphaGo uses a Monte Carlo tree search algorithm to find its moves based on knowledge previously \"learned\" by machine learning, specifically by an artificial neural network (a deep learning method) by extensive training, both from human and computer play. \n\nGo is considered much more difficult for computers to win than other games such as chess, because its much larger branching factor makes it prohibitively difficult to use traditional AI methods such as alpha–beta pruning, tree traversal and heuristic search.\n\nAlmost two decades after IBM's computer Deep Blue beat world chess champion Garry Kasparov in the 1997 match, the strongest Go programs using artificial intelligence techniques only reached about amateur 5-dan level, and still could not beat a professional Go player without handicaps. In 2012, the software program Zen, running on a four PC cluster, beat Masaki Takemiya (9p) two times at five and four stones handicap. In 2013, Crazy Stone beat Yoshio Ishida (9p) at four-stones handicap.\n\nAccording to DeepMind's David Silver, the AlphaGo research project was formed around 2014 to test how well a neural network using deep learning can compete at Go. AlphaGo represents a significant improvement over previous Go programs. In 500 games against other available Go programs, including Crazy Stone and Zen, AlphaGo running on a single computer won all but one. In a similar matchup, AlphaGo running on multiple computers won all 500 games played against other Go programs, and 77% of games played against AlphaGo running on a single computer. The distributed version in October 2015 was using 1,202 CPUs and 176 GPUs.\n\nIn October 2015, the distributed version of AlphaGo defeated the European Go champion Fan Hui, a 2-dan (out of 9 dan possible) professional, five to zero. This was the first time a computer Go program had beaten a professional human player on a full-sized board without handicap. The announcement of the news was delayed until 27 January 2016 to coincide with the publication of a paper in the journal \"Nature\" describing the algorithms used.\n\nAlphaGo played South Korean professional Go player Lee Sedol, ranked 9-dan, one of the best players at Go, with five games taking place at the Four Seasons Hotel in Seoul, South Korea on 9, 10, 12, 13, and 15 March 2016, which were video-streamed live. Aja Huang, a DeepMind team member and amateur 6-dan Go player, placed stones on the Go board for AlphaGo, which ran through Google's cloud computing with its servers located in the United States. The match used Chinese rules with a 7.5-point komi, and each side had two hours of thinking time plus three 60-second byoyomi periods. The version of AlphaGo playing against Lee used a similar amount of computing power as was used in the Fan Hui match. \"The Economist\" reported that it used 1,920 CPUs and 280 GPUs.\n\nAt the time of play, Lee Sedol had the second-highest number of Go international championship victories in the world. While there is no single official method of ranking in international Go, some sources ranked Lee Sedol as the fourth-best player in the world at the time. AlphaGo was not specifically trained to face Lee.\n\nThe first three games were won by AlphaGo following resignations by Lee. However, Lee beat AlphaGo in the fourth game, winning by resignation at move 180. AlphaGo then continued to achieve a fourth win, winning the fifth game by resignation.\n\nThe prize was US$1 million. Since AlphaGo won four out of five and thus the series, the prize will be donated to charities, including UNICEF. Lee Sedol received $150,000 for participating in all five games and an additional $20,000 for his win.\n\nIn June 2016, at a presentation held at a university in the Netherlands, Aja Huang, one of the Deep Mind team, revealed that it had rectified the problem that occurred during the 4th game of the match between AlphaGo and Lee, and that after move 78 (which was dubbed the \"divine move\" by many professionals), it would play accurately and maintain Black's advantage. Before move 78, AlphaGo was leading throughout the game and Lee's move was not credited as the one which won the game, but caused the program's computing powers to be diverted and confused. Huang explained that AlphaGo's policy network of finding the most accurate move order and continuation did not precisely guide AlphaGo to make the correct continuation after move 78, since its value network did not determine Lee's 78th move as being the most likely, and therefore when the move was made AlphaGo could not make the right adjustment to the logical continuation.\n\nOn 29 December 2016, a new account on the Tygem server named \"Magister\" (shown as 'Magist' at the server's Chinese version) from South Korea began to play games with professional players. It changed its account name to \"Master\" on 30 December, then moved to the FoxGo server on 1 January 2017. On 4 January, DeepMind confirmed that the \"Magister\" and the \"Master\" were both played by an updated version of AlphaGo. As of 5 January 2017, AlphaGo's online record was 60 wins and 0 losses, including three victories over Go's top ranked player, Ke Jie, who had been quietly briefed in advance that Master was a version of AlphaGo. After losing to Master, Gu Li offered a bounty of 100,000 yuan (US$14,400) to the first human player who could defeat Master. Master played at the pace of 10 games per day. Many quickly suspected it to be an AI player due to little or no resting between games. Its adversaries included many world champions such as Ke Jie, Park Jeong-hwan, Yuta Iyama, Tuo Jiaxi, Mi Yuting, Shi Yue, Chen Yaoye, Li Qincheng, Gu Li, Chang Hao, Tang Weixing, Fan Tingyu, Zhou Ruiyang, Jiang Weijie, Chou Chun-hsun, Kim Ji-seok, Kang Dong-yun, Park Yeong-hun, and Won Seong-jin; national champions or world championship runners-up such as Lian Xiao, Tan Xiao, Meng Tailing, Dang Yifei, Huang Yunsong, Yang Dingxin, Gu Zihao, Shin Jinseo, Cho Han-seung, and An Sungjoon. All 60 games except one were fast-paced games with three 20 or 30 seconds byo-yomi. Master offered to extend the byo-yomi to one minute when playing with Nie Weiping in consideration of his age. After winning its 59th game Master revealed itself in the chatroom to be controlled by Dr. Aja Huang of the DeepMind team, then changed its nationality to United Kingdom. After these games were completed, the co-founder of Google DeepMind, Demis Hassabis, said in a tweet, \"we're looking forward to playing some official, full-length games later [2017] in collaboration with Go organizations and experts\".\n\nGo experts were impressed by AlphaGo's performance and its nonhuman play style; Ke Jie stated that \"After humanity spent thousands of years improving our tactics, computers tell us that humans are completely wrong... I would go as far as to say not a single human has touched the edge of the truth of Go.\"\n\nIn the Future of Go Summit held in Wuzhen in May 2017, AlphaGo played three games with Ke Jie, the world No.1 ranked player, as well as two games with several top Chinese professionals, one pair Go game and one against a collaborating team of five human players.\n\nGoogle DeepMind offered 1.5 million dollars winner prizes for the three-game match between Ke Jie and AlphaGo while the losing side took 300,000 dollars. AlphaGo won all three games against Ke Jie. AlphaGo was awarded professional 9-dan by Chinese Weiqi Association.\n\nAfter winning its three-game match against Ke Jie, the world’s top Go player, AlphaGo is retiring. DeepMind is disbanding the team that worked on the game while continuing AI research in other areas. After the Summit, Deepmind published 50 full length AlphaGo vs AlphaGo matches, as a gift to the Go community.\n\nAlphaGo's team published an article in the journal \"Nature\" on 19 October 2017, introducing AlphaGo Zero, a version without human data and stronger than any previous human-champion-defeating version. By playing games against itself, AlphaGo Zero surpassed the strength of AlphaGo Lee in three days by winning 100 games to 0, reached the level of AlphaGo Master in 21 days, and exceeded all the old versions in 40 days.\n\nIn a paper released on arXiv on 5 December 2017, DeepMind claimed that it generalized AlphaGo Zero's approach into a single AlphaZero algorithm, which achieved within 24 hours a superhuman level of play in the games of chess, shogi, and Go by defeating world-champion programs, Stockfish, Elmo, and 3-day version of AlphaGo Zero in each case.\n\nOn 11 December 2017, DeepMind released AlphaGo teaching tool on its website to analyze winning rates of different Go openings by the version of AlphaGo Master, unable to play real games. The teaching tool collects 6,000 Go openings from 230,000 human games.\n\nAn early version of AlphaGo was tested on hardware with various numbers of CPUs and GPUs, running in asynchronous or distributed mode. Two seconds of thinking time was given to each move. The resulting Elo ratings are listed below. In the matches with more time per move higher ratings are achieved.\n\nIn May 2016, Google unveiled its own proprietary hardware \"tensor processing units\", which it stated had already been deployed in multiple internal projects at Google, including the AlphaGo match against Lee Sedol.\n\nIn the Future of Go Summit in May 2017, DeepMind disclosed that the version of AlphaGo used in this Summit was AlphaGo Master, and revealed that it had measured the strength of different versions of the software. AlphaGo Lee, the version used against Lee, could give AlphaGo Fan, the version used in AlphaGo vs. Fan Hui, three stones, and AlphaGo Master was three-stone stronger further.\nAs of 2016, AlphaGo's algorithm uses a combination of machine learning and tree search techniques, combined with extensive training, both from human and computer play. It uses Monte Carlo tree search, guided by a \"value network\" and a \"policy network,\" both implemented using deep neural network technology. A limited amount of game-specific feature detection pre-processing (for example, to highlight whether a move matches a nakade pattern) is applied to the input before it is sent to the neural networks.\n\nThe system's neural networks were initially bootstrapped from human gameplay expertise. AlphaGo was initially trained to mimic human play by attempting to match the moves of expert players from recorded historical games, using a database of around 30 million moves. Once it had reached a certain degree of proficiency, it was trained further by being set to play large numbers of games against other instances of itself, using reinforcement learning to improve its play. To avoid \"disrespectfully\" wasting its opponent's time, the program is specifically programmed to resign if its assessment of win probability falls beneath a certain threshold; for the match against Lee, the resignation threshold was set to 20%.\n\nToby Manning, the match referee for AlphaGo vs. Fan Hui, has described the program's style as \"conservative\". AlphaGo's playing style strongly favours greater probability of winning by fewer points over lesser probability of winning by more points. Its strategy of maximising its probability of winning is distinct from what human players tend to do which is to maximise territorial gains, and explains some of its odd-looking moves. It makes a lot of opening moves that have never or seldom been made by humans, while avoiding many second-line opening moves that human players like to make. It likes to use shoulder hits, especially if the opponent is over concentrated.\n\nAlphaGo's March 2016 victory was a major milestone in artificial intelligence research. Go had previously been regarded as a hard problem in machine learning that was expected to be out of reach for the technology of the time. Most experts thought a Go program as powerful as AlphaGo was at least five years away; some experts thought that it would take at least another decade before computers would beat Go champions. Most observers at the beginning of the 2016 matches expected Lee to beat AlphaGo.\n\nWith games such as checkers (that has been \"solved\" by the Chinook draughts player team), chess, and now Go won by computers, victories at popular board games can no longer serve as major milestones for artificial intelligence in the way that they used to. Deep Blue's Murray Campbell called AlphaGo's victory \"the end of an era... board games are more or less done and it's time to move on.\"\n\nWhen compared with Deep Blue or with Watson, AlphaGo's underlying algorithms are potentially more general-purpose, and may be evidence that the scientific community is making progress towards artificial general intelligence. Some commentators believe AlphaGo's victory makes for a good opportunity for society to start discussing preparations for the possible future impact of machines with general purpose intelligence. (As noted by entrepreneur Guy Suter, AlphaGo itself only knows how to play Go, and doesn't possess general purpose intelligence: \"[It] couldn't just wake up one morning and decide it wants to learn how to use firearms\") In March 2016, AI researcher Stuart Russell stated that \"AI methods are progressing much faster than expected, (which) makes the question of the long-term outcome more urgent,\" adding that \"in order to ensure that increasingly powerful AI systems remain completely under human control... there is a lot of work to do.\" Some scholars, such as Stephen Hawking, warned (in May 2015 before the matches) that some future self-improving AI could gain actual general intelligence, leading to an unexpected AI takeover; other scholars disagree: AI expert Jean-Gabriel Ganascia believes that \"Things like 'common sense'... may never be reproducible\", and says \"I don't see why we would speak about fears. On the contrary, this raises hopes in many domains such as health and space exploration.\" Computer scientist Richard Sutton said \"I don't think people should be scared... but I do think people should be paying attention.\"\n\nIn 2017, the DeepMind AlphaGo team received the inaugural IJCAI Marvin Minsky medal for Outstanding Achievements in AI. “AlphaGo is a wonderful achievement, and a perfect example of what the Minsky Medal was initiated to recognise”, said Professor Michael Wooldridge, Chair of the IJCAI Awards Committee. “What particularly impressed IJCAI was that AlphaGo achieves what it does through a brilliant combination of classic AI techniques as well as the state-of-the-art machine learning techniques that DeepMind is so closely associated with. It’s a breathtaking demonstration of contemporary AI, and we are delighted to be able to recognise it with this award.”\n\nGo is a popular game in China, Japan and Korea, and the 2016 matches were watched by perhaps a hundred million people worldwide. Many top Go players characterized AlphaGo's unorthodox plays as seemingly-questionable moves that initially befuddled onlookers, but made sense in hindsight: \"All but the very best Go players craft their style by imitating top players. AlphaGo seems to have totally original moves it creates itself.\" AlphaGo appeared to have unexpectedly become much stronger, even when compared with its October 2015 match where a computer had beat a Go professional for the first time ever without the advantage of a handicap. The day after Lee's first defeat, Jeong Ahram, the lead Go correspondent for one of South Korea’s biggest daily newspapers, said \"Last night was very gloomy... Many people drank alcohol.\" The Korea Baduk Association, the organization that oversees Go professionals in South Korea, awarded AlphaGo an honorary 9-dan title for exhibiting creative skills and pushing forward the game's progress.\n\nChina's Ke Jie, an 18-year-old generally recognized as the world's best Go player at the time, initially claimed that he would be able to beat AlphaGo, but declined to play against it for fear that it would \"copy my style\". As the matches progressed, Ke Jie went back and forth, stating that \"it is highly likely that I (could) lose\" after analysing the first three matches, but regaining confidence after AlphaGo displayed flaws in the fourth match.\n\nToby Manning, the referee of AlphaGo's match against Fan Hui, and Hajin Lee, secretary general of the International Go Federation, both reason that in the future, Go players will get help from computers to learn what they have done wrong in games and improve their skills.\n\nAfter game two, Lee said he felt \"speechless\": \"From the very beginning of the match, I could never manage an upper hand for one single move. It was AlphaGo's total victory.\" Lee apologized for his losses, stating after game three that \"I misjudged the capabilities of AlphaGo and felt powerless.\" He emphasized that the defeat was \"Lee Se-dol's defeat\" and \"not a defeat of mankind\". Lee said his eventual loss to a machine was \"inevitable\" but stated that \"robots will never understand the beauty of the game the same way that we humans do.\" Lee called his game four victory a \"priceless win that I (would) not exchange for anything.\"\n\nFacebook has also been working on its own Go-playing system \"darkforest\", also based on combining machine learning and Monte Carlo tree search. Although a strong player against other computer Go programs, as of early 2016, it had not yet defeated a professional human player. Darkforest has lost to CrazyStone and Zen and is estimated to be of similar strength to CrazyStone and Zen.\n\nDeepZenGo, a system developed with support from video-sharing website Dwango and the University of Tokyo, lost 2–1 in November 2016 to Go master Cho Chikun, who holds the record for the largest number of Go title wins in Japan.\n\nAlphaGo Master (white) v. Tang Weixing (31 December 2016), AlphaGo won by resignation. White 36 was widely praised.\n\n\n", "id": "49242352", "title": "AlphaGo"}
{"url": "https://en.wikipedia.org/wiki?curid=52840911", "text": "Google Neural Machine Translation\n\nGoogle Neural Machine Translation (GNMT) is a neural machine translation (NMT) system developed by Google and introduced in November 2016, that uses an artificial neural network to increase fluency and accuracy in Google Translate.\n\nGNMT improves on the quality of translation by applying an example based (EBMT) machine translation method in which the system \"learns from millions of examples\". GNMT's proposed architecture of system learning was first tested on over a hundred languages supported by Google Translate. With the large end-to-end framework, the system learns over time to create better, more natural translations. GNMT is capable of translating whole sentences at a time, rather than just piece by piece. The GNMT network can undertake interlingual machine translation by encoding the semantics of the sentence, rather than by memorizing phrase-to-phrase translations.\n\nThe Google Brain project was established in 2011 in the \"secretive Google X research lab\" by Google Fellow Jeff Dean, Google Researcher Greg Corrado, and Stanford University Computer Science professor Andrew Ng. Ng’s work has led to some of the biggest breakthroughs at Google and Stanford.\n\nIn September 2016, a research team at Google announced the development of the Google Neural Machine Translation system (GNMT) and by November Google Translate began using neural machine translation (NMT) in preference to its previous statistical methods (SMT) which had been used since October 2007, with its proprietary, in-house SMT technology.\n\nGoogle Translate's NMT system uses a large artificial neural network capable of deep learning. By using millions of examples, GNMT improves the quality of translation, using broader context to deduce the most relevant translation. The result is then rearranged and adapted to approach grammatically based human language. GNMT's proposed architecture of system learning was first tested on over a hundred languages supported by Google Translate. GNMT did not create its own universal interlingua but rather aimed at commonality found in between many languages, considered to be of more interest to psychologists and linguists than to computer scientists. The new translation engine was first enabled for eight languages: to and from English and French, German, Spanish, Portuguese, Chinese, Japanese, Korean and Turkish in 2016. In March 2017, three additional languages were enabled: Russian, Hindi and Vietnamese along with Thai for which support was added later. Support for Hebrew and Arabic was also added with help from the Google Translate Community in the same month. In mid April 2017 Google Netherlands announced support for Dutch and other European languages related to English. Further support was added for nine Indian languages, viz. Hindi, Bengali, Marathi, Gujarati, Punjabi, Tamil, Telugu, Malayalam and Kannada at the end of April 2017.\n\nThis is a list of language translation pairs supported by Google Translate's Neural Machine Translation (NMT) model. As of July 2017 all languages currently only support translation to and from English:\nThe GNMT system is said to represent an improvement over the former Google Translate in that it can handle \"zero-shot translation\", that is it directly translates one language into another (for example, Japanese to Korean). Google Translate previously first translated the source language into English and then translated the English into the target language rather than translating directly from one language to another.\n\n", "id": "52840911", "title": "Google Neural Machine Translation"}
{"url": "https://en.wikipedia.org/wiki?curid=53207980", "text": "Google Springboard\n\nGoogle Springboard is an AI-powered assistant which aid users to quickly find relevant information, as and when they need it across all associated Google apps, including (but not restricted to) Gmail, Google Docs, Google Drive, Google Calendar, Google Contacts and others alike. It also provides “actionable information & recommendations” to users based on statistical probability gathered using Machine Learning.\n\nSpringboard also integrates with Google Sites – a tool for creating web pages. The updated app now supports collaboration between users and lets them add content from services like Google Docs, Calendar and Google Maps. Some of its applications could be to quickly build things like guides and how-to(s).\n\nAt the time of launch (June 13, 2016), Google had its Springboard broadly at an \"Invite-only\" access and at the moment, it has closed the applications towards its Early Adopter Program.\n\n", "id": "53207980", "title": "Google Springboard"}
{"url": "https://en.wikipedia.org/wiki?curid=53070037", "text": "Automated journalism\n\nIn automated journalism, also known as algorithmic journalism or robot journalism, news articles are generated by computer programs. Through artificial intelligence (AI) software, stories are produced automatically by machines rather than human reporters. These programs interpret, organize, and present data in human-readable ways. Typically, the process involves an algorithm that scans large amounts of provided data, selects from an assortment of pre-programmed article structures, orders key points, and inserts details such as names, places, amounts, rankings, statistics, and other figures. The output can also be customized to fit a certain voice, tone, or style.\n\nData science and AI companies such as Automated Insights, Narrative Science, and Yseop develop and provide these algorithms to news outlets. As of 2016, only a few media organizations have used automated journalism. Early adopters include news providers such as the Associated Press, Forbes, ProPublica, and The Los Angeles Times.\n\nDue to the formulaic nature of automation, it is mainly used for stories based on statistics and numerical figures. Common topics include sports recaps, weather, financial reports, real estate analysis, and earnings reviews. StatSheet, an online platform covering college basketball, runs entirely on an automated program. The Associated Press began using automation to cover 10,000 minor baseball leagues games annually, using a program from Automated Insights and statistics from MLB Advanced Media. Outside of sports, the Associated Press also uses automation to produce stories on corporate earnings. In 2006, Thomson Reuters announced their switch to automation to generate financial news stories on its online news platform. More famously, an algorithm called Quakebot published a story about a 2014 California earthquake on The Los Angeles Times website within three minutes after the shaking has stopped.\n\nAutomated journalism is sometimes seen as an opportunity to free journalists from routine reporting, providing them with more time for complex tasks. It also allows efficiency and cost-cutting, alleviating some financial burden that many news organizations face. However, automated journalism is also perceived as a threat to the authorship and quality of news and the precarity of employment within the industry.\n\nRobot reporters are built to produce large quantities of information at quicker speeds. The Associated Press announced that their use of automation has increased the volume of earnings reports from customers by more than ten times. With software from Automated Insights and data from other companies, they can produce 150 to 300-word articles in the same time it takes journalists to crunch numbers and prepare information. By automating routine stories and tasks, journalists are promised more time for complex jobs such as investigative reporting and in-depth analysis of events.\n\nAutomated journalism is cheaper because more content can be produced within less time. It also lowers labour costs for news organizations. Reduced human input means less expenses on wages or salaries, paid leaves, vacations, and employment insurance. Automation serves as a cost-cutting tool for news outlets struggling with tight budgets but still wish to maintain the scope and quality of their coverage.\n\nIn an automated story, there is often confusion about who should be credited as the author. Several participants of a study on algorithmic authorship attributed the credit to the programmer; others perceived the news organization as the author, emphasizing the collaborative nature of the work. There is also no way for the reader to verify whether an article was written by a robot or human, which raises issues of transparency.\n\nThere are concerns about the perceived credibility of automated news. Critics doubt if algorithms are \"fair and accurate, free from subjectivity, error, or attempted influence.\" It is also remarked that machines do not replace human capabilities such as creativity, humour, and critical-thinking. Computers alone lack the ability to write stories with perspective, emotion, thorough analysis, and surprising observations.\n\nAmong the concerns about automation is the loss of employment for journalists. In the interest of saving costs, as mentioned previously, news organizations are inclined to cut staff when switching to cheaper, faster machines. In 2014, an annual census from The American Society of News Editors announced that the newspaper industry lost 3,800 full-time, professional editors. Falling by more than 10% within a year, this is the biggest drop since the industry cut over 10,000 jobs in 2007 and 2008.\n\nThe future of automated journalism can be seen as beneficial by some, however, others would argue that it could be detrimental to the industry as it removes the sense of objectivity. As stated above, in the benefits section, the costs and efficiency of robot journalism are present and proven, however, utilizing a system of automation may separate the audience from the article. This can happen because a human journalist writing on world issues may have their own personal writing style attached to the story, whereas, an article written using automation would result in the story being bland, and not having of a personality. All automated articles were written within this firm would have a style that is similar to each other and the sense of a journalist would be lost in this process.\n\nThe question regarding this issue is: what if these problems only exist with current technologies? In the 2020s, the industry may change and new technological advancements may have been made, which can implement and fix some of the issues currently associated with the thought of using robot journalism.\n\nIn a Nieman Reports article, it identifies whether or not machines will replace journalists and addresses many concerns around the concept of automated journalism practices. They discuss some of the benefits surrounding the concepts of automated journalism and how it can be beneficial to the industry, however, ultimately they support the idea that human journalists will stay around no matter how much technology changes. Their rationale is supported with the thought that the benefits of automation will never outweigh the perks of having a skilled journalist who is up to date with current technological advancements. Due to the journalism industry's reliance on technology, the industry itself must stay dynamic and shift with current trends. The professionals who work within this field must do the same as this field and can be competitive and over saturated due to the internet. As the internet has caused many shifts in the way this industry operates, it also opened the avenue for a citizen journalist to participate in the media much more frequently than before. Due to many people owning smartphones, with access to online databases and media sites, many people have taken on roles of amateur journalists. Overall this has benefited the industry from an efficiency perspective, however, it can be seen as hurting the professionals who work in the journalism field.\n", "id": "53070037", "title": "Automated journalism"}
{"url": "https://en.wikipedia.org/wiki?curid=54249476", "text": "Body Labs\n\nBody Labs is a Manhattan-based software company founded in 2013. Body Labs is a software provider of human-aware artificial intelligence that understands the 3D body shape and motion of people from RGB photos or videos.\n\nIn October 2017, the company was acquired by Amazon.\n\nBody Labs was founded by Michael Black, William J. O'Farrell, Eric Rachlin, and Alex Weiss who were connected at Brown University and Max Planck Institute for Intelligent Systems.\n\nIn 2002, Black was researching how to create a statistical model of the human body. While Black was teaching a course on computer vision at Brown University, the Virginia State Police contacted him about a robbery and murder at a 7-Eleven. The police wanted to use computer vision to identify the suspect in a surveillance video. By creating a statistical model, Black's group could vindicate some of the evidence in the case like confirming the suspect's height.\n\nOn November 13, 2014, Body Labs announced $2.2 million in Seed funding led by FirstMark Capital, with additional investors including New York Angels and existing investors.\n\nOn November 3, 2015, Body Labs announced $11 million in Series A funding led by Intel Capital, with additional investors including FirstMark Capital, Max-Planck-Innovation GmbH, Osage University Partners, Catalus Capital and the company founders.\n\nOn March 3, 2015, Body Labs launched BodyKit, a collection of API’s and embeddable components for integrating the human body into apps and tools.\n\nOn July 20, 2016, Body Labs launched Body Labs Blue, an API and embeddable Web interface that takes physical measurements and predicts additional digital measurements to help with custom clothing creation.\n\nOn October 5, 2016, Body Labs launched Body Labs Red, an API for automatically processing 3D scans into a full 3D body model. Additionally, Body Labs announced a partnership with 3dMD to process their 3D scans.\n\nOn Feb. 15, 2017, Body Labs released Mosh on the App Store, an Apple iOS app, the predicts the 3D human pose and shape of a subject and renders 3D effects on them.\n\nOn June 1, 2017, Body Labs launched SOMA, software that uses artificial intelligence to predict 3D human shape and motion from RGB photos or video.\n\nOn July 21, 2017, Body Labs launched SOMA Shape API for 3D model and Measurement Prediction. Shape API allows third party apps to easily connect to the SOMA backend.\n", "id": "54249476", "title": "Body Labs"}
{"url": "https://en.wikipedia.org/wiki?curid=55572262", "text": "AlphaGo Zero\n\nAlphaGo Zero is a version of DeepMind's Go software AlphaGo. AlphaGo's team published an article in the journal \"Nature\" on 19 October 2017, introducing AlphaGo Zero, a version created without using data from human games, and stronger than any previous version. By playing games against itself, AlphaGo Zero surpassed the strength of AlphaGo Lee in three days by winning 100 games to 0, reached the level of AlphaGo Master in 21 days, and exceeded all the old versions in 40 days.\n\nTraining artificial intelligence (AI) without datasets derived from human experts has significant implications for the development of AI with superhuman skills because expert data is \"often expensive, unreliable or simply unavailable.\" Demis Hassabis, the co-founder and CEO of DeepMind, said that AlphaGo Zero was so powerful because it was \"no longer constrained by the limits of human knowledge\". David Silver, one of the first authors of DeepMind's papers published in \"Nature\" on AlphaGo, said that it is possible to have generalised AI algorithms by removing the need to learn from humans.\n\nIn December 2017, a generalized version of AlphaGo Zero, named AlphaZero, beat the 3-day version of AlphaGo Zero by winning 60 games to 40, and with 8 hours of training it outperformed AlphaGo Lee on an Elo scale, as well as a top chess program (Stockfish) and a top Shōgi program (Elmo).\n\nAlphaGo Zero's neural network was trained using TensorFlow, with 64 GPU workers and 19 CPU parameter servers.\nOnly four TPUs were used for inference. The neural network initially knew nothing about Go beyond the rules. Unlike earlier versions of AlphaGo, Zero only perceived the board's stones, rather than having some rare human-programmed edge cases to help recognize unusual Go board positions. The AI engaged in reinforcement learning, playing against itself until it could anticipate its own moves and how those moves would affect the game's outcome. In the first three days AlphaGo Zero played 4.9 million games against itself in quick succession. It appeared to develop the skills required to beat top humans within just a few days, whereas the earlier AlphaGo took months of training to achieve the same level.\n\nFor comparison, the researchers also trained a version of AlphaGo Zero using human games, and found that it learned more quickly, but actually performed more poorly in the long run. DeepMind submitted its initial findings in a paper to \"Nature\" in April 2017, which was then published in October 2017.\n\nThe hardware cost for a single AlphaGo Zero system, including custom components, has been quoted as around $25 million.\n\nAccording to Hassabis, AlphaGo's algorithms are likely to be of the most benefit to domains that requires an intelligent search through an enormous space of possibilities, such as protein folding or accurately simulating chemical reactions. AlphaGo's techniques are probably less useful in domains that are difficult to simulate, such as learning how to drive a car. DeepMind stated in October 2017 that it had already started active work on attempting to use AlphaGo Zero technology for protein folding, and stated it would soon publish new findings.\n\nAlphaGo Zero was widely regarded as a significant advance, even when compared with its groundbreaking predecessor, AlphaGo. Oren Etzioni of the Allen Institute for Artificial Intelligence called AlphaGo Zero \"a very impressive technical result\" in \"both their ability to do it—and their ability to train the system in 40 days, on four TPUs\". The Guardian called it a \"major breakthrough for artificial intelligence\", citing Eleni Vasilaki of Sheffield University and Tom Mitchell of Carnegie Mellon University, who called it an impressive feat and an “outstanding engineering accomplishment\" respectively. Mark Pesce of the University of Sydney called AlphaGo Zero \"a big technological advance\" taking us into \"undiscovered territory\".\n\nGary Marcus, a psychologist at New York University, has cautioned that for all we know, AlphaGo may contain \"implicit knowledge that the programmers have about how to construct machines to play problems like Go\" and will need to be tested in other domains before being sure that its base architecture is effective at much more than playing Go. In contrast, DeepMind is \"confident that this approach is generalisable to a large number of domains\".\n\nIn response to the reports, South Korean Go professional Lee Sedol said, \"The previous version of AlphaGo wasn’t perfect, and I believe that’s why AlphaGo Zero was made.\"\nOn the potential for AlphaGo's development, Lee said he will have to wait and see but also said it will have an impact on young Go players.\nMok Jin-seok, who directs the South Korean national Go team, said the Go world has already been imitating the playing styles of previous versions of AlphaGo and creating new ideas from them, and he is hopeful that new ideas will come out from AlphaGo Zero. Mok also added that general trends in the Go world are now being influenced by AlphaGo’s playing style. \"At first, it was hard to understand and I almost felt like I was playing against an alien. However, having had a great amount of experience, I’ve become used to it,\" Mok said. \"We are now past the point where we debate the gap between the capability of AlphaGo and humans. It’s now between computers.\"\nMok has reportedly already begun analyzing the playing style of AlphaGo Zero along with players from the national team.\n\"Though having watched only a few matches, we received the impression that AlphaGo Zero plays more like a human than its predecessors,\" Mok said.\nChinese Go professional, Ke Jie commented on the remarkable accomplishments of the new program: \"A pure self-learning AlphaGo is the strongest. Humans seem redundant in front of its self-improvement.\"\n\nOn 5 December 2017, DeepMind team released a preprint on arXiv, introducing AlphaZero, a program using generalized AlphaGo Zero's approach, which achieved within 24 hours a superhuman level of play in chess, shogi, and Go by defeating world-champion programs, Stockfish, Elmo, and 3-day version of AlphaGo Zero in each case.\n\nAlphaZero (AZ) is a more generalized variant of the AlphaGo Zero (AGZ) algorithm, and is able to play shogi and chess as well as Go. Differences between AZ and AGZ include:\n\n\n", "id": "55572262", "title": "AlphaGo Zero"}
{"url": "https://en.wikipedia.org/wiki?curid=20405957", "text": "Mobile translation\n\nMobile translation refers to any electronic device or software application that provides audio translation. It includes any handheld electronic device that is specifically designed for audio translation. It also includes any machine translation service or software application for hand-held devices, including mobile telephones, Pocket PCs, and PDAs. Mobile translation provides hand-held device users with the advantage of instantaneous and non-mediated translation from one human language to another, usually against a service fee that is, nevertheless, significantly smaller than a human translator charges.\n\nMobile translation is part of the new range of services offered to \nmobile communication users, including location positioning (GPS \nservice), e-wallet (mobile banking), business card/bar-code/text \nscanning etc.\n\nIt relies on computer programming in the sphere of computational linguistics and the device's \ncommunication means (Internet connection or SMS) to work. \nA translation system allowing the Japanese to \nexchange conversations with foreign nationals through mobile phones \nwas first developed in 1999 by the Advanced \nTelecommunications Research Institute International-Interpreting \nTelecommunications Research Laboratories, based in Kansai Science City, \nJapan. Words spoken into the mobile device are translated into the \ntarget language and then sent as voice to the other user's mobile \nphone.\n\nMachine translation software for handheld devices featuring translation capabilities for user-input text, SMS and email, was commercially released in 2004 by Transclick and a patent was issued to Transclick for SMS, email and IM translation in \n2006.\n\nIn November 2005, another Japanese company, NEC Corporation, \nannounced the development of a translation system that could be loaded \nin mobile phones. This mobile translation system could recognize 50,000 \nJapanese words and 30,000 English words, and could be used for simple \ntranslations when travelling. However, it was not until January 2009 that NEC Corporation officially demonstrated their product.\n\nTechnological advances within the miniaturization of computing and communication devices have made possible the usage of mobile telephones in language learning. Among the early projects were the Spanish study programs which included vocabulary practice, quizzes, and word and phrase translations. Soon after, projects were developed using mobile phones to teach English at a Japanese university. By 2005, they shifted their focus to providing vocabulary instruction by SMS. A similar program was \ncreated for learning Italian in Australia. Vocabulary phrases, quizzes, and short sentences were sent via SMS.\nGoogle Translate is one of the most highly-utilized translation services. . See also Infoscope, which is a handheld device composed of a digital camera and wireless internet access, developed at IBM's Almaden Research Center.\n\nThe Ili is a handheld device that can provide instantaneous audio translation from one language to another; it only provides translation from English into Japanese or Chinese.\n\nOne2One is a prototype that does not rely on Internet connectivity in order to function. It can provide audio translation in eight languages.\n\nPixel Buds is a device produced by Google which can provide real-time audio tranlation in over 40 languages.\n\nIn order to support the machine translation service, a mobile device needs to be able to communicate with external computers (servers) that receive the user-input text/speech, translate it and send it back to the user. This is usually done via an Internet connection (WAP, GPRS, EDGE, UMTS, Wi-Fi) but some earlier applications used SMS to communicate with the translation server.\n\nMobile translation is not to be confused for the user-editable (talking) dictionaries and phrase books that are already widespread and available for many hand-held devices and do not normally require internet connectivity on the mobile device.\n\nMobile translation may include a number of useful features, auxiliary to text translation which forms the basis of the service. While the user can input text using the device keyboard, they can also use pre-existing text in the form of email or SMS messages received on the user's device (email/SMS translation). It is also possible to send a translated message, optionally containing the source text as well as the translation.\n\nSome mobile translation applications also offer additional services that further facilitate the translated communication process, such as:\nmay be transformed into human speech (by a computer that renders the \nvoice of a native speaker of the target language);\nwill record the speech and send it to the translation server to convert \ninto text before translating it;\ndevice camera) of some printed text (a road sign, a restaurant menu, a \npage of a book etc.), have the application send it to the translation \nserver which will apply Optical Character Recognition (OCR) \ntechnology, extract the text, return it to the user for editing (if \nnecessary) and then translate it into the chosen language.\ncombination and then get connected automatically to a live interpreter.\n\nRecently, there has been a notable increase of the number of language \npairs offered for automatic translation on mobile devices. While \nJapanese service providers traditionally offer cross-translation for \nJapanese, Chinese, English and Korean, others may offer translation from and into over 20 languages, or over 200 language pairs, including most Latin languages.\n\nSpeech generation is, however, limited to a smaller portion of the above, including English, Spanish, Italian, French, Chinese etc. Image translation depends on the OCR languages available.\n\nHaving portable real-time automated translation at one's disposal has a \nnumber of practical uses and advantages.\n\n\nAdvances of mobile technology and of the machine translation services have helped reduce or even eliminate some of the disadvantages of mobile translation such as the reduced screen size of the mobile device and the one-finger keyboarding. Many new hand-held devices come equipped with a QWERTY keyboard and/or a touch-sensitive screen, as well as handwriting recognition which significantly increases typing speed. After 2006, most new mobile phones and devices began featuring large screens with greater resolutions of 640 x 480 px, 854 x 480 px, or even 1024 x 480 \npx, which gives the user enough visible space to read/write large texts. In 2011, the so-called \"hybrid translation technology\", was introduced by myLanguage through its mobile app Vocre, which relies in large part on crowd-sourced language data.\n\nHowever, the most important challenge facing the mobile translation industry is the linguistic and communicative quality of the translations. Although some providers claim to have achieved an accuracy as high as 95%, boasting proprietary technology that is capable of “understanding” idioms and slang language, machine translation is still distinctly of lower quality than human translation and should be used with care if the matters translated require correctness.\n\nA disadvantage that needs mentioning is the requirement for a stable Internet connection on the user's mobile device. Since the SMS method of communicating with the translation server has proved less efficient that sending packets of data – because of the message length limit (160 characters) and the higher cost of SMS as compared with Internet traffic charges – Internet connectivity on mobile devices is a must, while coverage in some non-urban areas is still unstable.\n\n\n\n\n\n", "id": "20405957", "title": "Mobile translation"}
{"url": "https://en.wikipedia.org/wiki?curid=203619", "text": "Handwriting recognition\n\nHandwriting recognition (or HWR) is the ability of a computer to receive and interpret intelligible handwritten input from sources such as paper documents, photographs, touch-screens and other devices. The image of the written text may be sensed \"off line\" from a piece of paper by optical scanning (optical character recognition) or intelligent word recognition. Alternatively, the movements of the pen tip may be sensed \"on line\", for example by a pen-based computer screen surface, a generally easier task as there are more clues available.\n\nHandwriting recognition principally entails optical character recognition. However, a complete handwriting recognition system also handles formatting, performs correct segmentation into characters and finds the most plausible words.\n\nOff-line handwriting recognition involves the automatic conversion of text in an image into letter codes which are usable within computer and text-processing applications. The data obtained by this form is regarded as a static representation of handwriting. Off-line handwriting recognition is comparatively difficult, as different people have different handwriting styles. And, as of today, OCR engines are primarily focused on machine printed text and ICR for hand \"printed\" (written in capital letters) text.\n\nNarrowing the problem domain often helps increase the accuracy of handwriting recognition systems. A form field for a U.S. ZIP code, for example, would contain only the characters 0-9. This fact would reduce the number of possible identifications.\n\nPrimary techniques:\n\nOff-line character recognition often involves scanning a form or document written sometime in the past. This means the individual characters contained in the scanned image will need to be extracted. Tools exist that are capable of performing this step. However, there are several common imperfections in this step. The most common is when characters that are connected are returned as a single sub-image containing both characters. This causes a major problem in the recognition stage. Yet many algorithms are available that reduce the risk of connected characters.\n\nAfter the extraction of individual characters occurs, a recognition engine is used to identify the corresponding computer character. Several different recognition techniques are currently available.\n\nNeural network recognizers learn from an initial image training set. The trained network then makes the character identifications. Each neural network uniquely learns the properties that differentiate training images. It then looks for similar properties in the target image to be identified. Neural networks are quick to set up; however, they can be inaccurate if they learn properties that are not important in the target data.\n\nFeature extraction works in a similar fashion to neural network recognizers. However, programmers must manually determine the properties they feel are important.\n\nSome example properties might be:\n\nThis approach gives the recognizer more control over the properties used in identification. Yet any system using this approach requires substantially more development time than a neural network because the properties are not learned automatically.\n\nOn-line handwriting recognition involves the automatic conversion of text as it is written on a special digitizer or PDA, where a sensor picks up the pen-tip movements as well as pen-up/pen-down switching. This kind of data is known as digital ink and can be regarded as a digital representation of handwriting. The obtained signal is converted into letter codes which are usable within computer and text-processing applications.\n\nThe elements of an on-line handwriting recognition interface typically include:\n\n\nThe process of online handwriting recognition can be broken down into a few general steps:\n\n\nThe purpose of preprocessing is to discard irrelevant information in the input data, that can negatively affect the recognition. This concerns speed and accuracy. Preprocessing usually consists of binarization, normalization, sampling, smoothing and denoising. The second step is feature extraction. Out of the two- or more-dimensional vector field received from the preprocessing algorithms, higher-dimensional data is extracted. The purpose of this step is to highlight important information for the recognition model. This data may include information like pen pressure, velocity or the changes of writing direction. The last big step is classification. In this step various models are used to map the extracted features to different classes and thus identifying the characters or words the features represent.\n\nCommercial products incorporating handwriting recognition as a replacement for keyboard input were introduced in the early 1980s. Examples include handwriting terminals such as the Pencept Penpad \nand the Inforite point-of-sale terminal.\nWith the advent of the large consumer market for personal computers, several commercial products were introduced to replace the keyboard and mouse on a personal computer with a single pointing/handwriting system, such as those from PenCept, CIC and others.\nThe first commercially available tablet-type portable computer was the GRiDPad from GRiD Systems, released in September 1989. Its operating system was based on MS-DOS.\n\nIn the early 1990s, hardware makers including NCR, IBM and EO released tablet computers running the PenPoint operating system developed by GO Corp.. PenPoint used handwriting recognition and gestures throughout and provided the facilities to third-party software. IBM's tablet computer was the first to use the ThinkPad name and used IBM's handwriting recognition. This recognition system was later ported to Microsoft Windows for Pen Computing, and IBM's Pen for OS/2. None of these were commercially successful.\n\nAdvancements in electronics allowed the computing power necessary for handwriting recognition to fit into a smaller form factor than tablet computers, and handwriting recognition is often used as an input method for hand-held PDAs. The first PDA to provide written input was the Apple Newton, which exposed the public to the advantage of a streamlined user interface. However, the device was not a commercial success, owing to the unreliability of the software, which tried to learn a user's writing patterns. By the time of the release of the Newton OS 2.0, wherein the handwriting recognition was greatly improved, including unique features still not found in current recognition systems such as modeless error correction, the largely negative first impression had been made. After discontinuation of Apple Newton, the feature has been ported to Mac OS X 10.2 or later in form of Inkwell (Macintosh).\n\nPalm later launched a successful series of PDAs based on the Graffiti recognition system. Graffiti improved usability by defining a set of \"unistrokes\", or one-stroke forms, for each character. This narrowed the possibility for erroneous input, although memorization of the stroke patterns did increase the learning curve for the user. The Graffiti handwriting recognition was found to infringe on a patent held by Xerox, and Palm replaced Graffiti with a licensed version of the CIC handwriting recognition which, while also supporting unistroke forms, pre-dated the Xerox patent. The court finding of infringement was reversed on appeal, and then reversed again on a later appeal. The parties involved subsequently negotiated a settlement concerning this and other patents Graffiti (Palm OS).\n\nA Tablet PC is a special notebook computer that is outfitted with a digitizer tablet and a stylus, and allows a user to handwrite text on the unit's screen. The operating system recognizes the handwriting and converts it into typewritten text. Windows Vista and Windows 7 include personalization features that learn a user's writing patterns or vocabulary for English, Japanese, Chinese Traditional, Chinese Simplified and Korean. The features include a \"personalization wizard\" that prompts for samples of a user's handwriting and uses them to retrain the system for higher accuracy recognition. This system is distinct from the less advanced handwriting recognition system employed in its Windows Mobile OS for PDAs.\n\nAlthough handwriting recognition is an input form that the public has become accustomed to, it has not achieved widespread use in either desktop computers or laptops. It is still generally accepted that keyboard input is both faster and more reliable. , many PDAs offer handwriting input, sometimes even accepting natural cursive handwriting, but accuracy is still a problem, and some people still find even a simple on-screen keyboard more efficient.\n\nInitial software modules could understand print handwriting where the characters were separated. Author of the first applied pattern recognition program in 1962 was Shelia Guberman, then in Moscow. Commercial examples came from companies such as Communications Intelligence Corporation and IBM.\n\nIn the early 1990s, two companies, ParaGraph International, and Lexicus came up with systems that could understand cursive handwriting recognition. ParaGraph was based in Russia and founded by computer scientist Stepan Pachikov while Lexicus was founded by Ronjon Nag and Chris Kortge who were students at Stanford University. The ParaGraph CalliGrapher system was deployed in the Apple Newton systems, and Lexicus Longhand system was made available commercially for the PenPoint and Windows operating system. Lexicus was acquired by Motorola in 1993 and went on to develop Chinese handwriting recognition and predictive text systems for Motorola. ParaGraph was acquired in 1997 by SGI and its handwriting recognition team formed a P&I division, later acquired from SGI by Vadem. Microsoft has acquired CalliGrapher handwriting recognition and other digital ink technologies developed by P&I from Vadem in 1999.\n\nWolfram Mathematica (8.0 or later) also provides a handwriting or text recognition function TextRecognize.\n\nHandwriting Recognition has an active community of academics studying it. The biggest conferences for handwriting recognition are the International Conference on Frontiers in Handwriting Recognition (ICFHR), held in even-numbered years, and the International Conference on Document Analysis and Recognition (ICDAR), held in odd-numbered years. Both of these conferences are endorsed by the IEEE. Active areas of research include:\n\nSince 2009, the recurrent neural networks and deep feedforward neural networks developed in the research group of Jürgen Schmidhuber at the Swiss AI Lab IDSIA have won several international handwriting competitions. In particular, the bi-directional and multi-dimensional Long short-term memory (LSTM) of Alex Graves et al. won three competitions in connected handwriting recognition at the 2009 International Conference on Document Analysis and Recognition (ICDAR), without any prior knowledge about the three different languages (French, Arabic, Persian) to be learned. Recent GPU-based deep learning methods for feedforward networks by Dan Ciresan and colleagues at IDSIA won the ICDAR 2011 offline Chinese handwriting recognition contest; their neural networks also were the first artificial pattern recognizers to achieve human-competitive performance on the famous MNIST handwritten digits problem of Yann LeCun and colleagues at NYU.\n\n\n\n", "id": "203619", "title": "Handwriting recognition"}
{"url": "https://en.wikipedia.org/wiki?curid=28139201", "text": "Akinator\n\nAkinator is an internet game and mobile app based on Twenty Questions that attempts to determine which character the player is thinking of by asking them a series of questions. It is an artificial intelligence program that can find and learn the best questions to ask the player. Created by three French programmers led by RedstoneSpecial in 2007, it became popular worldwide in November 2008, according to Google Trends. In Europe popularity peak was reached in 2009 and Japan in 2010 with the launch of mobile apps by French mobile company SCIMOB, reaching highest ranks on app store. While playing \"Akinator\", questions are asked by a cartoon genie.\n\nIn order to begin the questionnaire, the user must hit the play button and think of a popular character (musician, athlete, political personality, actor, fictional film/TV character, Internet personality, etc.). It then begins asking a series of questions (as much as required), with \"Yes\", \"No\", \"Probably\", \"Probably not\" and \"Don't know\" as possible answers, in order to narrow down the potential character. If the answer is narrowed down to a single likely option before 25 questions are asked, the program will automatically ask if the character it chose is correct. If the character is guessed wrong three times in a row, then the program will prompt the user to input the character's name, in order to expand its database of choices. It predicts the answer based on the tree match algorithm. AKI AWARDS can be rewarded for guessing a new Character. After a new update, the user is able to purchase accessories for the genie with money obtained in-game.\n\n\"L'Express\" rated Akinator a 5 out of 5 on their list of iPhone Apps of the Week for September 9, 2009. \"Excite France\" stated that Akinator \"is just that interactive. It is revolutionary, attractive, and entertaining.\"\n", "id": "28139201", "title": "Akinator"}
{"url": "https://en.wikipedia.org/wiki?curid=55981499", "text": "AlphaZero\n\nAlphaZero is a computer program developed by the Alphabet-owned AI research company DeepMind, which uses an approach similar to AlphaGo Zero's to master not just Go, but also chess and shogi. On December 5, 2017 the DeepMind team released a preprint introducing AlphaZero, which, within 24 hours, achieved a superhuman level of play in these three games by defeating world-champion programs, Stockfish, elmo, and the 3-day version of AlphaGo Zero, in each case making use of custom tensor processing units (TPUs) that the Google programs were optimized to make use of. AlphaZero was trained solely via \"self-play\" using 5,000 first-generation TPUs to generate the games and 64 second-generation TPUs to train the neural networks, all in parallel, with no access to opening books or endgame tables. After just four hours of training, DeepMind estimated AlphaZero was playing at a higher ELO rating than Stockfish; after 9 hours of training, the algorithm decisively defeated Stockfish 8 in a time-controlled 100-game tournament (28 wins, 0 losses, and 72 draws).\n\nAlphaZero (AZ) is a more generalized variant of the AlphaGo Zero (AGZ) algorithm, and is able to play shogi and chess as well as Go. Differences between AZ and AGZ include:\n\n\nComparing Monte Carlo tree search searches, AlphaZero searches just 80,000 positions per second in chess and 40,000 in shogi, compared to 70 million for Stockfish and 35 million for elmo. AlphaZero compensates for the lower number of evaluations by using its deep neural network to focus much more selectively on the most promising variation.\n\nAlphaZero was trained solely via self-play, using 5,000 first-generation TPUs to generate the games and 64 second-generation TPUs to train the neural networks. In parallel, the in-training AlphaZero was periodically matched against its benchmark (Stockfish, elmo, or AlphaGo Zero) in brief one-second-per-move games to determine how well the training was progressing. DeepMind judged that AlphaZero's performance exceeded the benchmark around four hours of training for Stockfish, two hours for elmo, and eight hours for AlphaGo Zero.\n\nIn AlphaZero's chess tournament against Stockfish 8 (2016 TCEC world champion), each program was given one minute's worth of thinking time per move. Stockfish was allocated 64 threads and a hash size of 1 GB, a setting that Stockfish's Tord Romstad later criticized as suboptimal. AlphaZero was trained on chess for a total of nine hours before the tournament. During the tournament, AlphaZero ran on a single machine with four application-specific TPUs. In 100 games from the normal start position AlphaZero won 25 games as white, won 3 as black, and drew the remaining 72. In a series of twelve 100-game matches (of unspecified time or resource constraints) against Stockfish starting from the 12 most popular human openings, AlphaZero won 290, drew 886 and lost 24.\n\nAlphaZero was trained on shogi for a total of twelve hours before the tournament. In a hundred shogi games against elmo (World Computer Shogi Championship 27 summer 2017 tournament version with YaneuraOu 4.73 search), AlphaZero won ninety times, lost eight times and drew twice. As in the chess games, each program got one minute per move, and elmo was given 64 threads and a hash size of 1 GB.\n\nAfter 34 hours of self-learning of Go and against AlphaGo Zero, AlphaZero won 60 games and lost 40.\n\nDeepMind stated in its preprint that \"The game of chess represented the pinnacle of AI research over several decades. State-of-the-art programs are based on powerful engines that search many millions of positions, leveraging handcrafted domain expertise and sophisticated domain adaptations. AlphaZero is a generic reinforcement learning algorithm originally devised for the game of Go that achieved superior results within a few hours, searching a thousand times fewer positions, given no domain knowledge except the rules.\" DeepMind's Demis Hassabis, a chess player himself, called AlphaZero's play style \"alien\": It sometimes wins by offering counterintuitive sacrifices, like offering up a queen and bishop to exploit a positional advantage. \"It's like chess from another dimension.\"\n\nGiven the difficulty in chess of forcing a win against a strong opponent, the 28–72–0 result is a significant margin of victory. However, some grandmasters, such as Hikaru Nakamura and Komodo's Larry Kaufman, downplayed AlphaZero's victory, arguing that the match would have been closer if the programs had access to an opening database (since Stockfish was optimized for that scenario). Romstad additionally pointed out that Stockfish is not optimized for rigidly fixed-time moves and the version used is a year old. Referencing Stockfish's controversial parameter settings, \"FiveThirtyEight\" pointed to an AlphaZero-Stockfish game wherein Stockfish made \"four inaccuracies, four mistakes and three blunders\" that were detected by a version of Stockfish running with different parameters; this suggests that DeepMind's setting of non-optimal Stockfish parameters may have impacted Stockfish's playing ability.\n\nSimilarly, some shogi observers argued that the elmo hash size was too low, that the resignation settings and the \"EnteringKingRule\" settings (cf. shogi § Entering King) may have been inappropriate, and that elmo is already obsolete compared with newer programs.\n\nPapers headlined that the chess training took only four hours: \"It was managed in little more than the time between breakfast and lunch.\" \"Wired\" hyped AlphaZero as \"the first multi-skilled AI board-game champ\". AI expert Joanna Bryson noted that Google's \"knack for good publicity\" was putting it in a strong position against challengers. \"It's not only about hiring the best programmers. It's also very political, as it helps makes Google as strong as possible when negotiating with governments and regulators looking at the AI sector.\"\n\n\"I always wondered how it would be if a superior species landed on earth and showed us how they played chess,\" Danish grandmaster Peter Heine Nielsen said in a BBC interview. \"Now I know.\" Norwegian grandmaster Jon Ludvig Hammer characterized AlphaZero as \"insane attacking chess\" with profound positional play. Former champion Garry Kasparov said \"It's a remarkable achievement, even if we should have expected it after AlphaGo.\"\n\nGrandmaster Hikaru Nakamura stated \"I don't necessarily put a lot of credibility in the results simply because my understanding is that AlphaZero is basically using the Google super computer and Stockfish doesn't run on that hardware; Stockfish was basically running on what would be my laptop. If you wanna have a match that's comparable you have to have Stockfish running on a super computer as well.\"\n\n", "id": "55981499", "title": "AlphaZero"}
{"url": "https://en.wikipedia.org/wiki?curid=3712924", "text": "Neural network software\n\nNeural network software is used to simulate, research, develop, and apply artificial neural networks, software concepts adapted from biological neural networks, and, in some cases, a wider array of adaptive systems such as artificial intelligence and machine learning.\n\nNeural network simulators are software applications that are used to simulate the behavior of artificial or biological neural networks. They focus on one or a limited number of specific types of neural networks. They are typically stand-alone and not intended to produce general neural networks that can be integrated in other software. Simulators usually have some form of built-in visualization to monitor the training process. Some simulators also visualize the physical structure of the neural network.\n\nHistorically, the most common type of neural network software was intended for researching neural network structures and algorithms. The primary purpose of this type of software is, through simulation, to gain a better understanding of the behavior the and properties of neural networks. Today in the study of artificial neural networks, simulators have largely been replaced by more general component based development environments as research platforms.\n\nCommonly used artificial neural network simulators include the Stuttgart Neural Network Simulator (SNNS), Emergent and Neural Lab.\n\nIn the study of biological neural networks however, simulation software is still the only available approach. In such simulators the physical biological and chemical properties of neural tissue, as well as the electromagnetic impulses between the neurons are studied.\n\nCommonly used biological network simulators include Neuron, GENESIS, NEST and Brian.\n\nUnlike the research simulators, data analysis simulators are intended for practical applications of artificial neural networks. Their primary focus is on data mining and forecasting. Data analysis simulators usually have some form of preprocessing capabilities. Unlike the more general development environments data analysis simulators use a relatively simple static neural network that can be configured. A majority of the data analysis simulators on the market use backpropagating networks or self-organizing maps as their core. The advantage of this type of software is that it is relatively easy to use. Neural Designer is one example of a data analysis simulator.\n\nWhen the Parallel Distributed Processing volumes\n\nIn 1997, the tLearn software was released to accompany a book. This was a return to the idea of providing a small, user-friendly, simulator that was designed with the novice in mind. tLearn allowed basic feed forward networks, along with simple recurrent networks, both of which can be trained by the simple back propagation algorithm. tLearn has not been updated since 1999.\n\nIn 2011, the Basic Prop simulator was released. Basic Prop is a self-contained application, distributed as a platform neutral JAR file, that provides much of the same simple functionality as tLearn.\n\nIn 2012, Wintempla included a namespace called NN with a set of C++ classes to implement: feed forward networks, probabilistic neural networks and Kohonen networks. Neural Lab is based on Wintempla classes. Neural Lab tutorial and Wintempla tutorial explains some of these clases for neural networks. The main disadvantage of Wintempla is that it compiles only with Microsoft Visual Studio.\n\nDevelopment environments for neural networks differ from the software described above primarily on two accounts – they can be used to develop custom types of neural networks and they support deployment of the neural network outside the environment. In some cases they have advanced preprocessing, analysis and visualization capabilities.\n\nA more modern type of development environments that are currently favored in both industrial and scientific use are based on a component based paradigm. The neural network is constructed by connecting adaptive filter components in a pipe filter flow. This allows for greater flexibility as custom networks can be built as well as custom components used by the network. In many cases this allows a combination of adaptive and non-adaptive components to work together. The data flow is controlled by a control system which is exchangeable as well as the adaptation algorithms. The other important feature is deployment capabilities.\n\nWith the advent of component-based frameworks such as .NET and Java, component based development environments are capable of deploying the developed neural network to these frameworks as inheritable components. In addition some software can also deploy these components to several platforms, such as embedded systems.\n\nComponent based development environments include: Peltarion Synapse, NeuroDimension NeuroSolutions, Scientific Software Neuro Laboratory, and the LIONsolver integrated software. Free open source component based environments include Encog and Neuroph.\n\nA disadvantage of component-based development environments is that they are more complex than simulators. They require more learning to fully operate and are more complicated to develop.\n\nThe majority implementations of neural networks available are however custom implementations in various programming languages and on various platforms. Basic types of neural networks are simple to implement directly. There are also many programming libraries that contain neural network functionality and that can be used in custom implementations (such as tensorflow, theano, etc., typically providing bindings to languages such as python, C++, Java).\n\nIn order for neural network models to be shared by different applications, a common language is necessary. The Predictive Model Markup Language (PMML) has been proposed to address this need. PMML is an XML-based language which provides a way for applications to define and share neural network models (and other data mining models) between PMML compliant applications.\n\nPMML provides applications a vendor-independent method of defining models so that proprietary issues and incompatibilities are no longer a barrier to the exchange of models between applications. It allows users to develop models within one vendor's application, and use other vendors' applications to visualize, analyze, evaluate or otherwise use the models. Previously, this was very difficult, but with PMML, the exchange of models between compliant applications is now straightforward.\n\nA range of products are being offered to produce and consume PMML. This ever-growing list includes the following neural network products:\n\n\n", "id": "3712924", "title": "Neural network software"}
{"url": "https://en.wikipedia.org/wiki?curid=56195203", "text": "MUSA (MUltichannel Speaking Automaton)\n\nMUSA (MUltichannel Speaking Automaton) was an early prototype of Speech Synthesis machine started in 1975.\n\nIt consisted of a stand-alone computer hardware and a specialized software that implemented a diphone-synthesis technology. It was able to read italian in intellegibile robotic voice and also to sing managing up to 8 synthesis channels in parallel. In 1978 it was released an 45\" rpm audio disk containing some trial content of such synthesis, including the song \"Fra Martino Campanaro\" in \"a cappella\" (multiple voices) style, attached to some commercial reviews. The experiment was conducted by CSELT, Turin, Italy and was led by Giulio Modena.\n\n\n\n", "id": "56195203", "title": "MUSA (MUltichannel Speaking Automaton)"}
{"url": "https://en.wikipedia.org/wiki?curid=52345508", "text": "Eloquens (software)\n\nEloquens™ is a Text-To-Speech software, whose first version was released in 1993 by CSELT. It was the first commercial speech synthesis software able to speak Italian.\n\nIt was the first commercial product of the research center CSELT in the field of voice technology: it was built with diphone-technology aimed to reach an high computational efficiency. As a result, the produced voice is still \"robotic\", but more natural than the previous generation voice implemented in MUSA by CSELT itself. In the past, ELOQUENS was applied to automatically read timetables in the italian train stations and some telephone services provided by Telecom Italia, e.g. the automated address book service.\n\nNow is released as freeware: it is nowadays typically used in spoken comments in many YouTube videos.\n\n\n\n", "id": "52345508", "title": "Eloquens (software)"}
{"url": "https://en.wikipedia.org/wiki?curid=1191936", "text": "Bongard problem\n\nA Bongard problem is a kind of puzzle invented by the Russian computer scientist Mikhail Moiseevich Bongard (Михаил Моисеевич Бонгард, 1924–1971), probably in the mid-1960s. They were published in his 1967 book on pattern recognition. Bongard, in the introduction of the book (which deals with a number of topics including perceptrons) credits the ideas in it to a group including M. N. Vaintsvaig, V. V. Maksimov, and M. S. Smirnov.\n\nThe idea of a Bongard problem is to present two sets of relatively simple diagrams, say \"A\" and \"B\". All the diagrams from set \"A\" have a common factor or attribute, which is lacking in all the diagrams of set \"B\". The problem is to find, or to formulate, convincingly, the common factor. The problems were popularised by their occurrence in the 1979 book \"Gödel, Escher, Bach\" by Douglas Hofstadter, himself a composer of Bongard problems. Bongard problems are also at the heart of the game Zendo.\n\nMany computational architectures have been devised to solve Bongard problems, the most extensive of which being Phaeaco, by Harry Foundalis, who left the field in 2008 due to ethical concerns regarding machines that can pass as human.\n\n\n", "id": "1191936", "title": "Bongard problem"}
{"url": "https://en.wikipedia.org/wiki?curid=1222578", "text": "Generative model\n\nIn probability and statistics, a generative model is a model for generating all values for a phenomenon, both those that can be observed in the world and \"target\" variables that can only be computed from those observed. By contrast, discriminative models provide a model only for the target variable(s), generating them by analyzing the observed variables. In simple terms, discriminative models infer outputs based on inputs, while generative models generate both inputs and outputs, typically given some hidden parameters. \n\nGenerative models are used in machine learning for either modeling data directly (i.e., modeling observations drawn from a probability density function), or as an intermediate step to forming a conditional probability density function. Generative models are typically probabilistic, specifying a joint probability distribution over observation and target (label) values. A conditional distribution can be formed from a generative model through Bayes' rule.\n\nShannon (1948) gives an example in which a table of frequencies of English word pairs is used to generate a sentence beginning with \"representing and speedily is an good\"; which is not proper English but which will increasingly approximate it as the table is moved from word pairs to word triplets etc.\n\nDespite the fact that discriminative models do not need to model the distribution of the observed variables, they cannot generally express complex relationships between the observed and target variables. They don't necessarily perform better than generative models at classification and regression tasks. The two classes are seen as complementary or as different views of the same procedure.\n\nTypes of generative models are:\n\n\nIf the observed data are truly sampled from the generative model, then fitting the parameters of the generative model to maximize the data likelihood is a common method. However, since most statistical models are only approximations to the \"true\" distribution, if the model's application is to infer about a subset of variables conditional on known values of others, then it can be argued that the approximation makes more assumptions than are necessary to solve the problem at hand. In such cases, it can be more accurate to model the conditional density functions directly using a discriminative model (see below), although application-specific details will ultimately dictate which approach is most suitable in any particular case.\n\n\nA generative algorithm models how the data was generated in order to categorize a signal. It asks the question: based on my generation assumptions, which category is most likely to generate this signal?\nA discriminative algorithm does not care about how the data was generated, it simply categorizes a given signal.\n\nSuppose the input data is formula_1 and the set of labels for formula_2 is formula_3.\nA generative model learns the joint probability distribution formula_4 while a discriminative model learns the conditional probability distribution formula_5 “probability of y given x”.\n\nLet's try to understand this with an example. Consider the following 4 data points:\nformula_6\n\nFor above data, formula_4 will be following:\nwhile formula_5 will be following:\nSo, discriminative algorithms try to learn formula_5 directly from the data and then try to classify data. On the other hand, generative algorithms try to learn formula_4 which can be transformed into formula_5 later to classify the data. One of the advantages of generative algorithms is that you can use formula_4 to generate new data similar to existing data. On the other hand, discriminative algorithms generally give better performance in classification tasks.\n\n\n", "id": "1222578", "title": "Generative model"}
{"url": "https://en.wikipedia.org/wiki?curid=173926", "text": "Inductive bias\n\nThe inductive bias (also known as learning bias) of a learning algorithm is the set of assumptions that the learner uses to predict outputs given inputs that it has not encountered.\n\nIn machine learning, one aims to construct algorithms that are able to \"learn\" to predict a certain target output. To achieve this, the learning algorithm is presented some training examples that demonstrate the intended relation of input and output values. Then the learner is supposed to approximate the correct output, even for examples that have not been shown during training. Without any additional assumptions, this problem cannot be solved exactly since unseen situations might have an arbitrary output value. The kind of necessary assumptions about the nature of the target function are subsumed in the phrase \"inductive bias\".\n\nA classical example of an inductive bias is Occam's razor, assuming that the simplest consistent hypothesis about the target function is actually the best. Here \"consistent\" means that the hypothesis of the learner yields correct outputs for all of the examples that have been given to the algorithm.\n\nApproaches to a more formal definition of inductive bias are based on mathematical logic. Here, the inductive bias is a logical formula that, together with the training data, logically entails the hypothesis generated by the learner. Unfortunately, this strict formalism fails in many practical cases, where the inductive bias can only be given as a rough description (e.g. in the case of neural networks), or not at all.\n\nThe following is a list of common inductive biases in machine learning algorithms.\n\n\nAlthough most learning algorithms have a static bias, some algorithms are designed to shift their bias as they acquire more data. This does not avoid bias, since the bias shifting process itself must have a bias.\n\n", "id": "173926", "title": "Inductive bias"}
{"url": "https://en.wikipedia.org/wiki?curid=2829632", "text": "Semi-supervised learning\n\nSemi-supervised learning is a class of supervised learning tasks and techniques that also make use of unlabeled data for training – typically a small amount of labeled data with a large amount of unlabeled data. Semi-supervised learning falls between unsupervised learning (without any labeled training data) and supervised learning (with completely labeled training data). Many machine-learning researchers have found that unlabeled data, when used in conjunction with a small amount of labeled data, can produce considerable improvement in learning accuracy. The acquisition of labeled data for a learning problem often requires a skilled human agent (e.g. to transcribe an audio segment) or a physical experiment (e.g. determining the 3D structure of a protein or determining whether there is oil at a particular location). The cost associated with the labeling process thus may render a fully labeled training set infeasible, whereas acquisition of unlabeled data is relatively inexpensive. In such situations, semi-supervised learning can be of great practical value. Semi-supervised learning is also of theoretical interest in machine learning and as a model for human learning.\n\nAs in the supervised learning framework, we are given a set of formula_1 independently identically distributed examples formula_2 with corresponding labels formula_3. Additionally, we are given formula_4 unlabeled examples formula_5. Semi-supervised learning attempts to make use of this combined information to surpass the classification performance that could be obtained either by discarding the unlabeled data and doing supervised learning or by discarding the labels and doing unsupervised learning.\n\nSemi-supervised learning may refer to either transductive learning or inductive learning. The goal of transductive learning is to infer the correct labels for the given unlabeled data formula_6 only. The goal of inductive learning is to infer the correct mapping from formula_7 to formula_8.\n\nIntuitively, we can think of the learning problem as an exam and labeled data as the few example problems that the teacher solved in class. The teacher also provides a set of unsolved problems. In the transductive setting, these unsolved problems are a take-home exam and you want to do well on them in particular. In the inductive setting, these are practice problems of the sort you will encounter on the in-class exam.\n\nIt is unnecessary (and, according to Vapnik's principle, imprudent) to perform transductive learning by way of inferring a classification rule over the entire input space; however, in practice, algorithms formally designed for transduction or induction are often used interchangeably.\n\nIn order to make any use of unlabeled data, we must assume some structure to the underlying distribution of data. Semi-supervised learning algorithms make use of at least one of the following assumptions.\n\n\"Points which are close to each other are more likely to share a label.\" This is also generally assumed in supervised learning and yields a preference for geometrically simple decision boundaries. In the case of semi-supervised learning, the smoothness assumption additionally yields a preference for decision boundaries in low-density regions, so that there are fewer points close to each other but in different classes.\n\n\"The data tend to form discrete clusters, and points in the same cluster are more likely to share a label\" (although data sharing a label may be spread across multiple clusters). This is a special case of the smoothness assumption and gives rise to feature learning with clustering algorithms.\n\n\"The data lie approximately on a manifold of much lower dimension than the input space.\" In this case we can attempt to learn the manifold using both the labeled and unlabeled data to avoid the curse of dimensionality. Then learning can proceed using distances and densities defined on the manifold.\n\nThe manifold assumption is practical when high-dimensional data are being generated by some process that may be hard to model directly, but which only has a few degrees of freedom. For instance, human voice is controlled by a few vocal folds, and images of various facial expressions are controlled by a few muscles. We would like in these cases to use distances and smoothness in the natural space of the generating problem, rather than in the space of all possible acoustic waves or images respectively.\n\nThe heuristic approach of \"self-training\" (also known as \"self-learning\" or \"self-labeling\") is historically the oldest approach to semi-supervised learning, with examples of applications starting in the 1960s (see for instance Scudder (1965)).\n\nThe transductive learning framework was formally introduced by Vladimir Vapnik in the 1970s. Interest in inductive learning using generative models also began in the 1970s. A \"probably approximately correct\" learning bound for semi-supervised learning of a Gaussian mixture was demonstrated by Ratsaby and Venkatesh in 1995.\n\nSemi-supervised learning has recently become more popular and practically relevant due to the variety of problems for which vast quantities of unlabeled data are available—e.g. text on websites, protein sequences, or images. For a review of recent work see a survey article by Zhu (2008).\n\nGenerative approaches to statistical learning first seek to estimate formula_9 , the distribution of data points belonging to each class. The probability formula_10 that a given point formula_11 has label formula_12 is then proportional to formula_13 by Bayes' rule. Semi-supervised learning with generative models can be viewed either as an extension of supervised learning (classification plus information about formula_14) or as an extension of unsupervised learning (clustering plus some labels).\n\nGenerative models assume that the distributions take some particular form formula_15 parameterized by the vector formula_16. If these assumptions are incorrect, the unlabeled data may actually decrease the accuracy of the solution relative to what would have been obtained from labeled data alone.\nHowever, if the assumptions are correct, then the unlabeled data necessarily improves performance.\n\nThe unlabeled data are distributed according to a mixture of individual-class distributions. In order to learn the mixture distribution from the unlabeled data, it must be identifiable, that is, different parameters must yield different summed distributions. Gaussian mixture distributions are identifiable and commonly used for generative models.\n\nThe parameterized joint distribution can be written as formula_17 by using the Chain rule. Each parameter vector formula_16 is associated with a decision function formula_19. \nThe parameter is then chosen based on fit to both the labeled and unlabeled data, weighted by formula_20:\n\nAnother major class of methods attempts to place boundaries in regions where there are few data points (labeled or unlabeled). One of the most commonly used algorithms is the transductive support vector machine, or TSVM (which, despite its name, may be used for inductive learning as well). Whereas support vector machines for supervised learning seek a decision boundary with maximal margin over the labeled data, the goal of TSVM is a labeling of the unlabeled data such that the decision boundary has maximal margin over all of the data. In addition to the standard hinge loss formula_22 for labeled data, a loss function formula_23 is introduced over the unlabeled data by letting formula_24. TSVM then selects formula_25 from a reproducing kernel Hilbert space formula_26 by minimizing the regularized empirical risk:\n\nAn exact solution is intractable due to the non-convex term formula_23, so research has focused on finding useful approximations.\n\nOther approaches that implement low-density separation include Gaussian process models, information regularization, and entropy minimization (of which TSVM is a special case).\n\nGraph-based methods for semi-supervised learning use a graph representation of the data, with a node for each labeled and unlabeled example. The graph may be constructed using domain knowledge or similarity of examples; two common methods are to connect each data point to its formula_29 nearest neighbors or to examples within some distance formula_30. The weight formula_31 of an edge between formula_32 and formula_33 is then set to formula_34.\n\nWithin the framework of manifold regularization,\n\nthe graph serves as a proxy for the manifold. A term is added to the standard Tikhonov regularization problem to enforce smoothness of the solution relative to the manifold (in the intrinsic space of the problem) as well as relative to the ambient input space. The minimization problem becomes\n\nwhere formula_26 is a reproducing kernel Hilbert space and formula_37 is the manifold on which the data lie. The regularization parameters formula_38 and formula_39 control smoothness in the ambient and intrinsic spaces respectively. The graph is used to approximate the intrinsic regularization term. Defining the graph Laplacian formula_40 where formula_41 and formula_42 the vector formula_43, we have\n\nThe Laplacian can also be used to extend the supervised learning algorithms： regularized least squares and support vector machines (SVM) to semi-supervised versions Laplacian regularized least squares and Laplacian SVM.\n\nSome methods for semi-supervised learning are not intrinsically geared to learning from both unlabeled and labeled data, but instead make use of unlabeled data within a supervised learning framework. For instance, the labeled and unlabeled examples formula_45 may inform a choice of representation, distance metric, or kernel for the data in an unsupervised first step. Then supervised learning proceeds from only the labeled examples.\n\n\"Self-training\" is a wrapper method for semi-supervised learning. First a supervised learning algorithm is trained based on the labeled data only. This classifier is then applied to the unlabeled data to generate more labeled examples as input for the supervised learning algorithm. Generally only the labels the classifier is most confident of are added at each step.\n\nCo-training is an extension of self-training in which multiple classifiers are trained on different (ideally disjoint) sets of features and generate labeled examples for one another.\n\nHuman responses to formal semi-supervised learning problems have yielded varying conclusions about the degree of influence of the unlabeled data (for a summary see ). More natural learning problems may also be viewed as instances of semi-supervised learning. Much of human concept learning involves a small amount of direct instruction (e.g. parental labeling of objects during childhood) combined with large amounts of unlabeled experience (e.g. observation of objects without naming or counting them, or at least without feedback).\n\nHuman infants are sensitive to the structure of unlabeled natural categories such as images of dogs and cats or male and female faces. More recent work has shown that infants and children take into account not only the unlabeled examples available, but the sampling process from which labeled examples arise.\n\n\n", "id": "2829632", "title": "Semi-supervised learning"}
{"url": "https://en.wikipedia.org/wiki?curid=3274742", "text": "Learning automata\n\nLearning automata is one type of Machine Learning algorithm studied since 1970s. Compared to other learning scheme, a branch of the theory of adaptive control is devoted to learning automata surveyed by Narendra and Thathachar (1974) which were originally described explicitly as finite state automata. Learning automata select their current action based on past experiences from the environment. It will fall into the range of reinforcement learning if the environment is stochastic and Markov Decision Process (MDP) is used.\n\nResearch in learning automata can be traced back to the work of Tsetlin in the early 1960s in the Soviet Union. Together with some colleagues, he published a collection of papers on how to use matrices to describe automata functions. Additionally, Tsetlin worked on \"reasonable\" and \"collective automata behaviour\", and on \"automata games\". Learning automata were also investigated by researches in the United States in the 1960s. However, the term \"learning automaton\" was not used until Narendra and Thathachar introduced it in a survey paper in 1974.\n\nA learning automaton is an adaptive decision-making unit situated in a random environment that learns the optimal action through repeated interactions with its environment. The actions are chosen according to a specific probability distribution which is updated based on the environment response the automaton obtains by performing a particular action.\n\nWith respect to the field of reinforcement learning, learning automata are characterized as policy iterators. In contrast to other reinforcement learners, policy iterators directly manipulate the policy π. Another example for policy iterators are evolutionary algorithms.\n\nFormally, Narendra and Thathachar define a stochastic automaton to consist of:\nIn their paper, they investigate only stochastic automata with \"r\"=\"s\" and \"G\" being bijective, allowing them to confuse actions and states.\nThe states of such an automaton correspond to the states of a \"discrete-state discrete-parameter Markov process\".\n\nAt each time step \"t\"=0,1,2,3..., the automaton reads an input from its environment, updates \"p\"(\"t\") to \"p\"(\"t\"+1) by \"A\", randomly chooses a successor state according to the probabilities \"p\"(\"t\"+1) and outputs the corresponding action. The automaton's environment, in turn, reads the action and sends the next input to the automaton.\n\nFrequently, the input set \"x\" = { 0,1 } is used, with 0 and 1 corresponding to a \"nonpenalty\" and a \"penalty\" response of the environment, respectively; in this case, the automaton should learn to minimize the number of \"penalty\" responses, and the feedback loop of automaton and environment is called a \"P-model\". More generally, a \"Q-model\" allows an arbitrary finite input set \"x\", and an \"S-model\" uses the interval [0,1] of real numbers as \"x\".\n\nFinite action-set learning automata (FALA) are a class of learning automata for which the number of possible actions is finite or, in more mathematical terms, for which the size of the action-set is finite.\n\n\n", "id": "3274742", "title": "Learning automata"}
{"url": "https://en.wikipedia.org/wiki?curid=4118276", "text": "Conditional random field\n\nConditional random fields (CRFs) are a class of statistical modeling method often applied in pattern recognition and machine learning and used for structured prediction. CRFs fall into the sequence modeling family. Whereas a discrete classifier predicts a label for a single sample without considering \"neighboring\" samples, a CRF can take context into account; e.g., the linear chain CRF (which is popular in natural language processing) predicts sequences of labels for sequences of input samples.\n\nCRFs are a type of discriminative undirected probabilistic graphical model. It is used to encode known relationships between observations and construct consistent interpretations. It is often used for labeling or parsing of sequential data, such as natural language processing or biological sequences\nand in computer vision.\nSpecifically, CRFs find applications in POS Tagging, shallow parsing,\nnamed entity recognition,\ngene finding and peptide critical functional region finding,\namong other tasks, being an alternative to the related hidden Markov models (HMMs). In computer vision, CRFs are often used for object recognition and image segmentation.\n\nLafferty, McCallum and Pereira define a CRF on observations formula_1 and random variables formula_2 as follows:\n\nLet formula_3 be a graph such that\nformula_4,\nThen formula_7 is a conditional random field when the random variables formula_8, conditioned on formula_1, obey the Markov property with\nrespect to the graph: formula_10, where formula_11 means\nthat formula_12 and formula_13 are neighbors in formula_6.\nWhat this means is that a CRF is an undirected graphical model whose nodes can be divided into exactly two disjoint sets formula_1 and formula_2, the observed and output variables, respectively; the conditional distribution formula_17 is then modeled.\n\nFor general graphs, the problem of exact inference in CRFs is intractable. The inference problem for a CRF is basically the same as for an MRF and the same arguments hold.\nHowever, there exist special cases for which exact inference is feasible:\n\n\nIf exact inference is impossible, several algorithms can be used to obtain approximate solutions. These include:\n\nLearning the parameters formula_18 is usually done by maximum likelihood learning for formula_19.\nIf all nodes have exponential family distributions and all nodes are observed during training, this optimization is convex. It can be solved for example using gradient descent algorithms, or Quasi-Newton methods such as the L-BFGS algorithm.\nOn the other hand, if some variables are unobserved, the inference problem has to be solved for these variables. Exact inference is intractable in general graphs, so approximations have to be used.\n\nIn sequence modeling, the graph of interest is usually a chain graph. An input sequence of observed variables formula_20 represents a sequence of observations and formula_21 represents a hidden (or unknown) state variable that needs to be inferred given the observations. \nThe formula_22 are structured to form a chain, with an edge between each formula_23 and formula_22. As well as having a simple interpretation of the formula_22 as \"labels\" for each element in the input sequence, this layout admits efficient algorithms for:\n\nThe conditional dependency of each formula_22 on formula_20 is defined through a fixed set of \"feature functions\" of the form formula_33, which can informally be thought of as measurements on the input sequence that partially determine the likelihood of each possible value for formula_22. The model assigns each feature a numerical weight and combines them to determine the probability of a certain value for formula_22.\n\nLinear-chain CRFs have many of the same applications as conceptually simpler hidden Markov models (HMMs), but relax certain assumptions about the input and output sequence distributions. An HMM can loosely be understood as a CRF with very specific feature functions that use constant probabilities to model state transitions and emissions. Conversely, a CRF can loosely be understood as a generalization of an HMM that makes the constant transition probabilities into arbitrary functions that vary across the positions in the sequence of hidden states, depending on the input sequence.\n\nNotably in contrast to HMMs, CRFs can contain any number of feature functions, the feature functions can inspect the entire input sequence formula_20 at any point during inference, and the range of the feature functions need not have a probabilistic interpretation.\n\nCRFs can be extended into higher order models by making each formula_22 dependent on a fixed number formula_38 of previous variables formula_39. In conventional formulations of higher order CRFs, training and inference are only practical for small values of formula_38 (such as \"o\" ≤ 5), since their computational cost increases exponentially with formula_38. \n\nHowever, another recent advance has managed to ameliorate these issues by leveraging concepts and tools from the field of Bayesian nonparametrics. Specifically, the CRF-infinity approach \nconstitutes a CRF-type model that is capable of learning infinitely-long temporal dynamics in a scalable fashion. This is effected by introducing a novel potential function for CRFs that is based on the Sequence Memoizer (SM), a nonparametric Bayesian model for learning infinitely-long dynamics in sequential observations . To render such a model computationally tractable, CRF-infinity employs a mean-field approximation \nof the postulated novel potential functions (which are driven by an SM). This allows for devising efficient approximate training and inference algorithms for the model, without undermining its capability to capture and model temporal dependencies of arbitrary length. \n\nThere exists another generalization of CRFs, the semi-Markov conditional random field (semi-CRF), which models variable-length \"segmentations\" of the label sequence formula_21. This provides much of the power of higher-order CRFs to model long-range dependencies of the formula_22, at a reasonable computational cost.\n\nFinally, large-margin models for structured prediction, such as the structured Support Vector Machine can be seen as an alternative training procedure to CRFs.\n\nLatent-dynamic conditional random fields (LDCRF) or discriminative probabilistic latent variable models (DPLVM) are a type of CRFs for sequence tagging tasks. They are latent variable models that are trained discriminatively.\n\nIn an LDCRF, like in any sequence tagging task, given a sequence of observations x = formula_44, the main problem the model must solve is how to assign a sequence of labels y = formula_45 from one finite set of labels . Instead of directly modeling (y|x) as an ordinary linear-chain CRF would do, a set of latent variables h is \"inserted\" between x and y using the chain rule of probability:\n\nThis allows capturing latent structure between the observations and labels. While LDCRFs can be trained using quasi-Newton methods, a specialized version of the perceptron algorithm called the latent-variable perceptron has been developed for them as well, based on Collins' structured perceptron algorithm. These models find applications in computer vision, specifically gesture recognition from video streams and shallow parsing.\n\nThis is a partial list of software that implement generic CRF tools.\n\nThis is a partial list of software that implement CRF related tools.\n\n\n", "id": "4118276", "title": "Conditional random field"}
{"url": "https://en.wikipedia.org/wiki?curid=1514392", "text": "Training, test, and validation sets\n\nIn machine learning, the study and construction of algorithms that can learn from and make predictions on data is a common task. Such algorithms work by making data-driven predictions or decisions, through building a mathematical model from input data.\n\nThe data used to build the final model usually comes from multiple datasets. In particular, three data sets are commonly used in different stages of the creation of the model.\n\nThe model is initially fit on a training dataset, that is a set of examples used to fit the parameters (e.g. weights of connections between neurons in artificial neural networks) of the model. The model (e.g. a neural net or a naive Bayes classifier) is trained on the training dataset using a supervised learning method (e.g. gradient descent or stochastic gradient descent). In practice, the training dataset often consist of pairs of an input vector and the corresponding \"answer\" vector or scalar, which is commonly denoted as the \"target\". The current model is run with the training dataset and produces a result, which is then compared with the \"target\", for each input vector in the training dataset. Based on the result of the comparison and the specific learning algorithm being used, the parameters of the model are adjusted. The model fitting can include both variable selection and parameter estimation.\n\nSuccessively, the fitted model is used to predict the responses for the observations in a second dataset called the validation dataset. The validation dataset provides an unbiased evaluation of a model fit on the training dataset while tuning the model's hyperparameters (e.g. the number of hidden units in a neural network). Validation datasets can be used for regularization by early stopping: stop training when the error on the validation dataset increases, as this is a sign of overfitting to the training dataset.\nThis simple procedure is complicated in practice by the fact that the validation dataset's error may fluctuate during training, producing multiple local minima. This complication has led to the creation of many ad-hoc rules for deciding when overfitting has truly begun.\n\nFinally, the test dataset is a dataset used to provide an unbiased evaluation of a \"final\" model fit on the training dataset.\n\nA training dataset is a dataset of examples used for learning, that is to fit the parameters (e.g., weights) of, for example, a classifier.\n\nMost approaches that search through training data for empirical relationships tend to overfit the data, meaning that they can identify apparent relationships in the training data that do not hold in general.\n\nA test dataset is a dataset that is independent of the training dataset, but that follows the same probability distribution as the training dataset. If a model fit to the training dataset also fits the test dataset well, minimal overfitting has taken place (see figure below). A better fitting of the training dataset as opposed to the test dataset usually points to overfitting.\n\nA test set is therefore a set of examples used only to assess the performance (i.e. generalization) of a fully specified classifier.\n\nA validation dataset is a set of examples used to tune the hyperparameters (i.e. the architecture) of a classifier. In artificial neural networks, a hyperparameter is, for example, the number of hidden units. It, as well as the testing set (as mentioned above), should follow the same probability distribution as the training dataset.\n\nIn order to avoid overfitting, when any classification parameter needs to be adjusted, it is necessary to have a validation dataset in addition to the training and test datasets. For example, if the most suitable classifier for the problem is sought, the training dataset is used to train the candidate algorithms, the validation dataset is used to compare their performances and decide which one to take and, finally, the test dataset is used to obtain the performance characteristics such as accuracy, sensitivity, specificity, F-measure, and so on. The validation dataset functions as a hybrid: it is training data used by testing, but neither as part of the low-level training nor as part of the final testing .\n\nThe basic process of using a validation dataset for model selection (as part of training dataset, validation dataset, and test dataset) is:\nAn application of this process is in early stopping, where the candidate models are successive iterations of the same network, and training stops when the error on the validation set grows, choosing the previous model (the one with minimum error).\n\nMost simply, part of the training dataset can be set aside and used as a validation set: this is known as the holdout method. Common proportions are 70%/30% training/validation.\n\nAlternatively, the \"hold out\" process can be repeated, repeatedly partitioning the original training dataset into a training dataset and a validation dataset: this is known as cross-validation. These repeated partitions can be done in various ways, such as dividing into 2 equal datasets and using them as training/validation, and then validation/training, or repeatedly selecting a random subset as a validation dataset.\n\nAnother example of parameter adjustment is hierarchical classification (sometimes referred to as instance space decomposition ), which splits a complete multi-class problem into a set of smaller classification problems. It serves for learning more accurate concepts due to simpler classification boundaries in subtasks and individual feature selection procedures for subtasks. When doing classification decomposition, the central choice is the order of combination of smaller classification steps, called the classification path. Depending on the application, it can be derived from the confusion matrix and, uncovering the reasons for typical errors and finding ways to prevent the system make those in the future. For example, on the validation set one can see which classes are most frequently mutually confused by the system and then the instance space decomposition is done as follows: firstly, the classification is done among well recognizable classes, and the difficult to separate classes are treated as a single joint class, and finally, as a second classification step the joint class is classified into the two initially mutually confused classes.\n\n\n", "id": "1514392", "title": "Training, test, and validation sets"}
{"url": "https://en.wikipedia.org/wiki?curid=5767980", "text": "Cross-entropy method\n\nThe cross-entropy (CE) method developed by Reuven Rubinstein is a general Monte Carlo approach to\ncombinatorial and continuous multi-extremal optimization and importance sampling. \nThe method originated from the field of \"rare event simulation\", where\nvery small probabilities need to be accurately estimated, for example in network reliability analysis, queueing models, or performance analysis of telecommunication systems.\nThe CE method can be applied to static and noisy combinatorial optimization problems such as the traveling salesman problem, the quadratic assignment problem, DNA sequence alignment, the max-cut problem and the buffer allocation problem, as well as continuous global optimization problems with many local extrema.\n\nIn a nutshell, the CE method consists of two phases \n\nConsider the general problem of estimating the quantity \n\nwhere formula_2 is some \"performance function\" and formula_3 is a member of some parametric family of distributions. Using importance sampling this quantity can be estimated as \n\nwhere formula_5 is a random sample from formula_6. For positive formula_2, the theoretically \"optimal\" importance sampling density (pdf) is given by \n\nThis, however, depends on the unknown formula_9. The CE method aims to approximate the optimal PDF by adaptively selecting members of the parametric family that are closest (in the Kullback–Leibler sense) to the optimal PDF formula_10.\n\n\nIn several cases, the solution to step 3 can be found \"analytically\". Situations in which this occurs are\n\nThe same CE algorithm can be used for optimization, rather than estimation. \nSuppose the problem is to maximize some function formula_22, for example, \nformula_23. \nTo apply CE, one considers first the \"associated stochastic problem\" of estimating\nformula_24\nfor a given \"level\" formula_25, and parametric family formula_26, for example the 1-dimensional \nGaussian distribution,\nparameterized by its mean formula_27 and variance formula_28 (so formula_29 here).\nHence, for a given formula_25, the goal is to find formula_31 so that\nformula_32\nis minimized. This is done by solving the sample version (stochastic counterpart) of the KL divergence minimization problem, as in step 3 above.\nIt turns out that parameters that minimize the stochastic counterpart for this choice of target distribution and\nparametric family are the sample mean and sample variance corresponding to the \"elite samples\", which are those samples that have objective function value formula_33.\nThe worst of the elite samples is then used as the level parameter for the next iteration.\nThis yields the following randomized algorithm that happens to coincide with the so-called Estimation of Multivariate Normal Algorithm (EMNA), an estimation of distribution algorithm.\n\n 1. mu:=-6; sigma2:=100; t:=0; maxits=100; // Initialize parameters\n\n\n\n\n", "id": "5767980", "title": "Cross-entropy method"}
{"url": "https://en.wikipedia.org/wiki?curid=3118600", "text": "Concept drift\n\nIn predictive analytics and machine learning, the concept drift means that the statistical properties of the target variable, which the model is trying to predict, change over time in unforeseen ways. This causes problems because the predictions become less accurate as time passes.\n\nThe term \"concept\" refers to the quantity to be predicted. More generally, it can also refer to other phenomena of interest besides the target concept, such as an input, but, in the context of concept drift, the term commonly refers to the target variable.\n\nIn a fraud detection application the target concept may be a binary attribute FRAUDULENT with values \"yes\" or \"no\" that indicates whether a given transaction is fraudulent. Or, in a weather prediction application, there may be several target concepts such as TEMPERATURE, PRESSURE, and HUMIDITY.\n\nThe behavior of the customers in an online shop may change over time. For example, if weekly merchandise sales are to be predicted, and a predictive model has been developed that works satisfactorily. The model may use inputs such as the amount of money spent on advertising, promotions being run, and other metrics that may affect sales. The model is likely to become less and less accurate over time – this is concept drift. In the merchandise sales application, one reason for concept drift may be seasonality, which means that shopping behavior changes seasonally. Perhaps there will be higher sales in the winter holiday season than during the summer, for example.\n\nTo prevent deterioration in prediction accuracy because of concept drift, both active and passive solutions can be adopted. Active solutions rely on triggering mechanisms, e.g., change-detection tests (Basseville and Nikiforov 1993; Alippi and Roveri, 2007) to explicitly detect concept drift as a change in the statistics of the data-generating process. In stationary conditions, any fresh information made available can be integrated to improve the model. Differently, when concept drift is detected, the current model is no more up-to-date and must be substituted with a new one to maintain the prediction accuracy (Gama et al., 2004; Alippi et al., 2011). On the contrary, in passive solutions the model is continuously updated, e.g., by retraining the model on the most recently observed samples (Widmer and Kubat, 1996), or enforcing an ensemble of classifiers (Elwell and Polikar 2011).\n\nContextual information, when available, can be used to better explain the causes of the concept drift: for instance, in the sales prediction application, concept drift might be compensated by adding information about the season to the model. By providing information about the time of the year, the rate of deterioration of your model is likely to decrease, concept drift is unlikely to be eliminated altogether. This is because actual shopping behavior does not follow any static, finite model. New factors may arise at any time that influence shopping behavior, the influence of the known factors or their interactions may change.\n\nConcept drift cannot be avoided for complex phenomenon that are not governed by fixed laws of nature. All processes that arise from human activity, such as socioeconomic processes, and biological processes are likely to experience concept drift. Therefore, periodic retraining, also known as refreshing, of any model is necessary.\n\n\n\n\n\n\n\n\nAnnouncements, discussions, job postings related to the topic of concept drift\nin data mining / machine learning. Posts are moderated.\n\nTo subscribe go to the group home page: https://groups.google.com/group/conceptdrift\n\nMany papers have been published describing algorithms for concept drift detection. Only reviews, surveys and overviews are here:\n\n\n", "id": "3118600", "title": "Concept drift"}
{"url": "https://en.wikipedia.org/wiki?curid=3771060", "text": "Accuracy paradox\n\nThe accuracy paradox for predictive analytics states that predictive models with a given level of accuracy may have greater predictive power than models with higher accuracy. It may be better to avoid the accuracy metric in favor of other metrics such as precision and recall.\n\nAccuracy is often the starting point for analyzing the quality of a predictive model, as well as an obvious criterion for prediction. Accuracy measures the ratio of correct predictions to the total number of cases evaluated. It may seem obvious that the ratio of correct predictions to cases should be a key metric. A predictive model may have high accuracy, but be useless.\n\nIn an example predictive model for an insurance fraud application, all cases that are predicted as high-risk by the model will be investigated. To evaluate the performance of the model, the insurance company has created a sample data set of 10,000 claims. All 10,000 cases in the validation sample have been carefully checked and it is known which cases are fraudulent. A table of confusion assists analyzing the quality of the model. The definition of accuracy, the table of confusion for model M, and the calculation of accuracy for model M is shown below.\n\nformula_1\nwhere\n\n\"Formula 1: Definition of Accuracy\"\n\n\"Table 1: Table of Confusion for Fraud Model M.\"\n\nformula_2\n\n\"Formula 2: Accuracy for model M\"\n\nWith an accuracy of 98.0% model M appears to perform fairly well. The paradox lies in the fact that accuracy can be easily improved to 98.5% by always predicting \"no fraud\". The table of confusion and the accuracy for this trivial “always predict negative” model M and the accuracy of this model are shown below.\n\n\"Table 2: Table of Confusion for Fraud Model M.\"\n\nformula_3\n\n\"Formula 3: Accuracy for model M\"\n\nModel Mreduces the rate of inaccurate predictions from 2% to 1.5%. This is an apparent improvement of 25%. The new model M shows fewer incorrect predictions and markedly improved accuracy, as compared to the original model M, but is obviously useless. \n\nThe alternative model M does not offer any value to the company for preventing fraud. The less accurate model is more useful than the more accurate model. \n\nCaution is advised when using accuracy in the evaluation of predictive models; it is appropriate only if the cost of a false positive (false alarm) is equal to the cost of a false negative (missed prediction). Otherwise, a more appropriate loss function should be determined.\n\n\n", "id": "3771060", "title": "Accuracy paradox"}
{"url": "https://en.wikipedia.org/wiki?curid=6968451", "text": "Concept learning\n\nConcept learning, also known as category learning, concept attainment, and concept formation, is defined by Bruner, Goodnow, & Austin (1967) as \"the search for and listing of attributes that can be used to distinguish exemplars from non exemplars of various categories\". More simply put, concepts are the mental categories that help us classify objects, events, or ideas, building on the understanding that each object, event, or idea has a set of common relevant features. Thus, concept learning is a strategy which requires a learner to compare and contrast groups or categories that contain concept-relevant features with groups or categories that do not contain concept-relevant features.\n\nConcept learning also refers to a learning task in which a human or machine learner is trained to classify objects by being shown a set of example objects along with their class labels. The learner simplifies what has been observed by condensing it in the form of an example. This simplified version of what has been learned is then applied to future examples. Concept learning may be simple or complex because learning takes place over many areas. When a concept is difficult, it is less likely that the learner will be able to simplify, and therefore will be less likely to learn. Colloquially, the task is known as \"learning from examples.\" Most theories of concept learning are based on the storage of exemplars and avoid summarization or overt abstraction of any kind.\n\n\nConcept learning must be distinguished from learning by reciting something from memory (recall) or discriminating between two things that differ (discrimination). However, these issues are closely related, since memory recall of facts could be considered a \"trivial\" conceptual process where prior exemplars representing the concept are invariant. Similarly, while discrimination is not the same as initial concept learning, discrimination processes are involved in refining concepts by means of the repeated presentation of exemplars.\n\nConcrete or Perceptual Concepts vs Abstract Concepts\n\nDefined (or Relational) and Associated Concepts\n\nComplex Concepts. Constructs such as a schema and a script are examples of complex concepts. A schema is an organization of smaller concepts (or features) and is revised by situational information to assist in comprehension. A script on the other hand is a list of actions that a person follows in order to complete a desired goal. An example of a script would be the process of buying a CD. There are several actions that must occur before the actual act of purchasing the CD and a script provides a sequence of the necessary actions and proper order of these actions in order to be successful in purchasing the CD.\n\nDiscovery – Every baby discovers concepts for itself, such as discovering that each of its fingers can be individually controlled or that care givers are individuals. Although this is perception driven, formation of the concept is more than memorizing perceptions.\n\nExamples – Supervised or unsupervised generalizing from examples may lead to learning a new concept, but concept formation is more than generalizing from examples.\nWords – Hearing or reading new words leads to learning new concepts, but forming a new concept is more than learning a dictionary definition. A person may have previously formed a new concept before encountering the word or phrase for it.\n\nExemplars comparison and contrast – An efficient way to learn new categories and to induce new categorization rules is by comparing a few example objects while being informed about their categorical relation. Comparing two exemplars while being informed that the two are from the same category allows identifying the attributes shared by the category members, as it exemplifies variability within this category. On the other hand, contrasting two exemplars while being informed that the two are from different categories may allow identifying attributes with diagnostic value. Within category comparison and between categories contrast are not similarly useful for category learning (Hammer et al., 2008), and the capacity to use these two forms of comparison-based learning changes at childhood (Hammer et al., 2009).\n\nInvention – When prehistoric people who lacked tools used their fingernails to scrape food from killed animals or smashed melons, they noticed that a broken stone sometimes had a sharp edge like a fingernail and was therefore suitable for scraping food. Inventing a stone tool to avoid broken fingernails was a new concept.\n\nIn general, the theoretical issues underlying concept learning are those underlying induction. These issues are addressed in many diverse publications, including literature on subjects like Version Spaces, Statistical Learning Theory, PAC Learning, Information Theory, and Algorithmic Information Theory. Some of the broad theoretical ideas are also discussed by Watanabe (1969,1985), Solomonoff (1964a,1964b), and Rendell (1986); see the reference list below.\n\nIt is difficult to make any general statements about human (or animal) concept learning without already assuming a particular psychological theory of concept learning. Although the classical views of concepts and concept learning in philosophy speak of a process of abstraction, data compression, simplification, and summarization, currently popular psychological theories of concept learning diverge on all these basic points. The history of psychology has seen the rise and fall of many theories about concept learning. Classical conditioning (as defined by Pavlov) created the earliest experimental technique. Reinforcement learning as described by Watson and elaborated by Clark Hull created a lasting paradigm in behavioral psychology. Cognitive psychology emphasized a computer and information flow metaphor for concept formation. Neural network models of concept formation and the structure of knowledge have opened powerful hierarchical models of knowledge organization such as George Miller's Wordnet. Neural networks are based on computational models of learning using factor analysis or convolution. Neural networks also are open to neuroscience and psychophysiological models of learning following Karl Lashley and Donald Hebb.\n\nRule-based theories of concept learning began with cognitive psychology and early computer models of learning that might be implemented in a high level computer language with computational statements such as if:then production rules. They take classification data and a rule-based theory as input which are the result of a rule-based learner with the hopes of producing a more accurate model of the data (Hekenaho 1997). The majority of rule-based models that have been developed are heuristic, meaning that rational analyses have not been provided and the models are not related to statistical approaches to induction. A rational analysis for rule-based models could presume that concepts are represented as rules, and would then ask to what degree of belief a rational agent should be in agreement with each rule, with some observed examples provided (Goodman, Griffiths, Feldman, and Tenenbaum). Rule-based theories of concept learning are focused more so on perceptual learning and less on definition learning. Rules can be used in learning when the stimuli are confusable, as opposed to simple. When rules are used in learning, decisions are made based on properties alone and rely on simple criteria that do not require a lot of memory ( Rouder and Ratcliff, 2006).\n\nExample of rule-based theory:\n\n\"A radiologist using rule-based categorization would observe\nwhether specific properties of an X-ray image meet certain\ncriteria; for example, is there an extreme difference in brightness\nin a suspicious region relative to other regions? A decision is\nthen based on this property alone.\" (see Rouder and Ratcliff 2006)\n\nThe prototype view of concept learning holds that people abstract out the central tendency (or prototype) of the examples experienced and use this as a basis for their categorization decisions.\n\nThe prototype view of concept learning holds that people categorize based on one or more central examples of a given category followed by a penumbra of decreasingly typical examples. This implies that people do not categorize based on a list of things that all correspond to a definition, but rather on a hierarchical inventory based on semantic similarity to the central example(s).\n\nTo illustrate, imagine the following mental representations of the category: Sports\n\nThe first illustration demonstrates a mental representation if we were to categorize by definition:\nDefinition of Sports: an athletic activity requiring skill or physical prowess and often of a competitive nature.\n\nThe second illustration demonstrates a mental representation that prototype theory would predict:\n\n1. Baseball<br>\n2. Football<br>\n3. Basketball<br>\n4. Soccer<br>\n5. Hockey<br>\n6. Tennis<br>\n7. Golf<br>\n...<br>\n15. Bike-racing<br>\n16. Weightlifting<br>\n17. Skateboarding<br>\n18. Snowboarding<br>\n19. Boxing<br>\n20. Wrestling<br>\n...<br>\n32. Fishing<br>\n33. Hunting<br>\n34. Hiking<br>\n35. Sky-diving<br>\n36. Bungee-jumping<br>\n...<br>\n62. Cooking<br>\n63. Walking<br>\n...<br>\n82. Gatorade<br>\n83. Water<br>\n84. Protein<br>\n85. Diet\n\nIt is evident that prototype theory hypothesizes a more continuous (less discrete) way of categorization in which the list of things that match the category's definition is not limited.\n\nExemplar theory is the storage of specific instances (exemplars), with new objects evaluated only with respect to how closely they resemble specific known members (and nonmembers) of the category. This theory hypothesizes that learners store examples \"verbatim\". This theory views concept learning as highly simplistic. Only individual properties are represented. These individual properties are not abstract and they do not create rules. An example of what exemplar theory might look like is, \"water is wet\". It is simply known that some (or one, or all) stored examples of water have the property wet. Exemplar based theories have become more empirically popular over the years with some evidence suggesting that human learners use exemplar based strategies only in early learning, forming prototypes and generalizations later in life. An important result of exemplar models in psychology literature has been a de-emphasis of complexity in concept learning. One of the best known exemplar theories of concept learning is the Generalized Context Model (GCM).\n\nA problem with exemplar theory is that exemplar models critically depend on two measures: similarity between exemplars, and having a rule to determine group membership. Sometimes it is difficult to attain or distinguish these measures.\n\nMore recently, cognitive psychologists have begun to explore the idea that the prototype and exemplar models form two extremes. It has been suggested that people are able to form a multiple prototype representation, besides the two extreme representations. For example, consider the category 'spoon'. There are two distinct subgroups or conceptual clusters: spoons tend to be either large and wooden, or small and made of metal. The prototypical spoon would then be a medium-size object made of a mixture of metal and wood, which is clearly an unrealistic proposal. A more natural representation of the category 'spoon' would instead consist of multiple (at least two) prototypes, one for each cluster. A number of different proposals have been made in this regard (Anderson, 1991; Griffiths, Canini, Sanborn & Navarro, 2007; Love, Medin & Gureckis, 2004; Vanpaemel & Storms, 2008). These models can be regarded as providing a compromise between exemplar and prototype models.\n\nThe basic idea of explanation-based learning suggests that a new concept is acquired by experiencing examples of it and forming a basic outline. Put simply, by observing or receiving the qualities of a thing the mind forms a concept which possesses and is identified by those qualities.\n\nThe original theory, proposed by Mitchell, Keller, and Kedar-Cabelli in 1986 and called explanation-based generalization, is that learning occurs through progressive generalizing. This theory was first developed to program machines to learn. When applied to human cognition, it translates as follows: the mind actively separates information that applies to more than one thing and enters it into a broader description of a category of things. This is done by identifying sufficient conditions for something to fit in a category, similar to schematizing.\n\nThe revised model revolves around the integration of four mental processes – generalization, chunking, operationalization, and analogy.\n\n\nThis particular theory of concept learning is relatively new and more research is being conducted to test it.\n\nBayes' theorem is important because it provides a powerful tool for understanding, manipulating and controlling data that takes a larger view that is not limited to data analysis alone. The approach is subjective, and this requires the assessment of prior probabilities, making it also very complex. However, if Bayesians show that the accumulated evidence and the application of Bayes' law are sufficient, the work will overcome the subjectivity of the inputs involved. Bayesian inference can be used for any honestly collected data and has a major advantage because of its scientific focus.\n\nOne model that incorporates the Bayesian theory of concept learning is the ACT-R model, developed by John R. Anderson. The ACT-R model is a programming language that defines the basic cognitive and perceptual operations that enable the human mind by producing a step-by-step simulation of human behavior. This theory exploits the idea that each task humans perform consists of a series of discrete operations. The model has been applied to learning and memory, higher level cognition, natural language, perception and attention, human-computer interaction, education, and computer generated forces.\n\nIn addition to John R. Anderson, Joshua Tenenbaum has been a contributor to the field of concept learning; he studied the computational basis of human learning and inference using behavioral testing of adults, children, and machines from Bayesian statistics and probability theory, but also from geometry, graph theory, and linear algebra. Tenenbaum is working to achieve a better understanding of human learning in computational terms and trying to build computational systems that come closer to the capacities of human learners.\n\nM. D. Merrill's component display theory (CDT) is a cognitive matrix that focuses on the interaction between two dimensions: the level of performance expected from the learner and the types of content of the material to be learned. Merrill classifies a learner's level of performance as: find, use, remember, and material content as: facts, concepts, procedures, and principles. The theory also calls upon four primary presentation forms and several other secondary presentation forms. The primary presentation forms include: rules, examples, recall, and practice. Secondary presentation forms include: prerequisites, objectives, helps, mnemonics, and feedback. A complete lesson includes a combination of primary and secondary presentation forms, but the most effective combination varies from learner to learner and also from concept to concept. Another significant aspect of the CDT model is that it allows for the learner to control the instructional strategies used and adapt them to meet his or her own learning style and preference. A major goal of this model was to reduce three common errors in concept formation: over-generalization, under-generalization and misconception.\n\n\n", "id": "6968451", "title": "Concept learning"}
{"url": "https://en.wikipedia.org/wiki?curid=3290880", "text": "Robot learning\n\nRobot learning is a research field at the intersection of machine learning and robotics. It studies techniques allowing a robot to acquire novel skills or adapt to its environment through learning algorithms. The embodiment of the robot, situated in a physical embedding, provides at the same time specific difficulties (e.g. high-dimensionality, real time constraints for collecting data and learning) and opportunities for guiding the learning process (e.g. sensorimotor synergies, motor primitives).\n\nExample of skills that are targeted by learning algorithms include sensorimotor skills such as locomotion, grasping, active object categorization, as well as interactive skills such as joint manipulation of an object with a human peer, and linguistic skills such as the grounded and situated meaning of human language. Learning can happen either through autonomous self-exploration or through guidance from a human teacher, like for example in robot learning by imitation.\n\nRobot learning can be closely related to adaptive control, reinforcement learning as well as developmental robotics which considers the problem of autonomous lifelong acquisition of repertoires of skills.\nWhile machine learning is frequently used by computer vision algorithms employed in the context of robotics, these applications are usually not referred to as \"robot learning\".\n\nMaya Cakmak, assistant professor of computer science and engineering at the University of Washington, is trying to create a robot that learns by imitating - a technique called \"programming by demonstration\". A researcher shows it a cleaning technique for the robot's vision system and it generalizes the cleaning motion from the human demonstration as well as identifying the \"state of dirt\" before and after cleaning.\n\nSimilarly the Baxter industrial robot can be taught how to do something by grabbing its arm and showing it the desired movements. It can also use deep learning to teach itself to grasp an unknown object.\n\nIn Telex's \"Million Object Challenge\" the goal is robots that learn how to spot and handle simple items and upload their data to the cloud to allow other robots to analyze and use the information.\n\nRoboBrain is a knowledge engine for robots which can be freely accessed by any device wishing to carry out a task. The database gathers new information about tasks as robots perform them, by searching the Internet, interpreting natural language text, images, and videos, object recognition as well as interaction. The project is led by Ashutosh Saxena at Stanford University.\n\nRoboEarth is a project that has been described as a \"World Wide Web for robots\" − it is a network and database repository where robots can share information and learn from each other and a cloud for outsourcing heavy computation tasks. The project brings together researchers from five major universities in Germany, the Netherlands and Spain and is backed by the European Union.\n\nGoogle Research, DeepMind, and Google X have decided to allow their robots share their experiences.\n\n\n", "id": "3290880", "title": "Robot learning"}
{"url": "https://en.wikipedia.org/wiki?curid=7578809", "text": "Version space learning\n\nVersion space learning is a logical approach to machine learning, specifically binary classification. Version space learning algorithms search a predefined space of hypotheses, viewed as a set of logical sentences. Formally, the hypothesis space is a disjunction\n\n(i.e., either hypothesis 1 is true, or hypothesis 2, or any subset of the hypotheses 1 through ). A version space learning algorithm is presented with examples, which it will use to restrict its hypothesis space; for each example , the hypotheses that are inconsistent with are removed from the space. This iterative refining of the hypothesis space is called the candidate elimination algorithm, the hypothesis space maintained inside the algorithm its \"version space\".\n\nIn settings where there is a generality-ordering on hypotheses, it is possible to represent the version space by two sets of hypotheses: (1) the most specific consistent hypotheses, and (2) the most general consistent hypotheses, where \"consistent\" indicates agreement with observed data. \n\nThe most specific hypotheses (i.e., the specific boundary SB) cover the observed positive training examples, and as little of the remaining feature space as possible. These hypotheses, if reduced any further, \"exclude\" a \"positive\" training example, and hence become inconsistent. These minimal hypotheses essentially constitute a (pessimistic) claim that the true concept is defined just by the \"positive\" data already observed: Thus, if a novel (never-before-seen) data point is observed, it should be assumed to be negative. (I.e., if data has not previously been ruled in, then it's ruled out.) \n\nThe most general hypotheses (i.e., the general boundary GB) cover the observed positive training examples, but also cover as much of the remaining feature space without including any negative training examples. These, if enlarged any further, \"include\" a \"negative\" training example, and hence become inconsistent. These maximal hypotheses essentially constitute a (optimistic) claim that the true concept is defined just by the \"negative\" data already observed: Thus, if a novel (never-before-seen) data point is observed, it should be assumed to be positive. (I.e., if data has not previously been ruled out, then it's ruled in.) \n\nThus, during learning, the version space (which itself is a set – possibly infinite – containing \"all\" consistent hypotheses) can be represented by just its lower and upper bounds (maximally general and maximally specific hypothesis sets), and learning operations can be performed just on these representative sets.\n\nAfter learning, classification can be performed on unseen examples by testing the hypothesis learned by the algorithm. If the example is consistent with multiple hypotheses, a majority vote rule can be applied.\n\nThe notion of version spaces was introduced by Mitchell in the early 1980s as a framework for understanding the basic problem of supervised learning within the context of solution search. Although the basic \"candidate elimination\" search method that accompanies the version space framework is not a popular learning algorithm, there are some practical implementations that have been developed (e.g., Sverdlik & Reynolds 1992, Hong & Tsang 1997, Dubois & Quafafou 2002).\n\nA major drawback of version space learning is its inability to deal with noise: any pair of inconsistent examples can cause the version space to \"collapse\", i.e., become empty, so that classification becomes impossible.\n\n\n", "id": "7578809", "title": "Version space learning"}
{"url": "https://en.wikipedia.org/wiki?curid=8416103", "text": "Evolvability (computer science)\n\nThe term evolvability is used for a recent framework of computational learning introduced by Leslie Valiant in his paper of the same name and described below. The aim of this theory is to model biological evolution and categorize which types of mechanisms are evolvable. Evolution is an extension of PAC learning and learning from statistical queries.\n\nLet formula_1 and formula_2 be collections of functions on formula_3 variables. Given an \"ideal function\" formula_4, the goal is to find by local search a \"representation\" formula_5 that closely approximates formula_6. This closeness is measured by the \"performance\" formula_7 of formula_8 with respect to formula_6.\n\nAs is the case in the biological world, there is a difference between genotype and phenotype. In general, there can be multiple representations (genotypes) that correspond to the same function (phenotype). That is, for some formula_10, with formula_11, still formula_12 for all formula_13. However, this need not be the case. The goal then, is to find a representation that closely matches the phenotype of the ideal function, and the spirit of the local search is to allow only small changes in the genotype. Let the \"neighborhood\" formula_14 of a representation formula_8 be the set of possible mutations of formula_8.\n\nFor simplicity, consider Boolean functions on formula_17, and let formula_18 be a probability distribution on formula_19. Define the performance in terms of this. Specifically,\nNote that formula_21 In general, for non-Boolean functions, the performance will not correspond directly to the probability that the functions agree, although it will have some relationship.\n\nThroughout an organism's life, it will only experience a limited number of environments, so its performance cannot be determined exactly. The \"empirical performance\" is defined by\nformula_22\nwhere formula_23 is a multiset of formula_24 independent selections from formula_19 according to formula_18. If formula_24 is large enough, evidently formula_28 will be close to the actual performance formula_7.\n\nGiven an ideal function formula_4, initial representation formula_5, \"sample size\" formula_24, and \"tolerance\" formula_33, the \"mutator\" formula_34 is a random variable defined as follows. Each formula_35 is classified as beneficial, neutral, or deleterious, depending on its empirical performance. Specifically,\n\nIf there are any beneficial mutations, then formula_34 is equal to one of these at random. If there are no beneficial mutations, then formula_34 is equal to a random neutral mutation. In light of the similarity to biology, formula_8 itself is required to be available as a mutation, so there will always be at least one neutral mutation.\n\nThe intention of this definition is that at each stage of evolution, all possible mutations of the current genome are tested in the environment. Out of the ones who thrive, or at least survive, one is chosen to be the candidate for the next stage. Given formula_45, we define the sequence formula_46 by formula_47. Thus formula_48 is a random variable representing what formula_49 has evolved to after formula_50 \"generations\".\n\nLet formula_51 be a class of functions, formula_52 be a class of representations, and formula_53 a class of distributions on formula_54. We say that formula_51 is \"evolvable by formula_52 over formula_53\" if there exists polynomials formula_58, formula_59, formula_60, and formula_61 such that for all formula_3 and all formula_63, for all ideal functions formula_4 and representations formula_45, with probability at least formula_66,\nwhere the sizes of neighborhoods formula_14 for formula_69 are at most formula_70, the sample size is formula_71, the tolerance is formula_72, and the generation size is formula_73.\n\nformula_51 is \"evolvable over formula_53\" if it is evolvable by some formula_52 over formula_53.\n\nformula_51 is \"evolvable\" if it is evolvable over all distributions formula_53.\n\nThe class of conjunctions and the class of disjunctions are evolvable over the uniform distribution for short conjunctions and disjunctions, respectively.\n\nThe class of parity functions (which evaluate to the parity of the number of true literals in a given subset of literals) are not evolvable, even for the uniform distribution.\n\nEvolvability implies PAC learnability.\n", "id": "8416103", "title": "Evolvability (computer science)"}
{"url": "https://en.wikipedia.org/wiki?curid=6881120", "text": "Prior knowledge for pattern recognition\n\nPattern recognition is a very active field of research intimately bound to machine learning. Also known as classification or statistical classification, pattern recognition aims at building a classifier that can determine the class of an input pattern. This procedure, known as training, corresponds to learning an unknown decision function based only on a set of input-output pairs formula_1 that form the training data (or training set). Nonetheless, in real world applications such as character recognition, a certain amount of information on the problem is usually known beforehand. The incorporation of this prior knowledge into the training is the key element that will allow an increase of performance in many applications.\n\nPrior knowledge refers to all information about the problem available in addition to the training data. However, in this most general form, determining a model from a finite set of samples without prior knowledge is an ill-posed problem, in the sense that a unique model may not exist. Many classifiers incorporate the general smoothness assumption that a test pattern similar to one of the training samples tends to be assigned to the same class.\n\nThe importance of prior knowledge in machine learning is suggested by its role in search and optimization. Loosely, the no free lunch theorem states that all search algorithms have the same average performance over all problems, and thus implies that to gain in performance on a certain application one must use a specialized algorithm that includes some prior knowledge about the problem. \n\nThe different types of prior knowledge encountered in pattern recognition are now regrouped under two main categories: class-invariance and knowledge on the data.\n\nA very common type of prior knowledge in pattern recognition is the invariance of the class (or the output of the classifier) to a transformation of the input pattern. This type of knowledge is referred to as transformation-invariance. The mostly used transformations used in image recognition are:\n\n\nIncorporating the invariance to a transformation formula_2 parametrized in formula_3 into a classifier of output formula_4 for an input pattern formula_5 corresponds to enforcing the equality\n\nLocal invariance can also be considered for a transformation centered at formula_7, so that formula_8, by using the constraint\n\nThe function formula_10 in these equations can be either the decision function of the classifier or its real-valued output.\n\nAnother approach is to consider class-invariance with respect to a \"domain of the input space\" instead of a transformation. In this case, the problem becomes finding formula_10 so that\n\nwhere formula_13 is the membership class of the region formula_14 of the input space.\n\nA different type of class-invariance found in pattern recognition is permutation-invariance, i.e. invariance of the class to a permutation of elements in a structured input. A typical application of this type of prior knowledge is a classifier invariant to permutations of rows of the matrix inputs.\n\nOther forms of prior knowledge than class-invariance concern the data more specifically and are thus of particular interest for real-world applications. The three particular cases that most often occur when gathering data are:\n\nPrior knowledge of these can enhance the quality of the recognition if included in the learning. Moreover, not taking into account the poor quality of some data or a large imbalance between the classes can mislead the decision of a classifier.\n\n", "id": "6881120", "title": "Prior knowledge for pattern recognition"}
{"url": "https://en.wikipedia.org/wiki?curid=1041204", "text": "Granular computing\n\nGranular computing (GrC) is an emerging computing paradigm of information processing. It concerns the processing of complex information entities called information granules, which arise in the process of data abstraction and derivation of knowledge from information or data. Generally speaking, information granules are collections of entities that usually originate at the numeric level and are arranged together due to their similarity, functional or physical adjacency, indistinguishability, coherency, or the like.\n\nAt present, granular computing is more a \"theoretical perspective\" than a coherent set of methods or principles. As a theoretical perspective, it encourages an approach to data that recognizes and exploits the knowledge present in data at various levels of resolution or scales. In this sense, it encompasses all methods which provide flexibility and adaptability in the resolution at which knowledge or information is extracted and represented.\n\n \nAs mentioned above, \"granular computing\" is not an algorithm or process; there is no particular method that is called \"granular computing\". It is rather an approach to looking at data that recognizes how different and interesting regularities in the data can appear at different levels of granularity, much as different features become salient in satellite images of greater or lesser resolution. On a low-resolution satellite image, for example, one might notice interesting cloud patterns representing cyclones or other large-scale weather phenomena, while in a higher-resolution image, one misses these large-scale atmospheric phenomena but instead notices smaller-scale phenomena, such as the interesting pattern that is the streets of Manhattan. The same is generally true of all data: At different resolutions or granularities, different features and relationships emerge. The aim of granular computing is ultimately simply to try to take advantage of this fact in designing more-effective machine-learning and reasoning systems.\n\nThere are several types of granularity that are often encountered in data mining and machine learning, and we review them below:\n\nOne type of granulation is the quantization of variables. It is very common that in data mining or machine-learning applications the resolution of variables needs to be \"decreased\" in order to extract meaningful regularities. An example of this would be a variable such as \"outside temperature\" (formula_1), which in a given application might be recorded to several decimal places of precision (depending on the sensing apparatus). However, for purposes of extracting relationships between \"outside temperature\" and, say, \"number of health-club applications\" (formula_2), it will generally be advantageous to quantize \"outside temperature\" into a smaller number of intervals.\n\nThere are several interrelated reasons for granulating variables in this fashion:\nFor example, a simple learner or pattern recognition system may seek to extract regularities satisfying a conditional probability threshold such as formula_3. In the special case where formula_4, this recognition system is essentially detecting \"logical implication\" of the form formula_5 or, in words, \"if formula_6, then formula_7\". The system's ability to recognize such implications (or, in general, conditional probabilities exceeding threshold) is partially contingent on the resolution with which the system analyzes the variables.\n\nAs an example of this last point, consider the feature space shown to the right. The variables may each be regarded at two different resolutions. Variable formula_8 may be regarded at a high (quaternary) resolution wherein it takes on the four values formula_9 or at a lower (binary) resolution wherein it takes on the two values formula_10. Similarly, variable formula_11 may be regarded at a high (quaternary) resolution or at a lower (binary) resolution, where it takes on the values formula_12 or formula_13, respectively. It will be noted that at the high resolution, there are no detectable implications of the form formula_5, since every formula_15 is associated with more than one formula_16, and thus, for all formula_15, formula_18. However, at the low (binary) variable resolution, two bilateral implications become detectable: formula_19 and formula_20, since every formula_21 occurs \"iff\" formula_22 and formula_23 occurs \"iff\" formula_24. Thus, a pattern recognition system scanning for implications of this kind would find them at the binary variable resolution, but would fail to find them at the higher quaternary variable resolution.\n\nIt is not feasible to exhaustively test all possible discretization resolutions on all variables in order to see which combination of resolutions yields interesting or significant results. Instead, the feature space must be preprocessed (often by an entropy analysis of some kind) so that some guidance can be given as to how the discretization process should proceed. Moreover, one cannot generally achieve good results by naively analyzing and discretizing each variable independently, since this may obliterate the very interactions that we had hoped to discover.\n\nA sample of papers that address the problem of variable discretization in general, and multiple-variable discretization in particular, is as follows: , , , , , , , , , , , , , , , , \n\nVariable granulation is a term that could describe a variety of techniques, most of which are aimed at reducing dimensionality, redundancy, and storage requirements. We briefly describe some of the ideas here, and present pointers to the literature.\n\nA number of classical methods, such as principal component analysis, multidimensional scaling, factor analysis, and structural equation modeling, and their relatives, fall under the genus of \"variable transformation.\" Also in this category are more modern areas of study such as dimensionality reduction, projection pursuit, and independent component analysis. The common goal of these methods in general is to find a representation of the data in terms of new variables, which are a linear or nonlinear transformation of the original variables, and in which important statistical relationships emerge. The resulting variable sets are almost always smaller than the original variable set, and hence these methods can be loosely said to impose a granulation on the feature space. These dimensionality reduction methods are all reviewed in the standard texts, such as , , and .\n\nA different class of variable granulation methods derive more from data clustering methodologies than from the linear systems theory informing the above methods. It was noted fairly early that one may consider \"clustering\" related variables in just the same way that one considers clustering related data. In data clustering, one identifies a group of similar entities (using a \"measure of similarity\" suitable to the domain), and then in some sense \"replaces\" those entities with a prototype of some kind. The prototype may be the simple average of the data in the identified cluster, or some other representative measure. But the key idea is that in subsequent operations, we may be able to use the single prototype for the data cluster (along with perhaps a statistical model describing how exemplars are derived from the prototype) to \"stand in\" for the much larger set of exemplars. These prototypes are generally such as to capture most of the information of interest concerning the entities.\nSimilarly, it is reasonable to ask whether a large set of variables might be aggregated into a smaller set of \"prototype\" variables that capture the most salient relationships between the variables. Although variable clustering methods based on linear correlation have been proposed (;), more powerful methods of variable clustering are based on the mutual information between variables. Watanabe has shown (;) that for any set of variables one can construct a \"polytomic\" (i.e., n-ary) tree representing a series of variable agglomerations in which the ultimate \"total\" correlation among the complete variable set is the sum of the \"partial\" correlations exhibited by each agglomerating subset (see figure). Watanabe suggests that an observer might seek to thus partition a system in such a way as to minimize the interdependence between the parts \"... as if they were looking for a natural division or a hidden crack.\"\n\nOne practical approach to building such a tree is to successively choose for agglomeration the two variables (either atomic variables or previously agglomerated variables) which have the highest pairwise mutual information . The product of each agglomeration is a new (constructed) variable that reflects the local joint distribution of the two agglomerating variables, and thus possesses an entropy equal to their joint entropy.\n(From a procedural standpoint, this agglomeration step involves replacing two columns in the attribute-value table—representing the two agglomerating variables—with a single column that has a unique value for every unique combination of values in the replaced columns . No information is lost by such an operation; however, it should be noted that if one is exploring the data for inter-variable relationships, it would generally \"not\" be desirable to merge redundant variables in this way, since in such a context it is likely to be precisely the redundancy or \"dependency\" between variables that is of interest; and once redundant variables are merged, their relationship to one another can no longer be studied.\n\nIn database systems, aggregations (see e.g. OLAP aggregation and Business intelligence systems) result in transforming original data tables (often called information systems) into the tables with different semantics of rows and columns, wherein the rows correspond to the groups (granules) of original tuples and the columns express aggregated information about original values within each of the groups. Such aggregations are usually based on SQL and its extensions. The resulting granules usually correspond to the groups of original tuples with the same values (or ranges) over some pre-selected original columns.\n\nThere are also other approaches wherein the groups are defined basing on, e.g., physical adjacency of rows. For example, Infobright implemented a database engine wherein data was partitioned onto \"rough rows\", each consisting of 64K of physically consecutive (or almost consecutive) rows. Rough rows were automatically labeled with compact information about their values on data columns, often involving multi-column and multi-table relationships. It resulted in a higher layer of granulated information where objects corresponded to rough rows and attributes - to various aspects of rough information. Database operations could be efficiently supported within such a new framework, with an access to the original data pieces still available .\n\nThe origins of the \"granular computing\" ideology are to be found in the rough sets and fuzzy sets literatures. One of the key insights of rough set research—although by no means unique to it—is that, in general, the selection of different sets of features or variables will yield different \"concept\" granulations. Here, as in elementary rough set theory, by \"concept\" we mean a set of entities that are \"indistinguishable\" or \"indiscernible\" to the observer (i.e., a simple concept), or a set of entities that is composed from such simple concepts (i.e., a complex concept). To put it in other words, by projecting a data set (value-attribute system) onto different sets of variables, we recognize alternative sets of equivalence-class \"concepts\" in the data, and these different sets of concepts will in general be conducive to the extraction of different relationships and regularities.\n\nWe illustrate with an example. Consider the attribute-value system below:\n\nWhen the full set of attributes formula_25 is considered, we see that we have the following seven equivalence classes or primitive (simple) concepts:\n\nThus, the two objects within the first equivalence class, formula_27, cannot be distinguished from one another based on the available attributes, and the three objects within the second equivalence class, formula_28, cannot be distinguished from one another based on the available attributes. The remaining five objects are each discernible from all other objects. Now, let us imagine a projection of the attribute value system onto attribute formula_29 alone, which would represent, for example, the view from an observer which is only capable of detecting this single attribute. Then we obtain the following much coarser equivalence class structure.\n\nThis is in a certain regard the same structure as before, but at a lower degree of resolution (larger grain size). Just as in the case of value granulation (discretization/quantization), it is possible that relationships (dependencies) may emerge at one level of granularity that are not present at another. As an example of this, we can consider the effect of concept granulation on the measure known as \"attribute dependency\" (a simpler relative of the mutual information).\n\nTo establish this notion of dependency (see also rough sets), let formula_31 represent a particular concept granulation, where each formula_32 is an equivalence class from the concept structure induced by attribute set formula_33. For example, if the attribute set formula_33 consists of attribute formula_29 alone, as above, then the concept structure formula_36 will be composed of formula_37, formula_38, and formula_39. The dependency of attribute set formula_33 on another attribute set formula_41, formula_42, is given by\n\nThat is, for each equivalence class formula_32 in formula_36, we add up the size of its \"lower approximation\" (see rough sets) by the attributes in formula_41, i.e., formula_47. More simply, this approximation is the number of objects which on attribute set formula_41 can be positively identified as belonging to target set formula_32. Added across all equivalence classes in formula_36, the numerator above represents the total number of objects which—based on attribute set formula_41—can be positively categorized according to the classification induced by attributes formula_33. The dependency ratio therefore expresses the proportion (within the entire universe) of such classifiable objects, in a sense capturing the \"synchronization\" of the two concept structures formula_36 and formula_54. The dependency formula_42 \"can be interpreted as a proportion of such objects in the information system for which it suffices to know the values of attributes in formula_41 to determine the values of attributes in formula_33\" (Ziarko & Shan 1995).\n\nHaving gotten definitions now out of the way, we can make the simple observation that the choice of concept granularity (i.e., choice of attributes) will influence the detected dependencies among attributes. Consider again the attribute value table from above:\n\nLet us consider the dependency of attribute set formula_58\non attribute set formula_59. That is, we wish to know what proportion of objects can be correctly classified into classes of formula_36 based on knowledge of formula_54. The equivalence classes of formula_36 and of formula_54 are shown below.\n\nThe objects that can be \"definitively\" categorized according to concept structure formula_36 based on formula_54 are those in the set formula_66, and since there are six of these, the dependency of formula_33 on formula_41, formula_69. This might be considered an interesting dependency in its own right, but perhaps in a particular data mining application only stronger dependencies are desired.\n\nWe might then consider the dependency of the smaller attribute set formula_70\non the attribute set formula_59. The move from formula_58 to formula_70 induces a coarsening of the class structure formula_36, as will be seen shortly. We wish again to know what proportion of objects can be correctly classified into the (now larger) classes of formula_36 based on knowledge of formula_54. The equivalence classes of the new formula_36 and of formula_54 are shown below.\n\nClearly, formula_36 has a coarser granularity than it did earlier. The objects that can now be \"definitively\" categorized according to the concept structure formula_36 based on formula_54 constitute the complete universe formula_82, and thus the dependency of formula_33 on formula_41, formula_85. That is, knowledge of membership according to category set formula_54 is adequate to determine category membership in formula_36 with complete certainty; In this case we might say that formula_88. Thus, by coarsening the concept structure, we were able to find a stronger (deterministic) dependency. However, we also note that the classes induced in formula_36 from the reduction in resolution necessary to obtain this deterministic dependency are now themselves large and few in number; as a result, the dependency we found, while strong, may be less valuable to us than the weaker dependency found earlier under the higher resolution view of formula_36.\n\nIn general it is not possible to test all sets of attributes to see which induced concept structures yield the strongest dependencies, and this search must be therefore be guided with some intelligence. Papers which discuss this issue, and others relating to intelligent use of granulation, are those by Y.Y. Yao and Lotfi Zadeh listed in the #References below.\n\nAnother perspective on concept granulation may be obtained from work on parametric models of categories. In mixture model learning, for example, a set of data is explained as a mixture of distinct Gaussian (or other) distributions. Thus, a large amount of data is \"replaced\" by a small number of distributions. The choice of the number of these distributions, and their size, can again be viewed as a problem of \"concept granulation\". In general, a better fit to the data is obtained by a larger number of distributions or parameters, but in order to extract meaningful patterns, it is necessary to constrain the number of distributions, thus deliberately \"coarsening\" the concept resolution. Finding the \"right\" concept resolution is a tricky problem for which many methods have been proposed (e.g., AIC, BIC, MDL, etc.), and these are frequently considered under the rubric of \"model regularization\".\n\nGranular computing can be conceived as a framework of theories, methodologies, techniques, and tools that make use of information granules in the process of problem solving. In this sense, granular computing is used as an umbrella term to cover topics that have been studied in various fields in isolation. By examining all of these existing studies in light of the unified framework of granular computing and extracting their commonalities, it may be possible to develop a general theory for problem solving.\n\nIn a more philosophical sense, granular computing can describe a way of thinking that relies on the human ability to perceive the real world under various levels of granularity (i.e., abstraction) in order to abstract and consider only those things that serve a specific interest and to switch among different granularities. By focusing on different levels of granularity, one can obtain different levels of knowledge, as well as a greater understanding of the inherent knowledge structure. Granular computing is thus essential in human problem solving and hence has a very significant impact on the design and implementation of intelligent systems.\n\n\n", "id": "1041204", "title": "Granular computing"}
{"url": "https://en.wikipedia.org/wiki?curid=9731945", "text": "Probability matching\n\nProbability matching is a decision strategy in which predictions of class membership are proportional to the class base rates. Thus, if in the training set positive examples are observed 60% of the time, and negative examples are observed 40% of the time, then the observer using a \"probability-matching\" strategy will predict (for unlabeled examples) a class label of \"positive\" on 60% of instances, and a class label of \"negative\" on 40% of instances. \n\nThe optimal Bayesian decision strategy (to maximize the number of correct predictions, see ) in such a case is to always predict \"positive\" (i.e., predict the majority category in the absence of other information), which has 60% chance of winning rather than matching which has 52% of winning (where \"p\" is the probability of positive realization, the result of matching would be formula_1, here formula_2). The probability-matching strategy is of psychological interest because it is frequently employed by human subjects in decision and classification studies (where it may be related to Thompson sampling).\n\n", "id": "9731945", "title": "Probability matching"}
{"url": "https://en.wikipedia.org/wiki?curid=10704974", "text": "Structural risk minimization\n\nStructural risk minimization (SRM) is an inductive principle of use in machine learning. Commonly in machine learning, a generalized model must be selected from a finite data set, with the consequent problem of overfitting – the model becoming too strongly tailored to the particularities of the training set and generalizing poorly to new data. The SRM principle addresses this problem by balancing the model's complexity against its success at fitting the training data.\n\nThe SRM principle was first set out in a 1974 paper by Vladimir Vapnik and Alexey Chervonenkis and uses the VC dimension.\n\n\n", "id": "10704974", "title": "Structural risk minimization"}
{"url": "https://en.wikipedia.org/wiki?curid=10747879", "text": "Lazy learning\n\nIn machine learning, lazy learning is a learning method in which generalization beyond the training data is delayed until a query is made to the system, as opposed to in eager learning, where the system tries to generalize the training data before receiving queries.\n\nThe main advantage gained in employing a lazy learning method, such as case-based reasoning, is that the target function will be approximated locally, such as in the k-nearest neighbor algorithm. Because the target function is approximated locally for each query to the system, lazy learning systems can simultaneously solve multiple problems and deal successfully with changes in the problem domain.\n\nThe disadvantages with lazy learning include the large space requirement to store the entire training dataset. Particularly noisy training data increases the case base unnecessarily, because no abstraction is made during the training phase. Another disadvantage is that lazy learning methods are usually slower to evaluate, though this is coupled with a faster training phase.\n\nLazy classifiers are most useful for large datasets with few attributes.\n\n", "id": "10747879", "title": "Lazy learning"}
{"url": "https://en.wikipedia.org/wiki?curid=10747995", "text": "Eager learning\n\nIn artificial intelligence, eager learning is a learning method in which the system tries to construct a general, input-independent target function during training of the system, as opposed to lazy learning, where generalization beyond the training data is delayed until a query is made to the system. \nThe main advantage gained in employing an eager learning method, such as an artificial neural network, is that the target function will be approximated globally during training, thus requiring much less space than using a lazy learning system. Eager learning systems also deal much better with noise in the training data. Eager learning is an example of offline learning, in which post-training queries to the system have no effect on the system itself, and thus the same query to the system will always produce the same result.\n\nThe main disadvantage with eager learning is that it is generally unable to provide good local approximations in the target function.\n", "id": "10747995", "title": "Eager learning"}
{"url": "https://en.wikipedia.org/wiki?curid=12155912", "text": "Discriminative model\n\nDiscriminative models, also called conditional models, are a class of models used in machine learning for modeling the dependence of unobserved (target) variables formula_1 on observed variables formula_2. Within a probabilistic framework, this is done by modeling the conditional probability distribution formula_3, which can be used for predicting formula_1 from formula_2.\n\nDiscriminative models, as opposed to generative models, do not allow one to generate samples from the joint distribution of observed and target variables. However, for tasks such as classification and regression that do not require the joint distribution, discriminative models can yield superior performance (in part because they have fewer variables to compute). On the other hand, generative models are typically more flexible than discriminative models in expressing dependencies in complex learning tasks. In addition, most discriminative models are inherently supervised and cannot easily support unsupervised learning. Application-specific details ultimately dictate the suitability of selecting a discriminative versus generative model.\n\nExamples of discriminative models used in machine learning include:\n\n", "id": "12155912", "title": "Discriminative model"}
{"url": "https://en.wikipedia.org/wiki?curid=12386904", "text": "Data pre-processing\n\nData pre-processing is an important step in the data mining process. The phrase \"garbage in, garbage out\" is particularly applicable to data mining and machine learning projects. Data-gathering methods are often loosely controlled, resulting in out-of-range values (e.g., Income: −100), impossible data combinations (e.g., Sex: Male, Pregnant: Yes), missing values, etc. Analyzing data that has not been carefully screened for such problems can produce misleading results. Thus, the representation and quality of data is first and foremost before running an analysis. \nOften, data pre-processing is the most important phase of a machine learning project, especially in computational biology.\n\nIf there is much irrelevant and redundant information present or noisy and unreliable data, then knowledge discovery during the training phase is more difficult. Data preparation and filtering steps can take considerable amount of processing time. Data pre-processing includes cleaning, Instance selection, normalization, transformation, feature extraction and selection, etc. The product of data pre-processing is the final training set. Kotsiantis et al. (2006) present a well-known algorithm for each step of data pre-processing.\n\n\n", "id": "12386904", "title": "Data pre-processing"}
{"url": "https://en.wikipedia.org/wiki?curid=11360852", "text": "Predictive state representation\n\nIn computer science, a predictive state representation (PSR) is a way to model a state of controlled dynamical system from a history of actions taken and resulting observations. PSR captures the state of a system as a vector of predictions for future tests (experiments) that can be done on the system. A test is a sequence of action-observation pairs and its prediction is the probability of the test's observation-sequence happening if the test's action-sequence were to be executed on the system. One of the advantage of using PSR is that the predictions are directly related to observable quantities. This is in contrast to other models of dynamical systems, such as partially observable Markov decision processes (POMDPs) where the state of the system is represented as a probability distribution over unobserved nominal states.\n", "id": "11360852", "title": "Predictive state representation"}
{"url": "https://en.wikipedia.org/wiki?curid=14923880", "text": "Expectation propagation\n\nExpectation propagation (EP) is a technique in Bayesian machine learning.\n\nEP finds approximations to a probability distribution. It uses an iterative approach that leverages the factorization structure of the target distribution. It differs from other Bayesian approximation approaches such as Variational Bayesian methods.\n\n", "id": "14923880", "title": "Expectation propagation"}
{"url": "https://en.wikipedia.org/wiki?curid=14082194", "text": "Multiple-instance learning\n\nIn machine learning, multiple-instance learning (MIL) is a variation on supervised learning. Instead of receiving a set of instances which are individually labeled, the learner receives a set of labeled \"bags\", each containing many instances. In the simple case of multiple-instance binary classification, a bag may be labeled negative if all the instances in it are negative. On the other hand, a bag is labeled positive if there is at least one instance in it which is positive. From a collection of labeled bags, the learner tries to either (i) induce a concept that will label individual instances correctly or (ii) learn how to label bags without inducing the concept.\n\nTake image classification for example in . Given an image, we want to know its target class based on its visual content. For instance, the target class might be \"beach\", where the image contains both \"sand\" and \"water\". In MIL terms, the image is described as a \"bag\" formula_1, where eachformula_2 is the feature vector (called \"instance\") extracted from the corresponding i-th region in the image and N is the total regions (instances) partitioning the image. The bag is labeled \"positive\" (\"beach\") if it contains both \"sand\" region instances and \"water\" region instances.\n\nMultiple-instance learning was originally proposed under this name by , but earlier examples of similar research exist, for instance in the work on handwritten digit recognition by . Recent reviews of the MIL literature include , which provides an extensive review and comparative study of the different paradigms, and , which provides a thorough review of the different assumptions used by different paradigms in the literature.\n\nExamples of where MIL is applied are:\n\n\nNumerous researchers have worked on adapting classical classification techniques, such as support vector machines or boosting, to work within the context of multiple-instance learning.\n\n\n", "id": "14082194", "title": "Multiple-instance learning"}
{"url": "https://en.wikipedia.org/wiki?curid=5077439", "text": "Ugly duckling theorem\n\nThe Ugly Duckling theorem is an argument asserting that classification is impossible without some sort of bias. More particularly, it assumes finitely many properties combinable by logical connectives, and finitely many objects; it asserts that any two different objects share the same number of (extensional) properties. The theorem is named for Hans Christian Andersen's story \"The Ugly Duckling\", because it shows that a duckling is just as similar to a swan as two duckling are to each other. It was proposed by Satosi Watanabe in 1969.\n\nSuppose there are n things in the universe, and one wants to put them into classes or categories. One has no preconceived ideas or biases about what sorts of categories are \"natural\" or \"normal\" and what are not. So one has to consider all the possible classes that could be, all the possible ways of making sets out of the n objects. There are formula_1 such ways, the size of the power set of n objects. One can use that to measure the similarity between two objects: and one would see how many sets they have in common. However one can not. Any two objects have exactly the same number of classes in common if we can form any possible class, namely formula_2 (half the total number of classes there are). To see this is so, one may imagine each class is a represented by an n-bit string (or binary encoded integer), with a zero for each element not in the class and a one for each element in the class. As one finds, there are formula_1 such strings.\n\nAs all possible choices of zeros and ones are there, any two bit-positions will agree exactly half the time. One may pick two elements and reorder the bits so they are the first two, and imagine the numbers sorted lexicographically. The first formula_4 numbers will have bit #1 set to zero, and the second formula_4 will have it set to one. Within each of those blocks, the top formula_6 will have bit #2 set to zero and the other formula_6 will have it as one, so they agree on two blocks of formula_6 or on half of all the cases. No matter which two elements one picks. So if we have no preconceived bias about which categories are better, everything is then equally similar (or equally dissimilar). The number of predicates simultaneously satisfied by two non-identical elements is constant over all such pairs and is the same as the number of those satisfied by one. Thus, some kind of inductive bias is needed to make judgements; i.e. to prefer certain categories over others.\n\nLet formula_9 be a set of vectors of formula_10 booleans each. The ugly duckling is the vector which is least like the others. Given the booleans, this can be computed using Hamming distance.\n\nHowever, the choice of boolean features to consider could have been somewhat arbitrary. Perhaps there were features derivable from the original features that were important for identifying the ugly duckling. The set of booleans in the vector can be extended with new features computed as boolean functions of the formula_10 original features. The only canonical way to do this is to extend it with \"all\" possible Boolean functions. The resulting completed vectors have formula_12 features. The Ugly Duckling Theorem states that there is no ugly duckling because any two completed vectors will either be equal or differ in exactly half of the features.\n\nProof. Let x and y be two vectors. If they are the same, then their completed vectors must also be the same because any Boolean function of x will agree with the same Boolean function of y. If x and y are different, then there exists a coordinate formula_13 where the formula_13-th coordinate of formula_15 differs from the formula_13-th coordinate of formula_17. Now the completed features contain every Boolean function on formula_10 Boolean variables, with each one exactly once. Viewing these Boolean functions as polynomials in formula_10 variables over GF(2), segregate the functions into pairs formula_20 where formula_21 contains the formula_13-th coordinate as a linear term and formula_23 is formula_21 without that linear term. Now, for every such pair formula_20, formula_15 and formula_17 will agree on exactly one of the two functions. \nIf they agree on one, they must disagree on the other and vice versa. (This proof is believed to be due to Watanabe.)\n\n would be to introduce a constraint on how similarity is measured by limiting the properties involved in classification, say between A and B. However Medin et al. (1993) point out that this does not actually resolve the arbitrariness or bias problem since in what respects A is similar to B: “varies with the stimulus context and task, so that there is no unique answer, to the question of how similar is one object to another”. For example, \"a barberpole and a zebra would be more similar than a horse and a zebra if the feature \"striped\" had sufficient weight. Of course, if these feature weights were fixed, then these similarity relations would be constrained\". Yet the property \"striped\" as a weight 'fix' or constraint is arbitrary itself, meaning: \"unless one can specify such criteria, then the claim that categorization is based on attribute matching is almost entirely vacuous\".\n\nStamos (2003) has attempted to solve the Ugly Ducking Theorem by showing some judgments of overall similarity are non-arbitrary in the sense they are useful:\n\nUnless some properties are considered more salient, or ‘weighted’ more important than others, everything will appear equally similar, hence Watanabe (1986) wrote: “any objects, in so far as they are distinguishable, are equally similar\". \nIn a weaker setting that assumes infinitely many properties, Murphy and Medin (1985) give an example of two putative classified things, plums and lawnmowers:\n\n", "id": "5077439", "title": "Ugly duckling theorem"}
{"url": "https://en.wikipedia.org/wiki?curid=14529261", "text": "Rademacher complexity\n\nIn computational learning theory (machine learning and theory of computation), Rademacher complexity, named after Hans Rademacher, measures richness of a class of real-valued functions with respect to a probability distribution.\n\nGiven a set formula_1, the Rademacher complexity of A is defined as follows:\n\nwhere formula_3 are independent random variables drawn from the Rademacher distribution i.e.\nformula_4 for formula_5.\n\nGiven a sample formula_6, and a class formula_7 of real-valued functions defined on a domain space formula_8, the empirical Rademacher complexity of formula_7 given formula_10 is defined as:\n\nThis can also be written using the previous definition:\nwhere formula_13 denotes function composition, i.e.:\n\nLet formula_15 be a probability distribution over formula_8. \nThe Rademacher complexity of the function class formula_7 with respect to formula_15 for sample size formula_19 is:\n\nwhere the above expectation is taken over an identically independently distributed (i.i.d.) sample formula_21 generated according to formula_15.\n\n1. formula_23 contains a single vector, e.g., formula_24. Then:\nThe same is true for every singleton hypothesis class.\n\n2. formula_23 contains two vectors, e.g., formula_27. Then:\n\nThe Rademacher complexity can be used to derive data-dependent upper-bounds on the learnability of function classes. Intuitively, a function-class with smaller Rademacher complexity is easier to learn.\n\nIn machine learning, it is desired to have a training set that represents the true distribution of samples. This can be quantified using the notion of representativeness. Denote by P the probability distribution from which the samples are drawn. Denote by formula_30 the set of hypotheses (potential classifiers) and denote by formula_7 the corresponding set of error functions, i.e., for every formula_32, there is a function formula_33, that maps each training sample (features,label) to the error of the classifier formula_34 on that sample (for example, if we do binary classification and the error function is the simple 0-1 loss, then formula_35 is a function that returns 0 for each training sample on which formula_34 is correct and 1 for each training sample on which formula_34 is wrong). Define:\nThe representativeness of the sample formula_10, with respect to formula_15 and formula_7, is defined as:\nSmaller representativeness is better, since it means that the empirical error of a classifier on the training set is not much lower than its true error.\n\nThe expected representativeness of a sample can be bounded by the expected Rademacher complexity of the function class:\n\nWhen the Rademacher complexity is small, it is possible to learn the hypothesis class H using empirical risk minimization.\n\nFor example, (with binary error function), for every formula_45, with probability at least formula_46, for every hypothesis formula_32:\n\nSince smaller Rademacher complexity is better, it is useful to have upper bounds on the Rademacher complexity of various function sets. The following rules can be used to upper-bound the Rademacher complexity of a set formula_49.\n\n1. If all vectors in formula_23 are translated by a constant vector formula_51, then Rad(A) does not change.\n\n2. If all vectors in formula_23 are multiplied by a scalar formula_53, then Rad(A) is multiplied by formula_54.\n\n3. Rad(A+B) = Rad(A) + Rad(B).\n\n4. (Kakade&Tewari Lemma) If all vectors in formula_23 are operated by a Lipschitz function, then Rad(A) is (at most) multiplied by the Lipschitz constant of the function. In particular, if all vectors in formula_23 are operated by a contraction mapping, then Rad(A) strictly decreases.\n\n5. The Rademacher complexity of the convex hull of formula_23 equals Rad(A).\n\n6. (Massart Lemma) The Rademacher complexity of a finite set grows logarithmically with the set size. Formally, let formula_23 be a set of formula_59 vectors in formula_60, and let formula_61 be the mean of the vectors in formula_23. Then:\nIn particular, if formula_23 is a set of binary vectors, the norm is at most formula_65, so:\n\nLet formula_30 be a set family whose VC dimension is formula_68. It is known that the growth function of formula_30 is bounded as:\nThis means that, for every set formula_34 with at most formula_19 elements, formula_74. The set-family formula_75 can be considered as a set of binary vectors over formula_60. Substituting this in Massart's lemma gives:\n\nWith more advanced techniques (Dudley's entropy bound and Haussler's upper bound) one can show, for example, that there exists a constant formula_78, such that any class of formula_79-indicator functions with Vapnik-Chervonenkis dimension formula_68 has Rademacher complexity upper-bounded by formula_81.\n\nThe following bounds are related to linear operations on formula_10 - a constant set of formula_19 vectors in formula_84.\n\n1. Define formula_85 the set of dot-products of the vectors in formula_10 with vectors in the unit ball. Then:\n\n2. Define formula_88 the set of dot-products of the vectors in formula_10 with vectors in the unit ball of the 1-norm. Then:\n\nThe following bound relates the Rademacher complexity of a set formula_23 to its external covering number - the number of balls of a given radius formula_92 whose union contains formula_23. The bound is attributed to Dudley.\n\nSuppose formula_94 is a set of vectors whose length (norm) is at most formula_95. Then, for every integer formula_96:\n\nIn particular, if formula_23 lies in a \"d\"-dimensional subspace of formula_60, then:\nSubstituting this in the previous bound gives the following bound on the Rademacher complexity:\n\nGaussian complexity is a similar complexity with similar physical meanings, and can be obtained from the Rademacher complexity using the random variables formula_102 instead of formula_103, where formula_102 are Gaussian i.i.d. random variables with zero-mean and variance 1, i.e. formula_105.\n\n", "id": "14529261", "title": "Rademacher complexity"}
{"url": "https://en.wikipedia.org/wiki?curid=787776", "text": "Curse of dimensionality\n\nThe curse of dimensionality refers to various phenomena that arise when analyzing and organizing data in high-dimensional spaces (often with hundreds or thousands of dimensions) that do not occur in low-dimensional settings such as the three-dimensional physical space of everyday experience.\nThe expression was coined by Richard E. Bellman when considering problems in dynamic optimization.\n\nThere are multiple phenomena referred to by this name in domains such as numerical analysis, sampling, combinatorics, machine learning, data mining, and databases. The common theme of these problems is that when the dimensionality increases, the volume of the space increases so fast that the available data become sparse. This sparsity is problematic for any method that requires statistical significance. In order to obtain a statistically sound and reliable result, the amount of data needed to support the result often grows exponentially with the dimensionality. Also, organizing and searching data often relies on detecting areas where objects form groups with similar properties; in high dimensional data, however, all objects appear to be sparse and dissimilar in many ways, which prevents common data organization strategies from being efficient.\n\nIn some problems, each variable can take one of several discrete values, or the range of possible values is divided to give a finite number of possibilities. Taking the variables together, a huge number of combinations of values must be considered. This effect is also known as the combinatorial explosion. Even in the simplest case of formula_1 binary variables, the number of possible combinations already is formula_2, exponential in the dimensionality. Naively, each additional dimension doubles the effort needed to try all combinations.\n\nThere is an exponential increase in volume associated with adding extra dimensions to a mathematical space. For example, 10=100 evenly spaced sample points suffice to sample a unit interval (a \"1-dimensional cube\") with no more than 10=0.01 distance between points; an equivalent sampling of a 10-dimensional unit hypercube with a lattice that has a spacing of 10=0.01 between adjacent points would require 10[=(10)] sample points. In general, with a spacing distance of 10 the 10-dimensional hypercube appears to be a factor of 10[=(10)/(10)] \"larger\" than the 1-dimensional hypercube, which is the unit interval. In the above example n=2: when using a sampling distance of 0.01 the 10-dimensional hypercube appears to be 10 \"larger\" than the unit interval. This effect is a combination of the combinatorics problems above and the distance function problems explained below.\n\nWhen solving dynamic optimization problems by numerical backward induction, the objective function must be computed for each combination of values. This is a significant obstacle when the dimension of the \"state variable\" is large.\n\nIn machine learning problems that involve learning a \"state-of-nature\" from a finite number of data samples in a high-dimensional feature space with each feature having a range of possible values, typically an enormous amount of training data is required to ensure that there are several samples with each combination of values. A typical rule of thumb is that there should be at least 5 training examples for each dimension in the representation. With a fixed number of training samples, the predictive power of a classifier or regressor first increases as number of dimensions/features used is increased but then decreases, which is known as \"Hughes phenomenon\" or \"peaking phenomena\".\n\nWhen a measure such as a Euclidean distance is defined using many coordinates, there is little difference in the distances between different pairs of samples.\n\nOne way to illustrate the \"vastness\" of high-dimensional Euclidean space is to compare the proportion of an inscribed hypersphere with radius formula_3 and dimension formula_1, to that of a hypercube with edges of length formula_5.\nThe volume of such a sphere is formula_6, where formula_7 is the gamma function, while the volume of the cube is formula_8.\nAs the dimension formula_1 of the space increases, the hypersphere becomes an insignificant volume relative to that of the hypercube. This can clearly be by comparing the proportions as the dimension formula_1 goes to infinity:\n\nFurthermore, the distance between the center and the corners is formula_13, which increases without bound for fixed r.\nIn this sense, nearly all of the high-dimensional space is \"far away\" from the centre. To put it another way, the high-dimensional unit hypercube can be said to consist almost entirely of the \"corners\" of the hypercube, with almost no \"middle\".\n\nThis also helps to understand the chi-squared distribution. Indeed, the (non-central) chi-squared distribution associated to a random point in the interval [-1, 1] is the same as the distribution of the length-squared of a random point in the \"d\"-cube. By the law of large numbers, this distribution concentrates itself in a narrow band around \"d\" times the standard deviation squared (σ) of the original derivation. This illuminates the chi-squared distribution and also illustrates that most of the volume of the \"d\"-cube concentrates near the surface of a sphere of radius \"σ\".\n\nA further development of this phenomenon is as follows. Any fixed distribution on \"ℝ\" induces a product distribution on points in \"ℝ\". For any fixed \"n\", it turns out that the minimum and the maximum distance between a random reference point \"Q\" and a list of \"n\" random data points \"P...,P\" become indiscernible compared to the minimum distance:\nThis is often cited as distance functions losing their usefulness (for the nearest-neighbor criterion in feature-comparison algorithms, for example) in high dimensions. However, recent research has shown this to only hold in the artificial scenario when the one-dimensional distributions \"ℝ\" are independent and identically distributed. When attributes are correlated, data can become easier and provide higher distance contrast and the signal-to-noise ratio was found to play an important role, thus feature selection should be used.\n\nThe effect complicates nearest neighbor search in high dimensional space. It is not possible to quickly reject candidates by using the difference in one coordinate as a lower bound for a distance based on all the dimensions.\n\nHowever, it has recently been observed that the mere number of dimensions does not necessarily result in difficulties, since \"relevant\" additional dimensions can also increase the contrast. In addition, for the resulting ranking it remains useful to discern close and far neighbors. Irrelevant (\"noise\") dimensions, however, reduce the contrast in the manner described above. In time series analysis, where the data are inherently high-dimensional, distance functions also work reliably as long as the signal-to-noise ratio is high enough.\n\nAnother effect of high dimensionality on distance functions concerns \"k\"-nearest neighbor (\"k\"-NN) graphs constructed from a data set using a distance function. As the dimension increases, the indegree distribution of the \"k\"-NN digraph becomes skewed with a peak on the right because of the emergence of a disproportionate number of hubs, that is, data-points that appear in many more \"k\"-NN lists of other data-points than the average. This phenomenon can have a considerable impact on various techniques for classification (including the \"k\"-NN classifier), semi-supervised learning, and clustering, and it also affects information retrieval.\n\nIn a recent survey, Zimek et al. identified the following problems when searching for anomalies in high-dimensional data:\n\n\nMany of the analyzed specialized methods tackle one or another of these problems, but there remain many open research questions.\n", "id": "787776", "title": "Curse of dimensionality"}
{"url": "https://en.wikipedia.org/wiki?curid=19058043", "text": "Uncertain data\n\nIn computer science, uncertain data is data that contains noise that makes it deviate from the correct, intended or original values. In the age of big data, uncertainty or data veracity is one of the defining characteristics of data. Data is constantly growing in volume, variety, velocity and uncertainty (1/veracity). Uncertain data is found in abundance today on the web, in sensor networks, within enterprises both in their structured and unstructured sources. For example, there may be uncertainty regarding the address of a customer in an enterprise dataset, or the temperature readings captured by a sensor due to aging of the sensor. In 2012 IBM called out managing uncertain data at scale in its global technology outlook report that presents a comprehensive analysis looking three to ten years into the future seeking to identify significant, disruptive technologies that will change the world. In order to make confident business decisions based on real-world data, analyses must necessarily account for many different kinds of uncertainty present in very large amounts of data. Analyses based on uncertain data will have an effect on the quality of subsequent decisions, so the degree and types of inaccuracies in this uncertain data cannot be ignored.\n\nUncertain data is found in the area of sensor networks; text where noisy text is found in abundance on social media, web and within enterprises where the structured and unstructured data may be old, outdated, or plain incorrect; in modeling where the mathematical model may only be an approximation of the actual process. When representing such data in a database, some indication of the probability of the correctness of the various values also needs to be estimated.\n\nThere are three main models of uncertain data in databases. In attribute uncertainty, each uncertain attribute in a tuple is subject to its own independent probability distribution. For example, if readings are taken of temperature and wind speed, each would be described by its own probability distribution, as knowing the reading for one measurement would not provide any information about the other.\n\nIn correlated uncertainty, multiple attributes may be described by a joint probability distribution. For example, if readings are taken of the position of an object, and the \"x\"- and \"y\"-coordinates stored, the probability of different values may depend on the distance from the recorded coordinates. As distance depends on both coordinates, it may be appropriate to use a joint distribution for these coordinates, as they are not independent.\n\nIn tuple uncertainty, all the attributes of a tuple are subject to a joint probability distribution. This covers the case of correlated uncertainty, but also includes the case where there is a probability of a tuple not belonging in the relevant relation, which is indicated by all the probabilities not summing to one. For example, assume we have the following tuple from a probabilistic database:\nThen, the tuple has 10% chance of not existing in the database.\n\n", "id": "19058043", "title": "Uncertain data"}
{"url": "https://en.wikipedia.org/wiki?curid=4144848", "text": "Knowledge integration\n\nKnowledge integration is the process of synthesizing multiple knowledge models (or representations) into a common model (representation).\n\nCompared to information integration, which involves merging information having different schemas and representation models, knowledge integration focuses more on synthesizing the understanding of a given subject from different perspectives.\n\nFor example, multiple interpretations are possible of a set of student grades, typically each from a certain perspective. An overall, integrated view and understanding of this information can be achieved if these interpretations can be put under a common model, say, a student performance index.\n\nThe Web-based Inquiry Science Environment (WISE), from the University of California at Berkeley has been developed along the lines of knowledge integration theory.\n\nKnowledge integration has also been studied as the process of incorporating new information into a body of existing knowledge with an interdisciplinary approach. This process involves determining how the new information and the existing knowledge interact, how existing knowledge should be modified to accommodate the new information, and how the new information should be modified in light of the existing knowledge.\n\nA learning agent that actively investigates the consequences of new information can detect and exploit a variety of learning opportunities; e.g., to resolve knowledge conflicts and to fill knowledge gaps. By exploiting these learning opportunities the learning agent is able to learn beyond the explicit content of the new information.\n\nThe machine learning program KI, developed by Murray and Porter at the University of Texas at Austin, was created to study the use of automated and semi-automated knowledge integration to assist knowledge engineers constructing a large knowledge base.\n\nA possible technique which can be used is semantic matching. More recently, a technique useful to minimize the effort in mapping validation and visualization has been presented which is based on Minimal Mappings. Minimal mappings are high quality mappings such that i) all the other mappings can be computed from them in time linear in the size of the input graphs, and ii) none of them can be dropped without losing property i).\n\nThe University of Waterloo operates a Bachelor of Knowledge Integration undergraduate degree program as an academic major or minor. The program started in 2008.\n\n\n", "id": "4144848", "title": "Knowledge integration"}
{"url": "https://en.wikipedia.org/wiki?curid=10748030", "text": "Offline learning\n\nIn machine learning, systems which employ offline learning do not change their approximation of the target function when the initial training phase has been completed. These systems are also typically examples of eager learning.\n\n", "id": "10748030", "title": "Offline learning"}
{"url": "https://en.wikipedia.org/wiki?curid=14271782", "text": "Semantic analysis (machine learning)\n\nIn machine learning, semantic analysis of a corpus is the task of building structures that approximate concepts from a large set of documents. It generally does not involve prior semantic understanding of the documents.\n\nLatent semantic analysis (sometimes latent semantic indexing), is a class of techniques where documents are represented as vectors in term space. A prominent example is PLSI.\n\nLatent Dirichlet allocation involves attributing document terms to topics.\n\nn-grams and hidden Markov models work by representing the term stream as a markov chain where each term is derived from the few terms before it.\n\n", "id": "14271782", "title": "Semantic analysis (machine learning)"}
{"url": "https://en.wikipedia.org/wiki?curid=20890511", "text": "Algorithmic inference\n\nAlgorithmic inference gathers new developments in the statistical inference methods made feasible by the powerful computing devices widely available to any data analyst. Cornerstones in this field are computational learning theory, granular computing, bioinformatics, and, long ago, structural probability .\nThe main focus is on the algorithms which compute statistics rooting the study of a random phenomenon, along with the amount of data they must feed on to produce reliable results. This shifts the interest of mathematicians from the study of the distribution laws to the functional properties of the statistics, and the interest of computer scientists from the algorithms for processing data to the information they process.\n\nConcerning the identification of the parameters of a distribution law, the mature reader may recall lengthy disputes in the mid 20th century about the interpretation of their variability in terms of fiducial distribution , structural probabilities , priors/posteriors , and so on. From an epistemology viewpoint, this entailed a companion dispute as to the nature of probability: is it a physical feature of phenomena to be described through random variables or a way of synthesizing data about a phenomenon? Opting for the latter, Fisher defines a \"fiducial distribution\" law of parameters of a given random variable that he deduces from a sample of its specifications. With this law he computes, for instance “the probability that μ (mean of a Gaussian variable – our note) is less than any assigned value, or the probability that it lies between any assigned values, or, in short, its probability distribution, in the light of the sample observed”.\n\nFisher fought hard to defend the difference and superiority of his notion of parameter distribution in comparison to \nanalogous notions, such as Bayes' posterior distribution, Fraser's constructive probability and Neyman's confidence intervals. For half a century, Neyman's confidence intervals won out for all practical purposes, crediting the phenomenological nature of probability. With this perspective, when you deal with a Gaussian variable, its mean μ is fixed by the physical features of the phenomenon you are observing, where the observations are random operators, hence the observed values are specifications of a random sample. Because of their randomness, you may compute from the sample specific intervals containing the fixed μ with a given probability that you denote \"confidence\".\n\nLet \"X\" be a Gaussian variable with parameters formula_1 and formula_2 \nand formula_3 a sample drawn from it. Working with statistics\n\nand\n\nis the sample mean, we recognize that\n\nfollows a Student's t distribution with parameter (degrees of freedom) \"m\" − 1, so that\n\nGauging \"T\" between two quantiles and inverting its expression as a function of formula_1 you obtain confidence intervals for formula_1.\n\nWith the sample specification:\n\nhaving size \"m\" = 10, you compute the statistics formula_11 and formula_12, and obtain a 0.90 confidence interval for formula_1 with extremes (3.03, 5.65).\nFrom a modeling perspective the entire dispute looks like a chicken-egg dilemma: either fixed data by first and probability distribution of their properties as a consequence, or fixed properties by first and probability distribution of the observed data as a corollary.\nThe classic solution has one benefit and one drawback. The former was appreciated particularly back when people still did computations with sheet and pencil. Per se, the task of computing a Neyman confidence interval for the fixed parameter θ is hard: you don’t know θ, but you look for disposing around it an interval with a possibly very low probability of failing. The analytical solution is allowed for a very limited number of theoretical cases. \"Vice versa\" a large variety of instances may be quickly solved in an \"approximate way\" via the central limit theorem in terms of confidence interval around a Gaussian distribution – that's the benefit. \nThe drawback is that the central limit theorem is applicable when the sample size is sufficiently large. Therefore, it is less and less applicable with the sample involved in modern inference instances. The fault is not in the sample size on its own part. Rather, this size is not sufficiently large because of the complexity of the inference problem.\n\nWith the availability of large computing facilities, scientists refocused from isolated parameters inference to complex functions inference, i.e. re sets of highly nested parameters identifying functions. In these cases we speak about \"learning of functions\" (in terms for instance of regression, neuro-fuzzy system or computational learning) on the basis of highly informative samples. A first effect of having a complex structure linking data is the reduction of the number of sample degrees of freedom, i.e. the burning of a part of sample points, so that the effective sample size to be considered in the central limit theorem is too small. Focusing on the sample size ensuring a limited learning error with a given confidence level, the consequence is that the lower bound on this size grows with complexity indices such as VC dimension or detail of a class to which the function we want to learn belongs.\n\nA sample of 1,000 independent bits is enough to ensure an absolute error of at most 0.081 on the estimation of the parameter \"p\" of the underlying Bernoulli variable with a confidence of at least 0.99. The same size cannot guarantee a threshold less than 0.088 with the same confidence 0.99 when the error is identified with the probability that a 20-year-old man living in New York does not fit the ranges of height, weight and waistline observed on 1,000 Big Apple inhabitants. The accuracy shortage occurs because both the VC dimension and the detail of the class of parallelepipeds, among which the one observed from the 1,000 inhabitants' ranges falls, are equal to 6.\nWith insufficiently large samples, the approach: \"fixed sample – random properties\" suggests inference procedures in three steps:\nFor a random variable and a sample drawn from it a \"compatible distribution\" is a distribution having the same sampling mechanism formula_14 of \"X\" with a value formula_15 of the random parameter formula_16 derived from a master equation rooted on a well-behaved statistic \"s\".\n\nYou may find the distribution law of the Pareto parameters \"A\" and \"K\" as an implementation example of the population bootstrap method as in the figure on the left.\n\nImplementing the twisting argument method, you get the distribution law formula_17 of the mean \"M\" of a Gaussian variable \"X\" on the basis of the statistic formula_18 when formula_19 is known to be equal to formula_2 . Its expression is:\n\nshown in the figure on the right, where formula_22 is the cumulative distribution function of a standard normal distribution.\n\nThe Achilles heel of Fisher's approach lies in the joint distribution of more than one parameter, say mean and variance of a Gaussian distribution. On the contrary, with the last approach (and above-mentioned methods: population bootstrap and twisting argument) we may learn the joint distribution of many parameters. For instance, focusing on the distribution of two or many more parameters, in the figures below we report two confidence regions where the function to be learnt falls with a confidence of 90%. The former concerns the probability with which an extended support vector machine attributes a binary label 1 to the points of the formula_25 plane. The two surfaces are drawn on the basis of a set of sample points in turn labelled according to a specific distribution law . The latter concerns the confidence region of the hazard rate of breast cancer recurrence computed from a censored sample .\n\n", "id": "20890511", "title": "Algorithmic inference"}
{"url": "https://en.wikipedia.org/wiki?curid=7517319", "text": "Rule induction\n\nRule induction is an area of machine learning in which formal rules are extracted from a set of observations. The rules extracted may represent a full scientific model of the data, or merely represent local patterns in the data.\n\nSome major rule induction paradigms are:\n\nSome rule induction algorithms are:\n", "id": "7517319", "title": "Rule induction"}
{"url": "https://en.wikipedia.org/wiki?curid=22589574", "text": "Instance-based learning\n\nIn machine learning, instance-based learning (sometimes called memory-based learning) is a family of learning algorithms that, instead of performing explicit generalization, compares new problem instances with instances seen in training, which have been stored in memory.\n\nIt is called instance-based because it constructs hypotheses directly from the training instances themselves.\nThis means that the hypothesis complexity can grow with the data: in the worst case, a hypothesis is a list of \"n\" training items and the computational complexity of classifying a single new instance is \"O\"(\"n\"). One advantage that instance-based learning has over other methods of machine learning is its ability to adapt its model to previously unseen data. Instance-based learners may simply store a new instance or throw an old instance away.\n\nExamples of instance-based learning algorithm are the \"k\"-nearest neighbor algorithm, kernel machines and RBF networks. These store (a subset of) their training set; when predicting a value/class for a new instance, they compute distances or similarities between this instance and the training instances to make a decision.\n\nTo battle the memory complexity of storing all training instances, as well as the risk of overfitting to noise in the training set, \"instance reduction\" algorithms have been proposed.\n\nGagliardi applies this family of classifiers in medical field as second-opinion diagnostic tools and as tools for the knowledge extraction phase in the process of knowledge discovery in databases. \nOne of these classifiers (called \"Prototype exemplar learning classifier\" (PEL-C) is able to extract a mixture of abstracted prototypical cases (that are syndromes) and selected atypical clinical cases.\n\n", "id": "22589574", "title": "Instance-based learning"}
{"url": "https://en.wikipedia.org/wiki?curid=173332", "text": "Overfitting\n\nIn statistics, overfitting is \"the production of an analysis that corresponds too closely or exactly to a particular set of data, and may therefore fail to fit additional data or predict future observations reliably\". An overfitted model is a statistical model that contains more parameters than can be justified by the data. The essence of overfitting is to have unknowingly extracted some of the residual variation (i.e. the noise) as if that variation represented underlying model structure.\n\nUnderfitting occurs when a statistical model cannot adequately capture the underlying structure of the data. An underfitted model is a model where some parameters or terms that would appear in a correctly specified model are missing. Underfitting would occur, for example, when fitting a linear model to non-linear data. Such a model will tend to have poor predictive performance.\n\nOverfitting and underfitting can occur in machine learning, in particular. In machine learning, the phenomena are sometimes called \"overtraining\" and \"undertraining\". \n\nThe possibility of overfitting exists because the criterion used for selecting the model is not the same as the criterion used to judge the suitability of a model. For example, a model might be selected by maximizing its performance on some set of training data, and yet its suitability might be determined by its ability to perform well on unseen data; then overfitting occurs when a model begins to \"memorize\" training data rather than \"learning\" to generalize from a trend. \n\nAs an extreme example, if the number of parameters is the same as or greater than the number of observations, a simple model can perfectly predict the training data simply by memorizing the data in its entirety. (For an illustration, see Figure 2.) Such a model, though, will typically fail severely when making predictions. \n\nThe potential for overfitting depends not only on the number of parameters and data but also the conformability of the model structure with the data shape, and the magnitude of model error compared to the expected level of noise or error in the data. Even when the fitted model does not have an excessive number of parameters, it is to be expected that the fitted relationship will appear to perform less well on a new data set than on the data set used for fitting (a phenomenon sometimes known as \"shrinkage\"). In particular, the value of the coefficient of determination will shrink relative to the original data.\n\nTo lessen the chance of, or amount of, overfitting, several techniques are available (e.g. model comparison, cross-validation, regularization, early stopping, pruning, Bayesian priors, or dropout). The basis of some techniques is either (1) to explicitly penalize overly complex models or (2) to test the model's ability to generalize by evaluating its performance on a set of data not used for training, which is assumed to approximate the typical unseen data that a model will encounter.\n\nIn statistics, an inference is drawn from a statistical model, which has been selected via some procedure. Burnham & Anderson, in their much-cited text on model selection, argue that to avoid overfitting, we should adhere to the \"Principle of Parsimony\". The authors also state the following.\nOverfitting is more likely to be a serious concern when there is little theory available to guide the analysis, in part because then there tend to be a large number of models to select from. The book \"Model Selection and Model Averaging\" (2008) puts it this way.\nIn regression, overfitting occurs frequently. In the extreme case, if there are \"p\" variables in a linear regression with \"p\" data points, the fitted line will go exactly through every point. A recent study suggests that two observations per independent variable are sufficient for linear regression. For logistic regression or Cox proportional hazards models, there are a variety of rules of thumb (e.g. 5-9, 10 and 10-15 — the guideline of 10 observations per independent variable is known as the \"one in ten rule\"). In the process of regression model selection, the mean squared error of the random regression function can be split into random noise, approximation bias, and variance in the estimate of regression function, and bias–variance tradeoff is often used to overcome overfit models.\n\nUsually a learning algorithm is trained using some set of \"training data\": exemplary situations for which the desired output is known. The goal is that the algorithm will also perform well on predicting the output when fed \"validation data\" that was not encountered during its training.\n\nOverfitting is the use of models or procedures that violate Occam's razor, for example by including more adjustable parameters than are ultimately optimal, or by using a more complicated approach than is ultimately optimal. For an example where there are too many adjustable parameters, consider a dataset where training data for can be adequately predicted by a linear function of two dependent variables. Such a function requires only three parameters (the intercept and two slopes). Replacing this simple function with a new, more complex quadratic function, or with a new, more complex linear function on more than two dependent variables, carries a risk: Occam's razor implies that any given complex function is \"a priori\" less probable than any given simple function. If the new, more complicated function is selected instead of the simple function, and if there was not a large enough gain in training-data fit to offset the complexity increase, then the new complex function \"overfits\" the data, and the complex overfitted function will likely perform worse than the simpler function on validation data outside the training dataset, even though the complex function performed as well, or perhaps even better, on the training dataset.\n\nWhen comparing different types of models, complexity cannot be measured solely by counting how many parameters exist in each model; the expressivity of each parameter must be considered as well. For example, it is nontrivial to directly compare the complexity of a neural net (which can track curvilinear relationships) with parameters to a regression model with parameters.\n\nOverfitting is especially likely in cases where learning was performed too long or where training examples are rare, causing the learner to adjust to very specific random features of the training data, that have no causal relation to the target function. In this process of overfitting, the performance on the training examples still increases while the performance on unseen data becomes worse.\n\nAs a simple example, consider a database of retail purchases that includes the item bought, the purchaser, and the date and time of purchase. It's easy to construct a model that will fit the training set perfectly by using the date and time of purchase to predict the other attributes; but this model will not generalize at all to new data, because those past times will never occur again.\n\nGenerally, a learning algorithm is said to overfit relative to a simpler one if it is more accurate in fitting known data (hindsight) but less accurate in predicting new data (foresight). One can intuitively understand overfitting from the fact that information from all past experience can be divided into two groups: information that is relevant for the future and irrelevant information (\"noise\"). Everything else being equal, the more difficult a criterion is to predict (i.e., the higher its uncertainty), the more noise exists in past information that needs to be ignored. The problem is determining which part to ignore. A learning algorithm that can reduce the chance of fitting noise is called robust.\n\nThe most obvious consequence of overfitting is poor performance on the validation dataset. Other negative consequences include:\n\n\nUnderfitting occurs when a statistical model or machine learning algorithm cannot adequately capture the underlying structure of the data. It occurs when the model or algorithm does not fit the data enough. Underfitting occurs if the model or algorithm shows low variance but high bias (to contrast the opposite, overfitting from high variance and low bias). It is often a result of an excessively simple model. \n\nBurnham & Anderson state the following.\n\n\n", "id": "173332", "title": "Overfitting"}
{"url": "https://en.wikipedia.org/wiki?curid=2085584", "text": "Feature vector\n\nIn pattern recognition and machine learning, a feature vector is an n-dimensional vector of numerical features that represent some object. Many algorithms in machine learning require a numerical representation of objects, since such representations facilitate processing and\nstatistical analysis. When representing images, the feature values might correspond to the pixels of an image, while when representing texts the features might be the frequencies of occurrence of textual terms. Feature vectors are equivalent to the vectors of explanatory variables used in statistical procedures such as linear regression. Feature vectors are often combined with weights using a dot product in order to construct a linear predictor function that is used to determine a score for making a prediction.\n\nThe vector space associated with these vectors is often called the feature space. In order to reduce the dimensionality of the feature space, a number of dimensionality reduction techniques can be employed.\n\nHigher-level features can be obtained from already available features and added to the feature vector; for example, for the study of diseases the feature 'Age' is useful and is defined as \"Age = 'Year of death' minus 'Year of birth' \". This process is referred to as feature construction. Feature construction is the application of a set of constructive operators to a set of existing features resulting in construction of new features. Examples of such constructive operators include checking for the equality conditions {=, ≠}, the arithmetic operators {+,−,×, /}, the array operators {max(S), min(S), average(S)} as well as other more sophisticated operators, for example count(S,C) that counts the number of features in the feature vector S satisfying some condition C or, for example, distances to other recognition classes generalized by some accepting device. Feature construction has long been considered a powerful tool for increasing both accuracy and understanding of structure, particularly in high-dimensional problems. Applications include studies of disease and emotion recognition from speech.\n\n", "id": "2085584", "title": "Feature vector"}
{"url": "https://en.wikipedia.org/wiki?curid=22999791", "text": "Uniform convergence in probability\n\nUniform convergence in probability is a form of convergence in probability in statistical asymptotic theory and probability theory. It means that, under certain conditions, the \"empirical frequencies\" of all events in a certain event-family converge to their \"theoretical probabilities\". Uniform convergence in probability has applications to statistics as well as machine learning as part of statistical learning theory.\n\nThe law of large numbers says that, for each \"single\" event, its empirical frequency in a sequence of independent trials converges (with high probability) to its theoretical probability. But in some applications, we are interested not in a single event but in a whole \"family of events\". We would like to know whether the empirical frequency of every event in the family converges to its theoretical probability \"simultaneously\". The Uniform Convergence Theorem gives a sufficient condition for this convergence to hold. Roughly, if the event-family is sufficiently simple (its VC dimension is sufficiently small) then uniform convergence holds.\n\nFor a class of predicates formula_1 defined on a set formula_2 and a set of samples formula_3, where formula_4, the \"empirical frequency\" of formula_5 on formula_6 is\n\nThe \"theoretical probability\" of formula_5 is defined as formula_9\n\nThe Uniform Convergence Theorem states, roughly, that if formula_1 is \"simple\" and we draw samples independently (with replacement) from formula_2 according to any distribution formula_12, then with high probability, the empirical frequency will be close to its expected value, which is the theoretical probability.\n\nHere \"simple\" means that the Vapnik–Chervonenkis dimension of the class formula_1 is small relative to the size of the sample. In other words, a sufficiently simple collection of functions behaves roughly the same on a small random sample as it does on the distribution as a whole.\n\nThe Uniform Convergence Theorem was first proved by Vapnik and Chervonenkis using the concept of growth function.\n\nThe statement of the uniform convergence theorem is as follows:\n\nIf formula_1 is a set of formula_15-valued functions defined on a set formula_2 and formula_12 is a probability distribution on formula_2 then for formula_19 and formula_20 a positive integer, we have:\n\nThe maximum is guaranteed to exist since there is only a finite set of values that probability under a random permutation can take.\n\nLemma: Basing on the previous lemma,\n\nProof:\nLet us define formula_23 and formula_24 which is at most formula_25. This means there are functions formula_26 such that for any formula_27 between formula_28 and formula_29 with formula_30 for formula_31\n\nWe see that formula_32 iff for some formula_33 in formula_1 satisfies,\nformula_35. \nHence if we define formula_36 if formula_37 and formula_38 otherwise.\n\nFor formula_39 and formula_40, we have that formula_32 iff for some formula_42 in formula_43 satisfies formula_44. By union bound we get\n\nSince, the distribution over the permutations formula_47 is uniform for each formula_48, so formula_49 equals formula_50, with equal probability.\n\nThus,\n\nwhere the probability on the right is over formula_52 and both the possibilities are equally likely. By Hoeffding's inequality, this is at most formula_53.\n\nFinally, combining all the three parts of the proof we get the Uniform Convergence Theorem.\n", "id": "22999791", "title": "Uniform convergence in probability"}
{"url": "https://en.wikipedia.org/wiki?curid=17114678", "text": "CBCL (MIT)\n\nThe Center for Biological & Computational Learning is a research lab at the Massachusetts Institute of Technology.\n\nCBCL was established in 1992 with support from the National Science Foundation. It is based in the Department of Brain & Cognitive Sciences at MIT, and is associated with the McGovern Institute for Brain Research, and the MIT Computer Science and Artificial Intelligence Laboratory.\n\nIt was founded with the belief that learning is at the very core of the problem of intelligence, both biological and artificial. Learning is thus the gateway to understanding how the human brain works and for making intelligent machines. CBCL studies the problem of learning within a multidisciplinary approach. Its main goal is to nurture serious research on the mathematics, the engineering and the neuroscience of learning. \n\nResearch is focused on the problem of learning in theory, engineering applications, and neuroscience.\n\nIn computational neuroscience, the center has developed a model of the ventral stream in the visual cortex which accounts for much of the physiological data, and psychophysical experiments in difficult object recognition tasks. The model performs at the level of the best computer vision systems.\n\nTomaso Poggio director of CBCL\n\n", "id": "17114678", "title": "CBCL (MIT)"}
{"url": "https://en.wikipedia.org/wiki?curid=12306500", "text": "Matthews correlation coefficient\n\nThe Matthews correlation coefficient is used in machine learning as a measure of the quality of binary (two-class) classifications, introduced by biochemist Brian W. Matthews in 1975. It takes into account true and false positives and negatives and is generally regarded as a balanced measure which can be used even if the classes are of very different sizes. The MCC is in essence a correlation coefficient between the observed and predicted binary classifications; it returns a value between −1 and +1. A coefficient of +1 represents a perfect prediction, 0 no better than random prediction and −1 indicates total disagreement between prediction and observation. The statistic is also known as the phi coefficient. MCC is related to the chi-square statistic for a 2×2 contingency table\n\nwhere \"n\" is the total number of observations.\n\nWhile there is no perfect way of describing the confusion matrix of true and false positives and negatives by a single number, the Matthews correlation coefficient is generally regarded as being one of the best such measures. Other measures, such as the proportion of correct predictions (also termed accuracy), are not useful when the two classes are of very different sizes. For example, assigning every object to the larger set achieves a high proportion of correct predictions, but is not generally a useful classification.\n\nThe MCC can be calculated directly from the confusion matrix using the formula:\n\nIn this equation, \"TP\" is the number of true positives, \"TN\" the number of true negatives, \"FP\" the number of false positives and \"FN\" the number of false negatives. If any of the four sums in the denominator is zero, the denominator can be arbitrarily set to one; this results in a Matthews correlation coefficient of zero, which can be shown to be the correct limiting value.\n\nThe original formula as given by Matthews was:\n\nThis is equal to the formula given above. As a correlation coefficient, the Matthews correlation coefficient is the geometric mean of the regression coefficients of the problem and its dual. The component regression coefficients of the Matthews correlation coefficient are Markedness (Δp) and Youden's J statistic (Informedness or Δp'). Markedness and Informedness correspond to different directions of information flow and generalize Youden's J statistic, the deltap statistics and (as their geometric mean) the Matthews Correlation Coefficient to more than two classes.\n\nSome scientists claim the Matthews correlation coefficient to be the most informative single score to establish the quality of a binary classifier prediction in a confusion matrix context.\n\nLet us define an experiment from P positive instances and N negative instances for some condition. The four outcomes can be formulated in a 2×2 \"contingency table\" or \"confusion matrix\", as follows:\n\nThe Matthews correlation coefficient has been generalized to the multiclass case. This generalization was called the formula_7 statistic (for K different classes) by the author, and defined in terms of a formula_8 confusion matrix formula_9\n\nWhen there are more than two labels the MCC will no longer range between -1 and +1. Instead the minimum value will be between -1 and 0 depending on the true distribution. The maximum value is always +1.\n\n", "id": "12306500", "title": "Matthews correlation coefficient"}
{"url": "https://en.wikipedia.org/wiki?curid=23864530", "text": "Learning with errors\n\nLearning with errors (LWE) is a problem in machine learning that is conjectured to be hard to solve. Introduced by Oded Regev in 2005, it is a generalization of the parity learning problem. Regev showed, furthermore, that the LWE problem is as hard to solve as several worst-case lattice problems. The LWE problem has recently been used as a hardness assumption to create public-key cryptosystems, such as the ring learning with errors key exchange by Peikert.\n\nAn algorithm is said to solve the LWE problem if, when given access to samples formula_1 where formula_2 (a vector of formula_3 integers modulo formula_4) and formula_5, with the assurance, for some fixed linear function formula_6 that formula_7 with high probability and deviates from it according to some known noise model, the algorithm can recreate formula_8 or some close approximation of it with high probability.\n\nDenote by formula_9 the additive group on reals modulo one. Denote by formula_10 the distribution on formula_11 obtained by choosing a vector formula_12 uniformly at random, choosing formula_13 according to a probability distribution formula_14 on formula_15 and outputting formula_16 for some fixed vector formula_17. Here formula_18 is the standard inner product formula_19, the division is done in the field of reals (or more formally, this \"division by formula_4\" is notation for the group homomorphism formula_21 mapping formula_22 to formula_23), and the final addition is in formula_15.\n\nThe learning with errors problem formula_25 is to find formula_17, given access to polynomially many samples of choice from formula_10.\n\nFor every formula_28, denote by formula_29 the one-dimensional Gaussian with density function formula_30 where formula_31, and let formula_32 be the distribution on formula_15 obtained by considering formula_29 modulo one. The version of LWE considered in most of the results would be formula_35\n\nThe LWE problem described above is the \"search\" version of the problem. In the \"decision\" version (DLWE), the goal is to distinguish between noisy inner products and uniformly random samples from formula_11 (practically, some discretized version of it). Regev showed that the \"decision\" and \"search\" versions are equivalent when formula_4 is a prime bounded by some polynomial in formula_3.\n\nIntuitively, if we have a procedure for the search problem, the decision version can be solved easily: just feed the input samples for the decision problem to the solver for the search problem. Denote the given samples by formula_39. If the solver returns a candidate formula_40, for all formula_41, calculate formula_42. If the samples are from an LWE distribution, then the results of this calculation will be distributed according formula_43, but if the samples are uniformly random, these quantities will be distributed uniformly as well.\n\nFor the other direction, given a solver for the decision problem, the search version can be solved as follows: Recover formula_40 one coordinate at a time. To obtain the first coordinate, formula_45, make a guess formula_46, and do the following. Choose a number formula_47 uniformly at random. Transform the given samples formula_39 as follows. Calculate formula_49. Send the transformed samples to the decision solver.\n\nIf the guess formula_50 was correct, the transformation takes the distribution formula_51 to itself, and otherwise, since formula_4 is prime, it takes it to the uniform distribution. So, given a polynomial-time solver for the decision problem that errs with very small probability, since formula_4 is bounded by some polynomial in formula_3, it only takes polynomial time to guess every possible value for formula_50 and use the solver to see which one is correct.\n\nAfter obtaining formula_45, we follow an analogous procedure for each other coordinate formula_57. Namely, we transform our formula_58 samples the same way, and transform our formula_59 samples by calculating formula_60, where the formula_61 is in the formula_62 coordinate.\n\nPeikert showed that this reduction, with a small modification, works for any formula_4 that is a product of distinct, small (polynomial in formula_3) primes. The main idea is if formula_65, for each formula_66, guess and check to see if formula_57 is congruent to formula_68, and then use the Chinese remainder theorem to recover formula_57.\n\nRegev showed the Random self-reducibility of the LWE and DLWE problems for arbitrary formula_4 and formula_43. Given samples formula_72 from formula_51, it is easy to see that formula_74 are samples from formula_75.\n\nSo, suppose there was some set formula_76 such that formula_77, and for distributions formula_78, with formula_79, DLWE was easy.\n\nThen there would be some distinguisher formula_80, who, given samples formula_81, could tell whether they were uniformly random or from formula_78. If we need to distinguish uniformly random samples from formula_51, where formula_40 is chosen uniformly at random from formula_85, we could simply try different values formula_86 sampled uniformly at random from formula_85, calculate formula_74 and feed these samples to formula_80. Since formula_90 comprises a large fraction of formula_85, with high probability, if we choose a polynomial number of values for formula_92, we will find one such that formula_93, and formula_80 will successfully distinguish the samples.\n\nThus, no such formula_90 can exist, meaning LWE and DLWE are (up to a polynomial factor) as hard in the average case as they are in the worst case.\n\nFor a n-dimensional lattice formula_96, let \"smoothing parameter\" formula_97 denote the smallest formula_98 such that formula_99 where formula_100 is the dual of formula_96 and formula_31 is extended to sets by summing over function values at each element in the set. Let formula_103 denote the discrete Gaussian distribution on formula_96 of width formula_61 for a lattice formula_96 and real formula_107. The probability of each formula_108 is proportional to formula_109.\n\nThe \"discrete Gaussian sampling problem\"(DGS) is defined as follows: An instance of formula_110 is given by an formula_3-dimensional lattice formula_96 and a number formula_113. The goal is to output a sample from formula_103. Regev shows that there is a reduction from formula_115 to formula_116 for any function formula_117.\n\nRegev then shows that there exists an efficient quantum algorithm for formula_118 given access to an oracle for formula_119 for integer formula_4 and formula_121 such that formula_122. This implies the hardness for formula_123. Although the proof of this assertion works for any formula_4, for creating a cryptosystem, the formula_4 has to be polynomial in formula_3.\n\nPeikert proves that there is a probabilistic polynomial time reduction from the formula_127 problem in the worst case to solving formula_119 using formula_129 samples for parameters formula_121, formula_131, formula_132 and formula_133.\n\nThe LWE problem serves as a versatile problem used in construction of several cryptosystems. In 2005, Regev showed that the decision version of LWE is hard assuming quantum hardness of the lattice problems formula_134 (for formula_135 as above) and formula_136 with t=Õ(n/formula_137). In 2009, Peikert proved a similar result assuming only the classical hardness of the related problem formula_127. The disadvantage of Peikert's result is that it bases itself on a non-standard version of an easier (when compared to SIVP) problem GapSVP.\n\nRegev proposed a public-key cryptosystem based on the hardness of the LWE problem. The cryptosystem as well as the proof of security and correctness are completely classical. The system is characterized by formula_139 and a probability distribution formula_43 on formula_15. The setting of the parameters used in proofs of correctness and security is\n\nThe cryptosystem is then defined by:\n\nThe proof of correctness follows from choice of parameters and some probability analysis. The proof of security is by reduction to the decision version of LWE: an algorithm for distinguishing between encryptions (with above parameters) of formula_161 and formula_165 can be used to distinguish between formula_168 and the uniform distribution over formula_169\n\nPeikert proposed a system that is secure even against any chosen-ciphertext attack.\n\nThe idea of using LWE and Ring LWE for key exchange was proposed and filed at the University of Cincinnati in 2011 by Jintai Ding. The idea comes from the associativity of matrix multiplications, and the errors are used to provide the security. The paper appeared in 2012 after a provisional patent application was filed in 2012.\n\nThe security of the protocol is proven based on the hardness of solving LWE problem. In 2014, Peikert presented a key transport scheme following the same basic idea of Ding's, where the new idea of sending additional 1 bit signal for rounding in Ding's construction is also utilized. The \"new hope\" implementation selected for Google's post quantum experiment, uses Peikert's scheme with variation in the error distribution.\n\n", "id": "23864530", "title": "Learning with errors"}
{"url": "https://en.wikipedia.org/wiki?curid=22795783", "text": "CIML community portal\n\nThe computational intelligence and machine learning (CIML) community portal is an international multi-university initiative. Its primary purpose is to help facilitate a virtual scientific community infrastructure for all those involved with, or interested in, computational intelligence and machine learning. This includes CIML research-, education, and application-oriented resources residing at the portal and others that are linked from the CIML site.\n\nThe CIML community portal was created to facilitate an online virtual scientific community wherein anyone interested in CIML can share research, obtain resources, or simply learn more. The effort is currently led by Jacek Zurada (principal investigator), with Rammohan Ragade and Janusz Wojtusiak, aided by a team of 25 volunteer researchers from 13 different countries.\n\nThe ultimate goal of the CIML community portal is to accommodate and cater to a broad range of users, including experts, students, the public, and outside researchers interested in using CIML methods and software tools. Each community member and user will be guided through the portal resources and tools based on their respective CIML experience (e.g. expert, student, outside researcher) and goals (e.g. collaboration, education). A preliminary version of the community's portal, with limited capabilities, is now operational and available for users. All electronic resources on the portal are peer-reviewed to ensure high quality and cite-ability for literature.\n\n\n", "id": "22795783", "title": "CIML community portal"}
{"url": "https://en.wikipedia.org/wiki?curid=25050663", "text": "Learning to rank\n\nLearning to rank or machine-learned ranking (MLR) is the application of machine learning, typically supervised, semi-supervised or reinforcement learning, in the construction of ranking models for information retrieval systems. Training data consists of lists of items with some partial order specified between items in each list. This order is typically induced by giving a numerical or ordinal score or a binary judgment (e.g. \"relevant\" or \"not relevant\") for each item. The ranking model's purpose is to rank, i.e. produce a permutation of items in new, unseen lists in a way which is \"similar\" to rankings in the training data in some sense.\n\nRanking is a central part of many information retrieval problems, such as document retrieval, collaborative filtering, sentiment analysis, and online advertising.\n\nA possible architecture of a machine-learned search engine is shown in the figure to the right.\n\nTraining data consists of queries and documents matching them together with relevance degree of each match. It may be prepared manually by human \"assessors\" (or \"raters\", as Google calls them),\n\nwho check results for some queries and determine relevance of each result. It is not feasible to check the relevance of all documents, and so typically a technique called pooling is used — only the top few documents, retrieved by some existing ranking models are checked. Alternatively, training data may be derived automatically by analyzing \"clickthrough logs\" (i.e. search results which got clicks from users), \"query chains\", or such search engines' features as Google's SearchWiki.\n\nTraining data is used by a learning algorithm to produce a ranking model which computes the relevance of documents for actual queries.\n\nTypically, users expect a search query to complete in a short time (such as a few hundred milliseconds for web search), which makes it impossible to evaluate a complex ranking model on each document in the corpus, and so a two-phase scheme is used. First, a small number of potentially relevant documents are identified using simpler retrieval models which permit fast query evaluation, such as the vector space model, boolean model, weighted AND, or BM25. This phase is called \"top-formula_1 document retrieval\" and many heuristics were proposed in the literature to accelerate it, such as using a document's static quality score and tiered indexes. In the second phase, a more accurate but computationally expensive machine-learned model is used to re-rank these documents.\n\nLearning to rank algorithms have been applied in areas other than information retrieval:\n\nFor the convenience of MLR algorithms, query-document pairs are usually represented by numerical vectors, which are called \"feature vectors\". Such an approach is sometimes called \"bag of features\" and is analogous to the bag of words model and vector space model used in information retrieval for representation of documents.\n\nComponents of such vectors are called \"features\", \"factors\" or \"ranking signals\". They may be divided into three groups (features from document retrieval are shown as examples):\n\nSome examples of features, which were used in the well-known LETOR dataset:\n\nSelecting and designing good features is an important area in machine learning, which is called feature engineering.\n\nThere are several measures (metrics) which are commonly used to judge how well an algorithm is doing on training data and to compare the performance of different MLR algorithms. Often a learning-to-rank problem is reformulated as an optimization problem with respect to one of these metrics.\n\nExamples of ranking quality measures:\n\nDCG and its normalized variant NDCG are usually preferred in academic research when multiple levels of relevance are used. Other metrics such as MAP, MRR and precision, are defined only for binary judgments.\n\nRecently, there have been proposed several new evaluation metrics which claim to model user's satisfaction with search results better than the DCG metric:\nBoth of these metrics are based on the assumption that the user is more likely to stop looking at search results after examining a more relevant document, than after a less relevant document.\n\nTie-Yan Liu of Microsoft Research Asia has analyzed existing algorithms for learning to rank problems in his paper \"Learning to Rank for Information Retrieval\". He categorized them into three groups by their input representation and loss function: the pointwise, pairwise, and listwise approach. In practice, listwise approaches often outperform pairwise approaches and pointwise approaches. This statement was further supported by a large scale experiment on the performance of different learning-to-rank methods on a large collection of benchmark data sets .\n\nIn this case, it is assumed that each query-document pair in the training data has a numerical or ordinal score. Then the learning-to-rank problem can be approximated by a regression problem — given a single query-document pair, predict its score.\n\nA number of existing supervised machine learning algorithms can be readily used for this purpose. Ordinal regression and classification algorithms can also be used in pointwise approach when they are used to predict the score of a single query-document pair, and it takes a small, finite number of values.\n\nIn this case, the learning-to-rank problem is approximated by a classification problem — learning a binary classifier that can tell which document is better in a given pair of documents. The goal is to minimize the average number of inversions in ranking.\n\nThese algorithms try to directly optimize the value of one of the above evaluation measures, averaged over all queries in the training data. This is difficult because most evaluation measures are not continuous functions with respect to ranking model's parameters, and so continuous approximations or bounds on evaluation measures have to be used.\n\nA partial list of published learning-to-rank algorithms is shown below with years of first publication of each method:\n\nNote: as most supervised learning algorithms can be applied to pointwise case, only those methods which are specifically designed with ranking in mind are shown above.\n\nNorbert Fuhr introduced the general idea of MLR in 1992, describing learning approaches in information retrieval as a generalization of parameter estimation; a specific variant of this approach (using polynomial regression) had been published by him three years earlier. Bill Cooper proposed logistic regression for the same purpose in 1992 and used it with his Berkeley research group to train a successful ranking function for TREC. Manning et al. suggest that these early works achieved limited results in their time due to little available training data and poor machine learning techniques.\n\nSeveral conferences, such as NIPS, SIGIR and ICML had workshops devoted to the learning-to-rank problem since mid-2000s (decade).\n\nCommercial web search engines began using machine learned ranking systems since the 2000s (decade). One of the first search engines to start using it was AltaVista (later its technology was acquired by Overture, and then Yahoo), which launched a gradient boosting-trained ranking function in April 2003.\n\nBing's search is said to be powered by RankNet algorithm, which was invented at Microsoft Research in 2005.\n\nIn November 2009 a Russian search engine Yandex announced that it had significantly increased its search quality due to deployment of a new proprietary MatrixNet algorithm, a variant of gradient boosting method which uses oblivious decision trees. Recently they have also sponsored a machine-learned ranking competition \"Internet Mathematics 2009\" based on their own search engine's production data. Yahoo has announced a similar competition in 2010.\n\nAs of 2008, Google's Peter Norvig denied that their search engine exclusively relies on machine-learned ranking. Cuil's CEO, Tom Costello, suggests that they prefer hand-built models because they can outperform machine-learned models when measured against metrics like click-through rate or time on landing page, which is because machine-learned models \"learn what people say they like, not what people actually like\".\n\nIn January 2017 the technology was included in the open source search engine Apache Solr™, thus making machine learned search rank widely accessible also for enterprise search.\n\n\n", "id": "25050663", "title": "Learning to rank"}
{"url": "https://en.wikipedia.org/wiki?curid=960361", "text": "Transduction (machine learning)\n\nIn logic, statistical inference, and supervised learning,\ntransduction or transductive inference is reasoning from\nobserved, specific (training) cases to specific (test) cases. In contrast,\ninduction is reasoning from observed training cases\nto general rules, which are then applied to the test cases. The distinction is\nmost interesting in cases where the predictions of the transductive model are\nnot achievable by any inductive model. Note that this is caused by transductive\ninference on different test sets producing mutually inconsistent predictions.\n\nTransduction was introduced by Vladimir Vapnik in the 1990s, motivated by\nhis view that transduction is preferable to induction since, according to him, induction requires\nsolving a more general problem (inferring a function) before solving a more\nspecific problem (computing outputs for new cases): \"When solving a problem of\ninterest, do not solve a more general problem as an intermediate step. Try to\nget the answer that you really need but not a more general one.\" A similar\nobservation had been made earlier by Bertrand Russell:\n\"we shall reach the conclusion that Socrates is mortal with a greater approach to \ncertainty if we make our argument purely inductive than if we go by way of 'all men are mortal' and then use \ndeduction\" (Russell 1912, chap VII).\n\nAn example of learning which is not inductive would be in the case of binary\nclassification, where the inputs tend to cluster in two groups. A large set of\ntest inputs may help in finding the clusters, thus providing useful information\nabout the classification labels. The same predictions would not be obtainable\nfrom a model which induces a function based only on the training cases. Some\npeople may call this an example of the closely related semi-supervised learning, since Vapnik's motivation is quite different. An example of an algorithm in this category is the Transductive Support Vector Machine (TSVM).\n\nA third possible motivation which leads to transduction arises through the need\nto approximate. If exact inference is computationally prohibitive, one may at\nleast try to make sure that the approximations are good at the test inputs. In\nthis case, the test inputs could come from an arbitrary distribution (not\nnecessarily related to the distribution of the training inputs), which wouldn't\nbe allowed in semi-supervised learning. An example of an algorithm falling in\nthis category is the Bayesian Committee Machine (BCM).\n\nThe following example problem contrasts some of the unique properties of transduction against induction.\n\nA collection of points is given, such that some of the points are labeled (A, B, or C), but most of the points are unlabeled (?). The goal is to predict appropriate labels for all of the unlabeled points.\n\nThe inductive approach to solving this problem is to use the labeled points to train a supervised learning algorithm, and then have it predict labels for all of the unlabeled points. With this problem, however, the supervised learning algorithm will only have five labeled points to use as a basis for building a predictive model. It will certainly struggle to build a model that captures the structure of this data. For example, if a nearest-neighbor algorithm is used, then the points near the middle will be labeled \"A\" or \"C\", even though it is apparent that they belong to the same cluster as the point labeled \"B\".\n\nTransduction has the advantage of being able to consider all of the points, not just the labeled points, while performing the labeling task. In this case, transductive algorithms would label the unlabeled points according to the clusters to which they naturally belong. The points in the middle, therefore, would most likely be labeled \"B\", because they are packed very close to that cluster.\n\nAn advantage of transduction is that it may be able to make better predictions with fewer labeled points, because it uses the natural breaks found in the unlabeled points. One disadvantage of transduction is that it builds no predictive model. If a previously unknown point is added to the set, the entire transductive algorithm would need to be repeated with all of the points in order to predict a label. This can be computationally expensive if the data is made available incrementally in a stream. Further, this might cause the predictions of some of the old points to change (which may be good or bad, depending on the application). A supervised learning algorithm, on the other hand, can label new points instantly, with very little computational cost.\n\nTransduction algorithms can be broadly divided into two categories: those that seek to assign discrete labels to unlabeled points, and those that seek to regress continuous labels for unlabeled points. Algorithms that seek to predict discrete labels tend to be derived by adding partial supervision to a clustering algorithm. These can be further subdivided into two categories: those that cluster by partitioning, and those that cluster by agglomerating. Algorithms that seek to predict continuous labels tend to be derived by adding partial supervision to a manifold learning algorithm.\n\nPartitioning transduction can be thought of as top-down transduction. It is a semi-supervised extension of partition-based clustering. It is typically performed as follows:\n\nOf course, any reasonable partitioning technique could be used with this algorithm. Max flow min cut partitioning schemes are very popular for this purpose.\n\nAgglomerative transduction can be thought of as bottom-up transduction. It is a semi-supervised extension of agglomerative clustering. It is typically performed as follows:\n\nManifold-learning-based transduction is still a very young field of research.\n\n\n\n", "id": "960361", "title": "Transduction (machine learning)"}
{"url": "https://en.wikipedia.org/wiki?curid=416612", "text": "Cross-validation (statistics)\n\nCross-validation, sometimes called rotation estimation, is a model validation technique for assessing how the results of a statistical analysis will generalize to an independent data set. It is mainly used in settings where the goal is prediction, and one wants to estimate how accurately a predictive model will perform in practice. In a prediction problem, a model is usually given a dataset of \"known data\" on which training is run (\"training dataset\"), and a dataset of \"unknown data\" (or \"first seen\" data) against which the model is tested (called the validation dataset or \"testing set\"). The goal of cross validation is to define a dataset to \"test\" the model in the training phase (i.e., the \"validation set\"), in order to limit problems like overfitting , give an insight on how the model will generalize to an independent dataset (i.e., an unknown dataset, for instance from a real problem), etc.\n\nOne round of cross-validation involves partitioning a sample of data into complementary subsets, performing the analysis on one subset (called the \"training set\"), and validating the analysis on the other subset (called the \"validation set\" or \"testing set\"). To reduce variability, in most methods multiple rounds of cross-validation are performed using different partitions, and the validation results are combined (e.g. averaged) over the rounds to estimate a final predictive model.\n\nOne of the main reasons for using cross-validation instead of using the conventional validation (e.g. partitioning the data set into two sets of 70% for training and 30% for test) is that there is not enough data available to partition it into separate training and test sets without losing significant modelling or testing capability. In these cases, a fair way to properly estimate model prediction performance is to use cross-validation as a powerful general technique.\n\nIn summary, cross-validation combines (averages) measures of fit (prediction error) to derive a more accurate estimate of model prediction performance.\n\nSuppose we have a model with one or more unknown parameters, and a data set to which the model can be fit (the training data set). The fitting process optimizes the model parameters to make the model fit the training data as well as possible. If we then take an independent sample of validation data from the same population as the training data, it will generally turn out that the model does not fit the validation data as well as it fits the training data. This is called overfitting , and is particularly likely to happen when the size of the training data set is small, or when the number of parameters in the model is large. Cross-validation is a way to predict the fit of a model to a hypothetical validation set when an explicit validation set is not available.\n\nLinear regression provides a simple illustration of overfitting . In linear regression we have real \"response values\" \"y\", ..., \"y\", and \"n\" \"p\"-dimensional vector \"covariates\" x, ..., x. The components of the vectors x are denoted \"x\", ..., \"x\". If we use least squares to fit a function in the form of a hyperplane \"y\" = \"a\" + βx to the data (x, \"y\"), we could then assess the fit using the mean squared error (MSE). The MSE for given estimated parameter values \"a\" and β on the training set (x, \"y\") is\n\nIf the model is correctly specified, it can be shown under mild assumptions that the expected value of the MSE for the training set is (\"n\" − \"p\" − 1)/(\"n\" + \"p\" + 1) < 1 times the expected value of the MSE for the validation set (the expected value is taken over the distribution of training sets). Thus if we fit the model and compute the MSE on the training set, we will get an optimistically biased assessment of how well the model will fit an independent data set. This biased estimate is called the \"in-sample\" estimate of the fit, whereas the cross-validation estimate is an \"out-of-sample\" estimate.\n\nSince in linear regression it is possible to directly compute the factor (\"n\" − \"p\" − 1)/(\"n\" + \"p\" + 1) by which the training MSE underestimates the validation MSE, cross-validation is not practically useful in that setting (however, cross-validation remains useful in the context of linear regression in that it can be used to select an optimally regularized cost function).\nIn most other regression procedures (e.g. logistic regression), there is no simple formula to make such an adjustment. Cross-validation is, thus, a generally applicable way to predict the performance of a model on a validation set using computation in place of mathematical analysis.\n\nTwo types of cross-validation can be distinguished, exhaustive and non-exhaustive cross-validation.\n\nExhaustive cross-validation methods are cross-validation methods which learn and test on all possible ways to divide the original sample into a training and a validation set.\n\nLeave-\"p\"-out cross-validation (LpO CV) involves using \"p\" observations as the validation set and the remaining observations as the training set. This is repeated on all ways to cut the original sample on a validation set of \"p\" observations and a training set.\n\nLpO cross-validation requires training and validating the model formula_2 times, where \"n\" is the number of observations in the original sample, and where formula_2 is the binomial coefficient. For \"p\" > 1 and for even moderately large \"n\", LpO CV can become computationally infeasible. For example, with \"n\" = 100 and \"p\" = 30 = 30 percent of 100 (as suggested above), formula_4\n\nLeave-\"one\"-out cross-validation (LOOCV) is a particular case of leave-\"p\"-out cross-validation with \"p\" = 1. The process looks similar to jackknife; however, with cross-validation you compute a statistic on the left-out sample(s), while with jackknifing you compute a statistic from the kept samples only.\n\nLOO cross-validation does not have the same problem of excessive computation time as general LpO cross-validation because formula_5.\n\nNon-exhaustive cross validation methods do not compute all ways of splitting the original sample. Those methods are approximations of leave-\"p\"-out cross-validation.\n\nIn \"k\"-fold cross-validation, the original sample is randomly partitioned into \"k\" equal sized subsamples.\nOf the \"k\" subsamples, a single subsample is retained as the validation data for testing the model, and the remaining \"k\" − 1 subsamples are used as training data. The cross-validation process is then repeated \"k\" times (the \"folds\"), with each of the \"k\" subsamples used exactly once as the validation data. The \"k\" results from the folds can then be averaged to produce a single estimation. The advantage of this method over repeated random sub-sampling (see below) is that all observations are used for both training and validation, and each observation is used for validation exactly once. 10-fold cross-validation is commonly used, but in general \"k\" remains an unfixed parameter.\n\nFor example, setting \"k\" = \"2\" results in 2-fold cross-validation. In 2-fold cross-validation, we randomly shuffle the dataset into two sets \"d\" and \"d\", so that both sets are equal size (this is usually implemented by shuffling the data array and then splitting it in two). We then train on \"d\" and validate on \"d\", followed by training on \"d\" and validating on \"d\".\n\nWhen \"k\" = \"n\" (the number of observations), the \"k\"-fold cross-validation is exactly the leave-one-out cross-validation.\n\nIn \"stratified\" \"k\"-fold cross-validation, the folds are selected so that the mean response value is approximately equal in all the folds. In the case of a dichotomous classification, this means that each fold contains roughly the same proportions of the two types of class labels.\n\nIn the holdout method, we randomly assign data points to two sets \"d\" and \"d\", usually called the training set and the test set, respectively. The size of each of the sets is arbitrary although typically the test set is smaller than the training set. We then train on \"d\" and test on \"d\".\n\nIn typical cross-validation, multiple runs are aggregated together; in contrast, the holdout method, in isolation, involves a single run. While the holdout method can be framed as \"the simplest kind of cross-validation\", many sources instead classify holdout as a type of simple validation, rather than a simple or degenerate form of cross-validation.\n\nThis method, also known as Monte Carlo cross-validation, randomly splits the dataset into training and validation data. For each such split, the model is fit to the training data, and predictive accuracy is assessed using the validation data. The results are then averaged over the splits. The advantage of this method (over \"k\"-fold cross validation) is that the proportion of the training/validation split is not dependent on the number of iterations (folds). The disadvantage of this method is that some observations may never be selected in the validation subsample, whereas others may be selected more than once. In other words, validation subsets may overlap. This method also exhibits Monte Carlo variation, meaning that the results will vary if the analysis is repeated with different random splits.\n\nAs the number of random splits approaches infinity, the result of repeated random sub-sampling validation tends towards that of leave-p-out cross-validation.\n\nIn a stratified variant of this approach, the random samples are generated in such a way that the mean response value (i.e. the dependent variable in the regression) is equal in the training and testing sets. This is particularly useful if the responses are dichotomous with an unbalanced representation of the two response values in the data.\n\nThe goal of cross-validation is to estimate the expected level of fit of a model to a data set that is independent of the data that were used to train the model. It can be used to estimate any quantitative measure of fit that is appropriate for the data and model. For example, for binary classification problems, each case in the validation set is either predicted correctly or incorrectly. In this situation the misclassification error rate can be used to summarize the fit, although other measures like positive predictive value could also be used. When the value being predicted is continuously distributed, the mean squared error, root mean squared error or median absolute deviation could be used to summarize the errors.\n\nCross-validation can be used to compare the performances of different predictive modeling procedures. For example, suppose we are interested in optical character recognition, and we are considering using either support vector machines (SVM) or \"k\" nearest neighbors (KNN) to predict the true character from an image of a handwritten character. Using cross-validation, we could objectively compare these two methods in terms of their respective fractions of misclassified characters. If we simply compared the methods based on their in-sample error rates, the KNN method would likely appear to perform better, since it is more flexible and hence more prone to overfitting compared to the SVM method.\n\nCross-validation can also be used in \"variable selection\". Suppose we are using the expression levels of 20 proteins to predict whether a cancer patient will respond to a drug. A practical goal would be to determine which subset of the 20 features should be used to produce the best predictive model. For most modeling procedures, if we compare feature subsets using the in-sample error rates, the best performance will occur when all 20 features are used. However under cross-validation, the model with the best fit will generally include only a subset of the features that are deemed truly informative.\n\nSuppose we choose a measure of fit \"F\", and use cross-validation to produce an estimate \"F\" of the expected fit \"EF\" of a model to an independent data set drawn from the same population as the training data. If we imagine sampling multiple independent training sets following the same distribution, the resulting values for \"F\" will vary. The statistical properties of \"F\" result from this variation.\n\nThe cross-validation estimator \"F\" is very nearly unbiased for \"EF\" . The reason that it is slightly biased is that the training set in cross-validation is slightly smaller than the actual data set (e.g. for LOOCV the training set size is \"n\" − 1 when there are \"n\" observed cases). In nearly all situations, the effect of this bias will be conservative in that the estimated fit will be slightly biased in the direction suggesting a poorer fit. In practice, this bias is rarely a concern.\n\nThe variance of \"F\" can be large. For this reason, if two statistical procedures are compared based on the results of cross-validation, it is important to note that the procedure with the better estimated performance may not actually be the better of the two procedures (i.e. it may not have the better value of \"EF\"). Some progress has been made on constructing confidence intervals around cross-validation estimates, but this is considered a difficult problem.\n\nMost forms of cross-validation are straightforward to implement as long as an implementation of the prediction method being studied is available. In particular, the prediction method can be a \"black box\" – there is no need to have access to the internals of its implementation. If the prediction method is expensive to train, cross-validation can be very slow since the training must be carried out repeatedly. In some cases such as least squares and kernel regression, cross-validation can be sped up significantly by pre-computing certain values that are needed repeatedly in the training, or by using fast \"updating rules\" such as the Sherman–Morrison formula. However one must be careful to preserve the \"total blinding\" of the validation set from the training procedure, otherwise bias may result. An extreme example of accelerating cross-validation occurs in linear regression, where the results of cross-validation have a closed-form expression known as the \"prediction residual error sum of squares\" (PRESS).\n\nCross-validation only yields meaningful results if the validation set and training set are drawn from the same population and only if human biases are controlled.\n\nIn many applications of predictive modeling, the structure of the system being studied evolves over time (i.e. it is \"non-stationary\"). Both of these can introduce systematic differences between the training and validation sets. For example, if a model for predicting stock values is trained on data for a certain five-year period, it is unrealistic to treat the subsequent five-year period as a draw from the same population. As another example, suppose a model is developed to predict an individual's risk for being diagnosed with a particular disease within the next year. If the model is trained using data from a study involving only a specific population group (e.g. young people or males), but is then applied to the general population, the cross-validation results from the training set could differ greatly from the actual predictive performance.\n\nIn many applications, models also may be incorrectly specified and vary as a function of modeler biases and/or arbitrary choices. When this occurs, there may be an illusion that the system changes in external samples, whereas the reason is that the model has missed a critical predictor and/or included a confounded predictor. New evidence is that cross-validation by itself is not very predictive of external validity, whereas a form of experimental validation known as swap sampling that does control for human bias can be much more predictive of external validity. As defined by this large MAQC-II study across 30,000 models, swap sampling incorporates cross-validation in the sense that predictions are tested across independent training and validation samples. Yet, models are also developed across these independent samples and by modelers who are blinded to one another. When there is a mismatch in these models developed across these swapped training and validation samples as happens quite frequently, MAQC-II shows that this will be much more predictive of poor external predictive validity than traditional cross-validation.\n\nThe reason for the success of the swapped sampling is a built-in control for human biases in model building. In addition to placing too much faith in predictions that may vary across modelers and lead to poor external validity due to these confounding modeler effects, these are some other ways that cross-validation can be misused:\n\n\nSince the order of the data is important, cross-validation might be problematic for time-series models. A more appropriate approach might be to use forward chaining.\n\n", "id": "416612", "title": "Cross-validation (statistics)"}
{"url": "https://en.wikipedia.org/wiki?curid=2291650", "text": "Predictive learning\n\nPredictive learning is a technique of machine learning in which an agent tries to build a model of its environment by trying out different actions in various circumstances. It uses knowledge of the effects its actions appear to have, turning them into planning operators. These allow the agent to act purposefully in its world. Predictive learning is one attempt to learn with a minimum of pre-existing mental structure. It may have been inspired by Piaget's account of how children construct knowledge of the world by interacting with it. Gary Drescher's book 'Made-up Minds' was seminal for the area.\n\nAnother more recent predictive learning theory is Jeff Hawkins' memory-prediction framework, which is laid out in his On Intelligence.\n", "id": "2291650", "title": "Predictive learning"}
{"url": "https://en.wikipedia.org/wiki?curid=1455062", "text": "Empirical risk minimization\n\nEmpirical risk minimization (ERM) is a principle in statistical learning theory which defines a family of learning algorithms and is used to give theoretical bounds on the performance of learning algorithms.\n\nConsider the following situation, which is a general setting of many supervised learning problems. We have two spaces of objects formula_1 and formula_2 and would like to learn a function formula_3 (often called \"hypothesis\") which outputs an object formula_4, given formula_5. To do so, we have at our disposal a \"training set\" of a few examples formula_6 where formula_7 is an input and formula_8 is the corresponding response that we wish to get from formula_9.\n\nTo put it more formally, we assume that there is a joint probability distribution formula_10 over formula_1 and formula_2, and that the training set consists of formula_13 instances formula_6 drawn i.i.d. from formula_10. Note that the assumption of a joint probability distribution allows us to model uncertainty in predictions (e.g. from noise in data) because formula_16 is not a deterministic function of formula_17, but rather a random variable with conditional distribution formula_18 for a fixed formula_17.\n\nWe also assume that we are given a non-negative real-valued loss function formula_20 which measures how different the prediction formula_21 of a hypothesis is from the true outcome formula_22 The risk associated with hypothesis formula_23 is then defined as the expectation of the loss function:\n\nA loss function commonly used in theory is the 0-1 loss function: formula_25, where formula_26 is the indicator notation.\n\nThe ultimate goal of a learning algorithm is to find a hypothesis formula_27 among a fixed class of functions formula_28 for which the risk formula_29 is minimal:\n\nIn general, the risk formula_29 cannot be computed because the distribution formula_10 is unknown to the learning algorithm (this situation is referred to as agnostic learning). However, we can compute an approximation, called \"empirical risk\", by averaging the loss function on the training set:\n\n\"Empirical risk minimization\" principle states that the learning algorithm should choose a hypothesis formula_34 which minimizes the empirical risk:\nThus the learning algorithm defined by the ERM principle consists in solving the above optimization problem.\n\nEmpirical risk minimization for a classification problem with 0-1 loss function is known to be an NP-hard problem even for such relatively simple class of functions as linear classifiers. Though, it can be solved efficiently when minimal empirical risk is zero, i.e. data is linearly separable.\n\nIn practice, machine learning algorithms cope with that either by employing a convex approximation to 0-1 loss function (like hinge loss for SVM), which is easier to optimize, or by posing assumptions on the distribution formula_10 (and thus stop being agnostic learning algorithms to which the above result applies).\n\nMaximum likelihood estimation\n", "id": "1455062", "title": "Empirical risk minimization"}
{"url": "https://en.wikipedia.org/wiki?curid=24825162", "text": "Product of experts\n\nProduct of experts (PoE) is a machine learning technique. It models a probability distribution by combining the output from several simpler distributions.\nIt was proposed by Geoff Hinton, along with an algorithm for training the parameters of such a system.\n\nThe core idea is to combine several probability distributions (\"experts\") by multiplying their density functions—making the PoE classification similar to an \"and\" operation. This allows each expert to make decisions on the basis of a few dimensions without having to cover the full dimensionality of a problem.\n\nThis is related to (but quite different from) a mixture model, where several probability distributions are combined via an \"or\" operation, which is a weighted sum of their density functions.\n", "id": "24825162", "title": "Product of experts"}
{"url": "https://en.wikipedia.org/wiki?curid=233497", "text": "Unsupervised learning\n\nUnsupervised machine learning is the machine learning task of inferring a function to describe hidden structure from \"unlabeled\" data (a classification or categorization is not included in the observations). Since the examples given to the learner are unlabeled, there is no evaluation of the accuracy of the structure that is output by the relevant algorithm—which is one way of distinguishing unsupervised learning from supervised learning and reinforcement learning.\n\nA central case of unsupervised learning is the problem of density estimation in statistics, though unsupervised learning encompasses many other problems (and solutions) involving summarizing and explaining key features of the data.\n\nApproaches to unsupervised learning include:\n\n\nThe classical example of unsupervised learning in the study of both natural and artificial neural networks is subsumed by Donald Hebb's principle, that is, neurons that fire together wire together. In Hebbian learning, the connection is reinforced irrespective of an error, but is exclusively a function of the coincidence between action potentials between the two neurons. A similar version that modifies synaptic weights takes into account the time between the action potentials (spike-timing-dependent plasticity or STDP). Hebbian Learning has been hypothesized to underlie a range of cognitive functions, such as pattern recognition and experiential learning.\n\nAmong neural network models, the self-organizing map (SOM) and adaptive resonance theory (ART) are commonly used unsupervised learning algorithms. The SOM is a topographic organization in which nearby locations in the map represent inputs with similar properties. The ART model allows the number of clusters to vary with problem size and lets the user control the degree of similarity between members of the same clusters by means of a user-defined constant called the vigilance parameter. ART networks are also used for many pattern recognition tasks, such as automatic target recognition and seismic signal processing. The first version of ART was \"ART1\", developed by Carpenter and Grossberg (1988).\n\nOne of the statistical approaches for unsupervised learning is the method of moments. In the method of moments, the unknown parameters (of interest) in the model are related to the moments of one or more random variables, and thus, these unknown parameters can be estimated given the moments. The moments are usually estimated from samples empirically. The basic moments are first and second order moments. For a random vector, the first order moment is the mean vector, and the second order moment is the covariance matrix (when the mean is zero). Higher order moments are usually represented using tensors which are the generalization of matrices to higher orders as multi-dimensional arrays.\n\nIn particular, the method of moments is shown to be effective in learning the parameters of latent variable models.\nLatent variable models are statistical models where in addition to the observed variables, a set of latent variables also exists which is not observed. A highly practical example of latent variable models in machine learning is the topic modeling which is a statistical model for generating the words (observed variables) in the document based on the topic (latent variable) of the document. In the topic modeling, the words in the document are generated according to different statistical parameters when the topic of the document is changed. It is shown that method of moments (tensor decomposition techniques) consistently recover the parameters of a large class of latent variable models under some assumptions.\n\nThe Expectation–maximization algorithm (EM) is also one of the most practical methods for learning latent variable models. However, it can get stuck in local optima, and it is not guaranteed that the algorithm will converge to the true unknown parameters of the model. In contrast, for the method of moments, the global convergence is guaranteed under some conditions.\n\nBehavioral-based detection in network security has become a good application area for a combination of supervised- and unsupervised-machine learning. This is because the amount of data for a human security analyst to analyze is impossible (measured in terabytes per day) to review to find patterns and anomalies. According to Giora Engel, co-founder of LightCyber, in a \"Dark Reading\" article, \"The great promise machine learning holds for the security industry is its ability to detect advanced and unknown attacks -- particularly those leading to data breaches.\" The basic premise is that a motivated attacker will find their way into a network (generally by compromising a user's computer or network account through phishing, social engineering or malware). The security challenge then becomes finding the attacker by their operational activities, which include reconnaissance, lateral movement, command & control and exfiltration. These activities—especially reconnaissance and lateral movement—stand in contrast to an established baseline of \"normal\" or \"good\" activity for each user and device on the network. The role of machine learning is to create ongoing profiles for users and devices and then find meaningful anomalies.\n\n\n", "id": "233497", "title": "Unsupervised learning"}
{"url": "https://en.wikipedia.org/wiki?curid=4615464", "text": "Meta learning (computer science)\n\nMeta learning is a subfield of machine learning where automatic learning algorithms are applied on metadata about machine learning experiments. As of 2017 the term had not found a standard interpretation, however the main goal is to use such metadata to understand how automatic learning can become flexible in solving learning problems, hence to improve the performance of existing learning algorithms or to learn (induce) the learning algorithm itself, hence the alternative term learning to learn.\n\nFlexibility is important because each learning algorithm is based on a set of assumptions about the data, its inductive bias. This means that it will only learn well if the bias matches the learning problem. A learning algorithm may perform very well in one domain, but not on the next. This poses strong restrictions on the use of machine learning or data mining techniques, since the relationship between the learning problem (often some kind of database) and the effectiveness of different learning algorithms is not yet understood.\n\nBy using different kinds of metadata, like properties of the learning problem, algorithm properties (like performance measures), or patterns previously derived from the data, it is possible to learn, select, alter or combine different learning algorithms to effectively solve a given learning problem. Critiques of meta learning approaches bear a strong resemblance to the critique of metaheuristic, a possibly related problem. A good analogy to meta-learning, and the inspiration for Bengio et al.'s early work (1991), considers that genetic evolution learns the learning procedure encoded in genes and executed in each individual's brain.\n\nA proposed definition for a meta learning system combines three requirements:\n\"Bias\" refers to the assumptions that influence the choice of explanatory hypotheses and not the notion of bias represented in the bias-variance dilemma. Meta learning is concerned with two aspects of learning bias.\n\nSome views on meta learning:\n\n\n\n", "id": "4615464", "title": "Meta learning (computer science)"}
{"url": "https://en.wikipedia.org/wiki?curid=2854828", "text": "Multi-armed bandit\n\nIn probability theory, the multi-armed bandit problem (sometimes called the \"K\"-<ref name=\"doi10.1023/A:1013689704352\"></ref> or \"N\"-armed bandit problem) is a problem in which a gambler at a row of slot machines (sometimes known as \"one-armed bandits\") has to decide which machines to play, how many times to play each machine and in which order to play them. When played, each machine provides a random reward from a probability distribution specific to that machine. The objective of the gambler is to maximize the sum of rewards earned through a sequence of lever pulls.\n\nHerbert Robbins in 1952, realizing the importance of the problem, constructed convergent population selection strategies in \"some aspects of the sequential design of experiments\".\n\nA theorem, the Gittins index, first published by John C. Gittins, gives an optimal policy for maximizing the expected discounted reward.\n\nIn practice, multi-armed bandits have been used to model the problem of managing research projects in a large organization, like a science foundation or a pharmaceutical company. Given a fixed budget, the problem is to allocate resources among the competing projects, whose properties are only partially known at the time of allocation, but which may become better understood as time passes.\n\nIn early versions of the multi-armed bandit problem, the gambler has no initial knowledge about the machines. The crucial tradeoff the gambler faces at each trial is between \"exploitation\" of the machine that has the highest expected payoff and \"exploration\" to get more information about the expected payoffs of the other machines. The trade-off between exploration and exploitation is also faced in reinforcement learning.\n\nThe multi-armed bandit problem models an agent that simultaneously attempts to acquire new knowledge (called \"exploration\") and optimize his or her decisions based on existing knowledge (called \"exploitation\"). The agent attempts to balance these competing tasks in order to maximize his total value over the period of time considered. There are many practical applications of the bandit model, for example:\n\n\nIn these practical examples, the problem requires balancing reward maximization based on the knowledge already acquired with attempting new actions to further increase knowledge. This is known as the \"exploitation vs. exploration tradeoff\" in reinforcement learning.\n\nThe model has also been used to control dynamic allocation of resources to different projects, answering the question of which project to work on, given uncertainty about the difficulty and payoff of each possibility.\n\nOriginally considered by Allied scientists in World War II, it proved so intractable that, according to Peter Whittle, the problem was proposed to be dropped over Germany so that German scientists could also waste their time on it.\n\nThe version of the problem now commonly analyzed was formulated by Herbert Robbins in 1952.\n\nThe multi-armed bandit (short: \"bandit\" or MAB) can be seen as a set of real distributions formula_1, each distribution being associated with the rewards delivered by one of the formula_2 levers. Let formula_3 be the mean values associated with these reward distributions. The gambler iteratively plays one lever per round and observes the associated reward. The objective is to maximize the sum of the collected rewards. The horizon formula_4 is the number of rounds that remain to be played. The bandit problem is formally equivalent to a one-state Markov decision process. The regret formula_5 after formula_6 rounds is defined as the expected difference between the reward sum associated with an optimal strategy and the sum of the collected rewards: formula_7, where formula_8 is the maximal reward mean, formula_9, and formula_10 is the reward in round \"t\".\n\nA \"zero-regret strategy\" is a strategy whose average regret per round formula_11 tends to zero with probability 1 when the number of played rounds tends to infinity. Intuitively, zero-regret strategies are guaranteed to converge to a (not necessarily unique) optimal strategy if enough rounds are played.\n\nA common formulation is the \"Binary multi-armed bandit\" or \"Bernoulli multi-armed bandit,\" which issues a reward of one with probability formula_12, and otherwise a reward of zero.\n\nAnother formulation of the multi-armed bandit has each arm representing an independent Markov machine. Each time a particular arm is played, the state of that machine advances to a new one, chosen according to the Markov state evolution probabilities. There is a reward depending on the current state of the machine. In a generalisation called the \"restless bandit problem\", the states of non-played arms can also evolve over time. There has also been discussion of systems where the number of choices (about which arm to play) increases over time.\n\nComputer science researchers have studied multi-armed bandits under worst-case assumptions, obtaining algorithms to minimize regret in both finite and infinite (asymptotic) time horizons for both stochastic and non-stochastic arm payoffs.\n\nA major breakthrough was the construction of optimal population selection strategies, or policies (that possess uniformly maximum convergence rate to the population with highest mean) in the work described below.\n\nIn the paper \"Asymptotically efficient adaptive allocation rules\", Lai and Robbins (following papers of Robbins and his co-workers going back to Robbins in the year 1952) constructed convergent population selection policies that possess the fastest rate of convergence (to the population with highest mean) for the case that the population reward distributions are the one-parameter exponential family. Then, in Katehakis and Robbins simplifications of the policy and the main proof were given for the case of normal populations with known variances. The next notable progress was obtained by Burnetas and Katehakis in the paper \"Optimal adaptive policies for sequential allocation problems\", where index based policies with uniformly maximum convergence rate were constructed, under more general conditions that include the case in which the distributions of outcomes from each population depend on a vector of unknown parameters. Burnetas and Katehakis (1996) also provided an explicit solution for the important case in which the distributions of outcomes follow arbitrary (i.e., non-parametric) discrete, univariate distributions.\n\nLater in \"Optimal adaptive policies for Markov decision processes\" Burnetas and Katehakis studied the much larger model of Markov Decision Processes under partial information, where the transition law and/or the expected one period rewards may depend on unknown parameters. In this work the explicit form for a class of adaptive policies that possess uniformly maximum convergence rate properties for the total expected finite horizon reward, were constructed under sufficient assumptions of finite state-action spaces and irreducibility of the transition law. A main feature of these policies is that the choice of actions, at each state and time period, is based on indices that are inflations of the right-hand side of the estimated average reward optimality equations. These inflations have recently been called the optimistic approach in the work of Tewari and Bartlett, Ortner Filippi, Cappé, and Garivier, and Honda and Takemura.\n\nMany strategies exist which provide an approximate solution to the bandit problem, and can be put into the four broad categories detailed below.\n\nSemi-uniform strategies were the earliest (and simplest) strategies discovered to approximately solve the bandit problem. All those strategies have in common a greedy behavior where the \"best\" lever (based on previous observations) is always pulled except when a (uniformly) random action is taken.\n\n\nProbability matching strategies reflect the idea that the number of pulls for a given lever should \"match\" its actual probability of being the optimal lever. Probability matching strategies are also known as Thompson sampling or Bayesian Bandits, and are surprisingly easy to implement if you can sample from the posterior for the mean value of each alternative.\n\nProbability matching strategies also admit solutions to so-called contextual bandit problems.\n\nPricing strategies establish a \"price\" for each lever. For example, as illustrated with the POKER algorithm, the price can be the sum of the expected reward plus an estimation of extra future rewards that will gain through the additional knowledge. The lever of highest price is always pulled.\n\nThese strategies minimize the assignment of any patient to an inferior arm (\"physician's duty\"). In a typical case, they minimize expected successes lost (ESL), that is, the expected number of favorable outcomes that were missed because of assignment to an arm later proved to be inferior. Another version minimizes resources wasted on any inferior, more expensive, treatment.\n\nA particularly useful version of the multi-armed bandit is the contextual multi-armed bandit problem. In this problem, in each iteration an agent has to choose between arms. Before making the choice, the agent sees a d-dimensional feature vector (context vector),\nassociated with the current iteration. The learner uses these context vectors along with the rewards of the arms played in the past to make the choice of the arm to play in\nthe current iteration. Over time, the learner's aim is to collect enough information about how the context vectors and rewards relate to each other, so that it can predict the next best arm to play by looking at the feature vectors.\n\nMany strategies exist which provide an approximate solution to the contextual bandit problem, and can be put into two broad categories detailed below.\n\n\n\nIn practice, there is usually a cost associated with the resource consumed by each action and the total cost is limited by a budget in many applications such as crowdsourcing and clinical trials. Constrained contextual bandit (CCB) is such a model that considers both the time and budget constraints in a multi-armed bandit setting.\nA. Badanidiyuru et al. first studied contextual bandits with budget constraints, also referred to as Resourceful Contextual Bandits, and show that a formula_21 regret is achievable. However, their work focuses on a finite set of policies, and the algorithm is computationally inefficient.\nA simple algorithm with logarithmic regret is proposed in:\n\nAnother variant of the multi-armed bandit problem is called the adversarial bandit, first introduced by Auer and Cesa-Bianchi (1998). In this variant, at each iteration an agent chooses an arm and an adversary simultaneously chooses the payoff structure for each arm. This is one of the strongest generalizations of the bandit problem as it removes all assumptions of the distribution and a solution to the adversarial bandit problem is a generalized solution to the more specific bandit problems.\n\nIn the original specification and in the above variants, the bandit problem is specified with a discrete and finite number of arms, often indicated by the variable formula_22. In the infinite armed case, introduced by Agarwal (1995), the \"arms\" are a continuous variable in formula_22 dimensions.\n\nGarivier and Moulines derive some of the first results with respect to bandit problems where the underlying model can change during play. A number of algorithms were presented to deal with this case, including Discounted UCB and Sliding-Window UCB.\n\nAnother work by Burtini et al. introduces a weighted least squares Thompson sampling approach (WLS-TS), which proves beneficial in both the known and unknown non-stationary cases . In the known non-stationary case, the authors in produce an alternative solution, a variant of UCB named Adjusted Upper Confidence Bound (A-UCB) which assumes a stochastic model and provide upper-bounds of the regret.\n\nMany variants of the problem have been proposed in recent years. \n\nThe dueling bandit variant was introduced by Yue et al. (2012) to model the exploration-versus-exploitation tradeoff for relative feedback.\nIn this variant the gambler is allowed to pull two levers at the same time, but they only get a binary feedback telling which lever provided the best reward. The difficulty of this problem stems from the fact that the gambler has no way of directly observing the reward of their actions.\nThe earliest algorithms for this problem are InterleaveFiltering, Beat-The-Mean.\nThe relative feedback of dueling bandits can also lead to voting paradoxes. A solution is to take the Condorcet winner as a reference.\n\nMore recently, researchers have generalized algorithms from traditional MAB to dueling bandits: Relative Upper Confidence Bounds (RUCB), Relative EXponential weighing (REX3), \nCopeland Confidence Bounds (CCB), Relative Minimum Empirical Divergence (RMED), and Double Thompson Sampling (DTS).\n\nThe collaborative filtering bandits (i.e., COFIBA) was introduced by Li and Karatzoglou and Gentile (SIGIR 2016), where the classical collaborative filtering, and content-based filtering methods try to learn a static recommendation model given training data. These approaches are far from ideal in highly dynamic recommendation domains such as news recommendation and computational advertisement, where the set of items and users is very fluid. In this work, they investigate an adaptive clustering technique for content recommendation based on exploration-exploitation strategies in contextual multi-armed bandit settings. Their algorithm (COFIBA, pronounced as \"Coffee Bar\") takes into account the collaborative effects that arise due to the interaction of the users with the items, by dynamically grouping users based on the items under consideration and, at the same time, grouping items based on the similarity of the clusterings induced over the users. The resulting algorithm thus takes advantage of preference patterns in the data in a way akin to collaborative filtering methods. They provide an empirical analysis on medium-size real-world datasets, showing scalability and increased prediction performance (as measured by click-through rate) over state-of-the-art methods for clustering bandits. They also provide a regret analysis within a standard linear stochastic noise setting.\n\nThe Combinatorial Multiarmed Bandit (CMAB) problem arises when instead of a single discrete variable to choose from, an agent needs to choose values for a set of variables. Assuming each variable is discrete, the number of possible choices per iteration is exponential in the number of variables. Several CMAB settings have been studied in the literature, from settings where the variables are binary to more general setting where each variable can take an arbitrary set of values.\n\n\n\n\n", "id": "2854828", "title": "Multi-armed bandit"}
{"url": "https://en.wikipedia.org/wiki?curid=579867", "text": "Dimensionality reduction\n\nIn machine learning and statistics, dimensionality reduction or dimension reduction is the process of reducing the number of random variables under consideration by obtaining a set of principal variables. It can be divided into feature selection and feature extraction.\n\nFeature selection approaches try to find a subset of the original variables (also called features or attributes). There are three strategies: the \"filter\" strategy (e.g. information gain), the \"wrapper\" strategy (e.g. search guided by accuracy), and the \"embedded\" strategy (features are selected to add or be removed while building the model based on the prediction errors). See also combinatorial optimization problems.\n\nIn some cases, data analysis such as regression or classification can be done in the reduced space more accurately than in the original space.\n\nFeature extraction transforms the data in the high-dimensional space to a space of fewer dimensions. The data transformation may be linear, as in principal component analysis (PCA), but many nonlinear dimensionality reduction techniques also exist. For multidimensional data, tensor representation can be used in dimensionality reduction through multilinear subspace learning.\n\nThe main linear technique for dimensionality reduction, principal component analysis, performs a linear mapping of the data to a lower-dimensional space in such a way that the variance of the data in the low-dimensional representation is maximized. In practice, the covariance (and sometimes the correlation) matrix of the data is constructed and the eigen vectors on this matrix are computed. The eigen vectors that correspond to the largest eigenvalues (the principal components) can now be used to reconstruct a large fraction of the variance of the original data. Moreover, the first few eigen vectors can often be interpreted in terms of the large-scale physical behavior of the system . The original space (with dimension of the number of points) has been reduced (with data loss, but hopefully retaining the most important variance) to the space spanned by a few eigenvectors.\n\nPrincipal component analysis can be employed in a nonlinear way by means of the kernel trick. The resulting technique is capable of constructing nonlinear mappings that maximize the variance in the data. The resulting technique is entitled kernel PCA.\n\nOther prominent nonlinear techniques include manifold learning techniques such as Isomap, locally linear embedding (LLE), Hessian LLE, Laplacian eigenmaps, and local tangent space alignment (LTSA). These techniques construct a low-dimensional data representation using a cost function that retains local properties of the data, and can be viewed as defining a graph-based kernel for Kernel PCA.\n\nMore recently, techniques have been proposed that, instead of defining a fixed kernel, try to learn the kernel using semidefinite programming. The most prominent example of such a technique is maximum variance unfolding (MVU). The central idea of MVU is to exactly preserve all pairwise distances between nearest neighbors (in the inner product space), while maximizing the distances between points that are not nearest neighbors.\n\nAn alternative approach to neighborhood preservation is through the minimization of a cost function that measures differences between distances in the input and output spaces. Important examples of such techniques include: classical multidimensional scaling, which is identical to PCA; Isomap, which uses geodesic distances in the data space; diffusion maps, which use diffusion distances in the data space; t-distributed stochastic neighbor embedding (t-SNE), which minimizes the divergence between distributions over pairs of points; and curvilinear component analysis.\n\nA different approach to nonlinear dimensionality reduction is through the use of autoencoders, a special kind of feed-forward neural networks with a bottle-neck hidden layer. The training of deep encoders is typically performed using a greedy layer-wise pre-training (e.g., using a stack of restricted Boltzmann machines) that is followed by a finetuning stage based on backpropagation.\n\nLinear discriminant analysis (LDA) is a generalization of Fisher's linear discriminant, a method used in statistics, pattern recognition and machine learning to find a linear combination of features that characterizes or separates two or more classes of objects or events.\n\nGDA deals with nonlinear discriminant analysis using kernel function operator. The underlying theory is close to the support vector machines (SVM) insofar as the GDA method provides a mapping of the input vectors into high-dimensional feature space. Similar to LDA, the objective of GDA is to find a projection for the features into a lower dimensional space by maximizing the ratio of between-class scatter to within-class scatter.\n\nFor high-dimensional datasets (i.e. with number of dimensions more than 10), dimension reduction is usually performed prior to applying a K-nearest neighbors algorithm (k-NN) in order to avoid the effects of the curse of dimensionality.\nFeature extraction and dimension reduction can be combined in one step using principal component analysis (PCA), linear discriminant analysis (LDA), or canonical correlation analysis (CCA) techniques as a pre-processing step followed by clustering by K-NN on feature vectors in reduced-dimension space. In machine learning this process is also called low-dimensional embedding.\n\nFor very-high-dimensional datasets (e.g. when performing similarity search on live video streams, DNA data or high-dimensional time series) running a fast approximate K-NN search using locality sensitive hashing, random projection, \"sketches\" or other high-dimensional similarity search techniques from the VLDB toolbox might be the only feasible option.\n\n\nA dimensionality reduction technique that is sometimes used in neuroscience is maximally informative dimensions, which finds a lower-dimensional representation of a dataset such that as much information as possible about the original data is preserved.\n\n\n", "id": "579867", "title": "Dimensionality reduction"}
{"url": "https://en.wikipedia.org/wiki?curid=29288159", "text": "Sequence labeling\n\nIn machine learning, sequence labeling is a type of pattern recognition task that involves the algorithmic assignment of a categorical label to each member of a sequence of observed values. A common example of a sequence labeling task is part of speech tagging, which seeks to assign a part of speech to each word in an input sentence or document. Sequence labeling can be treated as a set of independent classification tasks, one per member of the sequence. However, accuracy is generally improved by making the optimal label for a given element dependent on the choices of nearby elements, using special algorithms to choose the \"globally\" best set of labels for the entire sequence at once.\n\nAs an example of why finding the globally best label sequence might produce better results than labeling one item at a time, consider the part-of-speech tagging task just described. Frequently, many words are members of multiple parts of speech, and the correct label of such a word can often be deduced from the correct label of the word to the immediate left or right. For example, the word \"sets\" can be either a noun or verb. In a phrase like \"he sets the books down\", the word \"he\" is unambiguously a pronoun, and \"the\" unambiguously a determiner, and using either of these labels, \"sets\" can be deduced to be a verb, since nouns very rarely follow pronouns and are less likely to precede determiners than verbs are. But in other cases, only one of the adjacent words is similarly helpful. In \"he sets and then knocks over the table\", only the word \"he\" to the left is helpful (cf. \"...picks up the sets and then knocks over...\"). Conversely, in \"... and also sets the table\" only the word \"the\" to the right is helpful (cf. \"... and also sets of books were ...\"). An algorithm that proceeds from left to right, labeling one word at a time, can only use the tags of left-adjacent words and might fail in the second example above; vice versa for an algorithm that proceeds from right to left.\n\nMost sequence labeling algorithms are probabilistic in nature, relying on statistical inference to find the best sequence. The most common statistical models in use for sequence labeling make a Markov assumption, i.e. that the choice of label for a particular word is directly dependent only on the immediately adjacent labels; hence the set of labels forms a Markov chain. This leads naturally to the hidden Markov model (HMM), one of the most common statistical models used for sequence labeling. Other common models in use are the maximum entropy Markov model and conditional random field.\n\n\n", "id": "29288159", "title": "Sequence labeling"}
{"url": "https://en.wikipedia.org/wiki?curid=871681", "text": "Mixture model\n\nIn statistics, a mixture model is a probabilistic model for representing the presence of subpopulations within an overall population, without requiring that an observed data set should identify the sub-population to which an individual observation belongs. Formally a mixture model corresponds to the mixture distribution that represents the probability distribution of observations in the overall population. However, while problems associated with \"mixture distributions\" relate to deriving the properties of the overall population from those of the sub-populations, \"mixture models\" are used to make statistical inferences about the properties of the sub-populations given only observations on the pooled population, without sub-population identity information.\n\nSome ways of implementing mixture models involve steps that attribute postulated sub-population-identities to individual observations (or weights towards such sub-populations), in which case these can be regarded as types of unsupervised learning or clustering procedures. However, not all inference procedures involve such steps.\n\nMixture models should not be confused with models for compositional data, i.e., data whose components are constrained to sum to a constant value (1, 100%, etc.). However, compositional models can be thought of as mixture models, where members of the population are sampled at random. Conversely, mixture models can be thought of as compositional models, where the total size reading population has been normalized to 1.\n\nA typical finite-dimensional mixture model is a hierarchical model consisting of the following components:\n\n\nIn addition, in a Bayesian setting, the mixture weights and parameters will themselves be random variables, and prior distributions will be placed over the variables. In such a case, the weights are typically viewed as a \"K\"-dimensional random vector drawn from a Dirichlet distribution (the conjugate prior of the categorical distribution), and the parameters will be distributed according to their respective conjugate priors.\n\nMathematically, a basic parametric mixture model can be described as follows:\n\nIn a Bayesian setting, all parameters are associated with random variables, as follows:\n\nThis characterization uses \"F\" and \"H\" to describe arbitrary distributions over observations and parameters, respectively. Typically \"H\" will be the conjugate prior of \"F\". The two most common choices of \"F\" are Gaussian aka \"normal\" (for real-valued observations) and categorical (for discrete observations). Other common possibilities for the distribution of the mixture components are:\n\nA typical non-Bayesian Gaussian mixture model looks like this:\n\nA Bayesian version of a Gaussian mixture model is as follows:\n\nA Bayesian Gaussian mixture model is commonly extended to fit a vector of unknown parameters (denoted in bold), or multivariate normal distributions. In a multivariate distribution (i.e. one modelling a vector formula_6 with \"N\" random variables) one may model a vector of parameters (such as several observations of a signal or patches within an image) using a Gaussian mixture model prior distribution on the vector of estimates given by\nwhere the \"i\" vector component is characterized by normal distributions with weights formula_8, means formula_9 and covariance matrices formula_10. To incorporate this prior into a Bayesian estimation, the prior is multiplied with the known distribution formula_11 of the data formula_6 conditioned on the parameters formula_13 to be estimated. With this formulation, the posterior distribution formula_14 is \"also\" a Gaussian mixture model of the form \nwith new parameters formula_16 and formula_17 that are updated using the EM algorithm.\n\nSuch distributions are useful for assuming patch-wise shapes of images and clusters, for example. In the case of image representation, each Gaussian may be tilted, expanded, and warped according to the covariance matrices formula_10. One Gaussian distribution of the set is fit to each patch (usually of size 8x8 pixels) in the image. Notably, any distribution of points around a cluster (see \"k\"-means) may be accurately given enough Gaussian components, but scarcely over \"K\"=20 components are needed to accurately model a given image distribution or cluster of data.\n\nA typical non-Bayesian mixture model with categorical observations looks like this:\n\n\nThe random variables:\n\nA typical Bayesian mixture model with categorical observations looks like this:\n\n\nThe random variables:\n\nFinancial returns often behave differently in normal situations and during crisis times. A mixture model for return data seems reasonable. Sometimes the model used is a jump-diffusion model, or as a mixture of two normal distributions. See Financial economics#Challenges and criticism for further context.\n\nAssume that we observe the prices of \"N\" different houses. Different types of houses in different neighborhoods will have vastly different prices, but the price of a particular type of house in a particular neighborhood (e.g., three-bedroom house in moderately upscale neighborhood) will tend to cluster fairly closely around the mean. One possible model of such prices would be to assume that the prices are accurately described by a mixture model with \"K\" different components, each distributed as a normal distribution with unknown mean and variance, with each component specifying a particular combination of house type/neighborhood. Fitting this model to observed prices, e.g., using the expectation-maximization algorithm, would tend to cluster the prices according to house type/neighborhood and reveal the spread of prices in each type/neighborhood. (Note that for values such as prices or incomes that are guaranteed to be positive and which tend to grow exponentially, a log-normal distribution might actually be a better model than a normal distribution.)\n\nAssume that a document is composed of \"N\" different words from a total vocabulary of size \"V\", where each word corresponds to one of \"K\" possible topics. The distribution of such words could be modelled as a mixture of \"K\" different \"V\"-dimensional categorical distributions. A model of this sort is commonly termed a topic model. Note that expectation maximization applied to such a model will typically fail to produce realistic results, due (among other things) to the excessive number of parameters. Some sorts of additional assumptions are typically necessary to get good results. Typically two sorts of additional components are added to the model:\n\nThe following example is based on an example in Christopher M. Bishop, \"Pattern Recognition and Machine Learning\".\n\nImagine that we are given an \"N\"×\"N\" black-and-white image that is known to be a scan of a hand-written digit between 0 and 9, but we don't know which digit is written. We can create a mixture model with formula_46 different components, where each component is a vector of size formula_47 of Bernoulli distributions (one per pixel). Such a model can be trained with the expectation-maximization algorithm on an unlabeled set of hand-written digits, and will effectively cluster the images according to the digit being written. The same model could then be used to recognize the digit of another image simply by holding the parameters constant, computing the probability of the new image for each possible digit (a trivial calculation), and returning the digit that generated the highest probability.\n\nMixture models apply in the problem of directing multiple projectiles at a target (as in air, land, or sea defense applications), where the physical and/or statistical characteristics of the projectiles differ within the multiple projectiles. An example might be shots from multiple munitions types or shots from multiple locations directed at one target. The combination of projectile types may be characterized as a Gaussian mixture model. Further, a well-known measure of accuracy for a group of projectiles is the circular error probable (CEP), which is the number \"R\" such that, on average, half of the group of projectiles falls within the circle of radius \"R\" about the target point. The mixture model can be used to determine (or estimate) the value \"R\". The mixture model properly captures the different types of projectiles.\n\nThe financial example above is one direct application of the mixture model, a situation in which we assume an underlying mechanism so that each observation belongs to one of some number of different sources or categories. This underlying mechanism may or may not, however, be observable. In this form of mixture, each of the sources is described by a component probability density function, and its mixture weight is the probability that an observation comes from this component.\n\nIn an indirect application of the mixture model we do not assume such a mechanism. The mixture model is simply used for its mathematical flexibilities. For example, a mixture of two normal distributions with different means may result in a density with two modes, which is not modeled by standard parametric distributions. Another example is given by the possibility of mixture distributions to model fatter tails than the basic Gaussian ones, so as to be a candidate for modeling more extreme events. When combined with dynamical consistency, this approach has been applied to financial derivatives valuation in presence of the volatility smile in the context of local volatility models. This defines our application.\n\nIn image processing and computer vision, traditional image segmentation models often assign to one pixel only one exclusive pattern. In fuzzy or soft segmentation, any pattern can have certain \"ownership\" over any single pixel. If the patterns are Gaussian, fuzzy segmentation naturally results in Gaussian mixtures. Combined with other analytic or geometric tools (e.g., phase transitions over diffusive boundaries), such spatially regularized mixture models could lead to more realistic and computationally efficient segmentation methods.\n\nIdentifiability refers to the existence of a unique characterization for any one of the models in the class (family) being considered. Estimation procedures may not be well-defined and asymptotic theory may not hold if a model is not identifiable.\n\nLet \"J\" be the class of all binomial distributions with . Then a mixture of two members of \"J\" would have\n\nand . Clearly, given \"p\" and \"p\", it is not possible to determine the above mixture model uniquely, as there are three parameters (\"π\", \"θ\", \"θ\") to be determined.\n\nConsider a mixture of parametric distributions of the same class. Let\n\nbe the class of all component distributions. Then the convex hull \"K\" of \"J\" defines the class of all finite mixture of distributions in \"J\":\n\n\"K\" is said to be identifiable if all its members are unique, that is, given two members \"p\" and in \"K\", being mixtures of \"k\" distributions and distributions respectively in \"J\", we have if and only if, first of all, and secondly we can reorder the summations such that and for all \"i\".\n\nParametric mixture models are often used when we know the distribution \"Y\" and we can sample from \"X\", but we would like to determine the \"a\" and \"θ\" values. Such situations can arise in studies in which we sample from a population that is composed of several distinct subpopulations.\n\nIt is common to think of probability mixture modeling as a missing data problem. One way to understand this is to assume that the data points under consideration have \"membership\" in one of the distributions we are using to model the data. When we start, this membership is unknown, or missing. The job of estimation is to devise appropriate parameters for the model functions we choose, with the connection to the data points being represented as their membership in the individual model distributions.\n\nA variety of approaches to the problem of mixture decomposition have been proposed, many of which focus on maximum likelihood methods such as expectation maximization (EM) or maximum \"a posteriori\" estimation (MAP). Generally these methods consider separately the questions of system identification and parameter estimation; methods to determine the number and functional form of components within a mixture are distinguished from methods to estimate the corresponding parameter values. Some notable departures are the graphical methods as outlined in Tarter and Lock and more recently minimum message length (MML) techniques such as Figueiredo and Jain and to some extent the moment matching pattern analysis routines suggested by McWilliam and Loh (2009).\n\nExpectation maximization (EM) is seemingly the most popular technique used to determine the parameters of a mixture with an \"a priori\" given number of components. This is a particular way of implementing maximum likelihood estimation for this problem. EM is of particular appeal for finite normal mixtures where closed-form expressions are possible such as in the following iterative algorithm by Dempster \"et al.\" (1977)\n\nwith the posterior probabilities\n\nThus on the basis of the current estimate for the parameters, the conditional probability for a given observation \"x\" being generated from state \"s\" is determined for each ; \"N\" being the sample size. The parameters are then updated such that the new component weights correspond to the average conditional probability and each component mean and covariance is the component specific weighted average of the mean and covariance of the entire sample.\n\nDempster also showed that each successive EM iteration will not decrease the likelihood, a property not shared by other gradient based maximization techniques. Moreover, EM naturally embeds within it constraints on the probability vector, and for sufficiently large sample sizes positive definiteness of the covariance iterates. This is a key advantage since explicitly constrained methods incur extra computational costs to check and maintain appropriate values. Theoretically EM is a first-order algorithm and as such converges slowly to a fixed-point solution. Redner and Walker (1984) make this point arguing in favour of superlinear and second order Newton and quasi-Newton methods and reporting slow convergence in EM on the basis of their empirical tests. They do concede that convergence in likelihood was rapid even if convergence in the parameter values themselves was not. The relative merits of EM and other algorithms vis-à-vis convergence have been discussed in other literature.\n\nOther common objections to the use of EM are that it has a propensity to spuriously identify local maxima, as well as displaying sensitivity to initial values. One may address these problems by evaluating EM at several initial points in the parameter space but this is computationally costly and other approaches, such as the annealing EM method of Udea and Nakano (1998) (in which the initial components are essentially forced to overlap, providing a less heterogeneous basis for initial guesses), may be preferable.\n\nFigueiredo and Jain note that convergence to 'meaningless' parameter values obtained at the boundary (where regularity conditions breakdown, e.g., Ghosh and Sen (1985)) is frequently observed when the number of model components exceeds the optimal/true one. On this basis they suggest a unified approach to estimation and identification in which the initial \"n\" is chosen to greatly exceed the expected optimal value. Their optimization routine is constructed via a minimum message length (MML) criterion that effectively eliminates a candidate component if there is insufficient information to support it. In this way it is possible to systematize reductions in \"n\" and consider estimation and identification jointly.\n\nThe Expectation-maximization algorithm can be used to compute the parameters of a parametric mixture model distribution (the \"a\" and \"θ\"). It is an iterative algorithm with two steps: an \"expectation step\" and a \"maximization step\". Practical examples of EM and Mixture Modeling are included in the SOCR demonstrations.\n\nWith initial guesses for the parameters of our mixture model, \"partial membership\" of each data point in each constituent distribution is computed by calculating expectation values for the membership variables of each data point. That is, for each data point \"x\" and distribution \"Y\", the membership value \"y\" is:\n\nWith expectation values in hand for group membership, plug-in estimates are recomputed for the distribution parameters.\n\nThe mixing coefficients \"a\" are the means of the membership values over the \"N\" data points.\n\nThe component model parameters \"θ\" are also calculated by expectation maximization using data points \"x\" that have been weighted using the membership values. For example, if \"θ\" is a mean \"μ\"\n\nWith new estimates for \"a\" and the \"θ\"'s, the expectation step is repeated to recompute new membership values. The entire procedure is repeated until model parameters converge.\n\nAs an alternative to the EM algorithm, the mixture model parameters can be deduced using posterior sampling as indicated by Bayes' theorem. This is still regarded as an incomplete data problem whereby membership of data points is the missing data. A two-step iterative procedure known as Gibbs sampling can be used.\n\nThe previous example of a mixture of two Gaussian distributions can demonstrate how the method works. As before, initial guesses of the parameters for the mixture model are made. Instead of computing partial memberships for each elemental distribution, a membership value for each data point is drawn from a Bernoulli distribution (that is, it will be assigned to either the first or the second Gaussian). The Bernoulli parameter \"θ\" is determined for each data point on the basis of one of the constituent distributions. Draws from the distribution generate membership associations for each data point. Plug-in estimators can then be used as in the M step of EM to generate a new set of mixture model parameters, and the binomial draw step repeated.\n\nThe method of moment matching is one of the oldest techniques for determining the mixture parameters dating back to Karl Pearson’s seminal work of 1894.\nIn this approach the parameters of the mixture are determined such that the composite distribution has moments matching some given value. In many instances extraction of solutions to the moment equations may present non-trivial algebraic or computational problems. Moreover, numerical analysis by Day has indicated that such methods may be inefficient compared to EM. Nonetheless there has been renewed interest in this method, e.g., Craigmile and Titterington (1998) and Wang.\n\nMcWilliam and Loh (2009) consider the characterisation of a hyper-cuboid normal mixture copula in large dimensional systems for which EM would be computationally prohibitive. Here a pattern analysis routine is used to generate multivariate tail-dependencies consistent with a set of univariate and (in some sense) bivariate moments. The performance of this method is then evaluated using equity log-return data with Kolmogorov–Smirnov test statistics suggesting a good descriptive fit.\n\nSome problems in mixture model estimation can be solved using spectral methods.\nIn particular it becomes useful if data points \"x\" are points in high-dimensional real space, and the hidden distributions are known to be log-concave (such as Gaussian distribution or Exponential distribution).\n\nSpectral methods of learning mixture models are based on the use of Singular Value Decomposition of a matrix which contains data points.\nThe idea is to consider the top \"k\" singular vectors, where \"k\" is the number of distributions to be learned. The projection\nof each data point to a linear subspace spanned by those vectors groups points originating from the same distribution\nvery close together, while points from different distributions stay far apart.\n\nOne distinctive feature of the spectral method is that it allows us to prove that if\ndistributions satisfy certain separation condition (e.g., not too close), then the estimated mixture will be very close to the true one with high probability.\n\nTarter and Lock describe a graphical approach to mixture identification in which a kernel function is applied to an empirical frequency plot so to reduce intra-component variance. In this way one may more readily identify components having differing means. While this \"λ\"-method does not require prior knowledge of the number or functional form of the components its success does rely on the choice of the kernel parameters which to some extent implicitly embeds assumptions about the component structure.\n\nSome of them can even probably learn mixtures of heavy-tailed distributions including those with\ninfinite variance (see links to papers below).\nIn this setting, EM based methods would not work, since the Expectation step would diverge due to presence of\noutliers.\n\nTo simulate a sample of size \"N\" that is from a mixture of distributions \"F\", \"i\"=1 to \"n\", with probabilities \"p\" (sum= \"p\" = 1):\n\nIn a Bayesian setting, additional levels can be added to the graphical model defining the mixture model. For example, in the common latent Dirichlet allocation topic model, the observations are sets of words drawn from \"D\" different documents and the \"K\" mixture components represent topics that are shared across documents. Each document has a different set of mixture weights, which specify the topics prevalent in that document. All sets of mixture weights share common hyperparameters.\n\nA very common extension is to connect the latent variables defining the mixture component identities into a Markov chain, instead of assuming that they are independent identically distributed random variables. The resulting model is termed a hidden Markov model and is one of the most common sequential hierarchical models. Numerous extensions of hidden Markov models have been developed; see the resulting article for more information.\n\nMixture distributions and the problem of mixture decomposition, that is the identification of its constituent components and the parameters thereof, has been cited in the literature as far back as 1846 (Quetelet in McLachlan\n, 2000) although common reference is made to the work of Karl Pearson (1894) as the first author to explicitly address the decomposition problem in characterising non-normal attributes of forehead to body length ratios in female shore crab populations. The motivation for this work was provided by the zoologist Walter Frank Raphael Weldon who had speculated in 1893 (in Tarter and Lock) that asymmetry in the histogram of these ratios could signal evolutionary divergence. Pearson’s approach was to fit a univariate mixture of two normals to the data by choosing the five parameters of the mixture such that the empirical moments matched that of the model.\n\nWhile his work was successful in identifying two potentially distinct sub-populations and in demonstrating the flexibility of mixtures as a moment matching tool, the formulation required the solution of a 9th degree (nonic) polynomial which at the time posed a significant computational challenge.\n\nSubsequent works focused on addressing these problems, but it was not until the advent of the modern computer and the popularisation of Maximum Likelihood (MLE) parameterisation techniques that research really took off. Since that time there has been a vast body of research on the subject spanning areas such as Fisheries research, Agriculture, Botany, Economics, Medicine, Genetics, Psychology, Palaeontology, Electrophoresis, Finance, Sedimentology/Geology and Zoology.\n\n\n\n\n\n\n", "id": "871681", "title": "Mixture model"}
{"url": "https://en.wikipedia.org/wiki?curid=1579244", "text": "Statistical classification\n\nIn machine learning and statistics, classification is the problem of identifying to which of a set of categories (sub-populations) a new observation belongs, on the basis of a training set of data containing observations (or instances) whose category membership is known. An example would be assigning a given email into \"spam\" or \"non-spam\" classes or assigning a diagnosis to a given patient as described by observed characteristics of the patient (gender, blood pressure, presence or absence of certain symptoms, etc.). Classification is an example of pattern recognition.\n\nIn the terminology of machine learning, classification is considered an instance of supervised learning, i.e. learning where a training set of correctly identified observations is available. The corresponding unsupervised procedure is known as clustering, and involves grouping data into categories based on some measure of inherent similarity or distance.\n\nOften, the individual observations are analyzed into a set of quantifiable properties, known variously as explanatory variables or \"features\". These properties may variously be categorical (e.g. \"A\", \"B\", \"AB\" or \"O\", for blood type), ordinal (e.g. \"large\", \"medium\" or \"small\"), integer-valued (e.g. the number of occurrences of a particular word in an email) or real-valued (e.g. a measurement of blood pressure). Other classifiers work by comparing observations to previous observations by means of a similarity or distance function.\n\nAn algorithm that implements classification, especially in a concrete implementation, is known as a classifier. The term \"classifier\" sometimes also refers to the mathematical function, implemented by a classification algorithm, that maps input data to a category.\n\nTerminology across fields is quite varied. In statistics, where classification is often done with logistic regression or a similar procedure, the properties of observations are termed explanatory variables (or independent variables, regressors, etc.), and the categories to be predicted are known as outcomes, which are considered to be possible values of the dependent variable. In machine learning, the observations are often known as \"instances\", the explanatory variables are termed \"features\" (grouped into a feature vector), and the possible categories to be predicted are \"classes\". Other fields may use different terminology: e.g. in community ecology, the term \"classification\" normally refers to cluster analysis, i.e. a type of unsupervised learning, rather than the supervised learning described in this article.\n\nClassification and clustering are examples of the more general problem of pattern recognition, which is the assignment of some sort of output value to a given input value. Other examples are regression, which assigns a real-valued output to each input; sequence labeling, which assigns a class to each member of a sequence of values (for example, part of speech tagging, which assigns a part of speech to each word in an input sentence); parsing, which assigns a parse tree to an input sentence, describing the syntactic structure of the sentence; etc. \n\nA common subclass of classification is probabilistic classification. Algorithms of this nature use statistical inference to find the best class for a given instance. Unlike other algorithms, which simply output a \"best\" class, probabilistic algorithms output a probability of the instance being a member of each of the possible classes. The best class is normally then selected as the one with the highest probability. However, such an algorithm has numerous advantages over non-probabilistic classifiers:\n\nEarly work on statistical classification was undertaken by Fisher, in the context of two-group problems, leading to Fisher's linear discriminant function as the rule for assigning a group to a new observation. This early work assumed that data-values within each of the two groups had a multivariate normal distribution. The extension of this same context to more than two-groups has also been considered with a restriction imposed that the classification rule should be linear. Later work for the multivariate normal distribution allowed the classifier to be nonlinear: several classification rules can be derived based on slight different adjustments of the Mahalanobis distance, with a new observation being assigned to the group whose centre has the lowest adjusted distance from the observation.\n\nUnlike frequentist procedures, Bayesian classification procedures provide a natural way of taking into account any available information about the relative sizes of the sub-populations associated with the different groups within the overall population. Bayesian procedures tend to be computationally expensive and, in the days before Markov chain Monte Carlo computations were developed, approximations for Bayesian clustering rules were devised.\n\nSome Bayesian procedures involve the calculation of group membership probabilities: these can be viewed as providing a more and more informative outcome of a data analysis than a simple attribution of a single group-label to each new observation.\n\nClassification can be thought of as two separate problems – binary classification and multiclass classification. In binary classification, a better understood task, only two classes are involved, whereas multiclass classification involves assigning an object to one of several classes. Since many classification methods have been developed specifically for binary classification, multiclass classification often requires the combined use of multiple binary classifiers.\n\nMost algorithms describe an individual instance whose category is to be predicted using a feature vector of individual, measurable properties of the instance. Each property is termed a feature, also known in statistics as an explanatory variable (or independent variable, although features may or may not be statistically independent). Features may variously be binary (e.g. \"male\" or \"female\"); categorical (e.g. \"A\", \"B\", \"AB\" or \"O\", for blood type); ordinal (e.g. \"large\", \"medium\" or \"small\"); integer-valued (e.g. the number of occurrences of a particular word in an email); or real-valued (e.g. a measurement of blood pressure). If the instance is an image, the feature values might correspond to the pixels of an image; if the instance is a piece of text, the feature values might be occurrence frequencies of different words. Some algorithms work only in terms of discrete data and require that real-valued or integer-valued data be \"discretized\" into groups (e.g. less than 5, between 5 and 10, or greater than 10)\n\nA large number of algorithms for classification can be phrased in terms of a linear function that assigns a score to each possible category \"k\" by combining the feature vector of an instance with a vector of weights, using a dot product. The predicted category is the one with the highest score. This type of score function is known as a linear predictor function and has the following general form:\n\nwhere X is the feature vector for instance \"i\", β is the vector of weights corresponding to category \"k\", and score(X, \"k\") is the score associated with assigning instance \"i\" to category \"k\". In discrete choice theory, where instances represent people and categories represent choices, the score is considered the utility associated with person \"i\" choosing category \"k\".\n\nAlgorithms with this basic setup are known as linear classifiers. What distinguishes them is the procedure for determining (training) the optimal weights/coefficients and the way that the score is interpreted.\n\nExamples of such algorithms are\n\nExamples of classification algorithms include:\n\nClassifier performance depends greatly on the characteristics of the data to be classified. There is no single classifier that works best on all given problems (a phenomenon that may be explained by the no-free-lunch theorem). Various empirical tests have been performed to compare classifier performance and to find the characteristics of data that determine classifier performance. Determining a suitable classifier for a given problem is however still more an art than a science.\n\nThe measures precision and recall are popular metrics used to evaluate the quality of a classification system. More recently, receiver operating characteristic (ROC) curves have been used to evaluate the tradeoff between true- and false-positive rates of classification algorithms.\n\nAs a performance metric, the uncertainty coefficient has the advantage over simple accuracy in that it is not affected by the relative sizes of the different classes.\n\nFurther, it will not penalize an algorithm for simply \"rearranging\" the classes.\n\nClassification has many applications. In some of these it is employed as a data mining procedure, while in others more detailed statistical modeling is undertaken.\n\n\n\n", "id": "1579244", "title": "Statistical classification"}
{"url": "https://en.wikipedia.org/wiki?curid=19463198", "text": "Apprenticeship learning\n\nIn artificial intelligence, apprenticeship learning (or learning from demonstration) is the process of learning by observing an expert. It can be viewed as a form of supervised learning, where the training dataset consists of task executions by a demonstration teacher.\n\nMapping methods try to mimic the expert by forming a direct mapping from the states to the actions. For example, in 2002 researchers used such an approach to teach an AIBO robot basic soccer skills.\n\nSystem models try to mimic the expert by modeling world dynamics.\n\nInverse reinforcement learning (IRL) is the process of deriving a reward function from observed behavior. While ordinary \"reinforcement learning\" involves using rewards and punishments to learn behavior, in IRL the direction is reversed, and a robot observes a person's behavior to figure out what goal that behavior seems to be trying to achieve. The IRL problem can be defined as:\n\nGiven 1) measurements of an agent's behaviour over time, in a variety of circumstances; 2) measurements of the sensory inputs to that agent; 3) a model of the physical environment (including the agent's body): Determine the reward function that the agent is optimizing.\n\nIRL researcher Stuart J. Russell proposes that IRL might be used to observe humans and attempt to codify their complex \"ethical values\", in an effort to create \"ethical robots\" that might someday know \"not to cook your cat\" without needing to be explicitly told. The scenario can be be modeled as a \"cooperative inverse reinforcement learning game\", where a \"person\" player and a \"robot\" player cooperate to secure the person's implicit goals, despite these goals not being explicitly known by either the person nor the robot.\n\nApprenticeship via inverse reinforcement learning (AIRP) was developed by in 2004 Pieter Abbeel, Professor in Berkeley's EECS department, and Andrew Ng, Associate Professor in Stanford University's Computer Science Department. AIRP deals with \"Markov decision process where we are not explicitly given a reward function, but where instead we can observe an expert demonstrating the task that we want to learn to perform\". AIRP has been used to model reward functions of highly dynamic scenarios where there is no obvious reward function intuitively. Take the task of driving for example, there are many different objectives working simultaneously - such as maintaining safe following distance, a good speed, not changing lanes too often, etc. This task, may seem easy at first glance, but a trivial reward function may not converge to the policy wanted.\n\nOne domain where AIRP has been used extensively is helicopter control. While simple trajectories can be intuitively derived, complicated tasks like aerobatics for shows has been successful. These include aerobatic maneuvers like - in-place flips, in-place rolls, loops, hurricanes and even auto-rotation landings. This work was developed by Pieter Abbeel, Adam Coates, and Andrew Ng - \"Autonomous Helicopter Aerobatics through Apprenticeship Learning\"\n\nThe system learns rules to associate preconditions and postconditions with each action. In one 1994 demonstration, a humanoid learns a generalized plan from only two demonstrations of a repetitive ball\ncollection task.\n\n", "id": "19463198", "title": "Apprenticeship learning"}
{"url": "https://en.wikipedia.org/wiki?curid=3119546", "text": "Subclass reachability\n\nIn computational learning theory in mathematics, given a class of concepts C, a subclass D is reachable if there exists a partial approximation S of some concept such that D contains exactly those concepts in C that are extensions to S (i.e., D=C|S).\n", "id": "3119546", "title": "Subclass reachability"}
{"url": "https://en.wikipedia.org/wiki?curid=205393", "text": "Binary classification\n\nBinary or binomial classification is the task of classifying the elements of a given set into two groups (predicting which group each one belongs to) on the basis of a classification rule. Contexts requiring a decision as to whether or not an item has some qualitative property, some specified characteristic, or some typical binary classification include:\n\nBinary classification is dichotomization applied to practical purposes, and in many practical binary classification problems, the two groups are not symmetric – rather than overall accuracy, the relative proportion of different types of errors is of interest. For example, in medical testing, a false positive (detecting a disease when it is not present) is considered differently from a false negative (not detecting a disease when it is present).\n\nStatistical classification is a problem studied in machine learning. It is a type of supervised learning, a method of machine learning where the categories are predefined, and is used to categorize new probabilistic observations into said categories. When there are only two categories the problem is known as statistical binary classification. \n\nSome of the methods commonly used for binary classification are:\nEach classifier is best in only a select domain based upon the number of observations, the dimensionality of the feature vector, the noise in the data and many other factors. For example random forests perform better than SVM classifiers for 3D point clouds. \n\nThere are many metrics that can be used to measure the performance of a classifier or predictor; different fields have different preferences for specific metrics due to different goals. For example, in medicine sensitivity and specificity are often used, while in information retrieval precision and recall are preferred. An important distinction is between metrics that are independent on the prevalence (how often each category occurs in the population), and metrics that depend on the prevalence – both types are useful, but they have very different properties.\n\nGiven a classification of a specific data set, there are four basic data: the number of true positives (TP), true negatives (TN), false positives (FP), and false negatives (FN). These can be arranged into a 2×2 contingency table, with columns corresponding to actual value – condition positive (CP) or condition negative (CN) – and rows corresponding to classification value – test outcome positive or test outcome negative. There are eight basic ratios that one can compute from this table, which come in four complementary pairs (each pair summing to 1). These are obtained by dividing each of the four numbers by the sum of its row or column, yielding eight numbers, which can be referred to generically in the form \"true positive row ratio\" or \"false negative column ratio\", though there are conventional terms. There are thus two pairs of column ratios and two pairs of row ratios, and one can summarize these with four numbers by choosing one ratio from each pair – the other four numbers are the complements.\n\nThe column ratios are True Positive Rate (TPR, aka Sensitivity or recall), with complement the False Negative Rate (FNR); and True Negative Rate (TNR, aka Specificity, SPC), with complement False Positive Rate (FPR). These are the proportion of the \"population with the condition\" (resp., without the condition) for which the test is correct (or, complementarily, for which the test is incorrect); these are independent of prevalence.\n\nThe row ratios are Positive Predictive Value (PPV, aka precision), with complement the False Discovery Rate (FDR); and Negative Predictive Value (NPV), with complement the False Omission Rate (FOR). These are the proportion of the \"population with a given test result\" for which the test is correct (or, complementarily, for which the test is incorrect); these depend on prevalence. \n\nIn diagnostic testing, the main ratios used are the true column ratios – True Positive Rate and True Negative Rate – where they are known as sensitivity and specificity. In informational retrieval, the main ratios are the true positive ratios (row and column) – Positive Predictive Value and True Positive Rate – where they are known as precision and recall.\n\nOne can take ratios of a complementary pair of ratios, yielding four likelihood ratios (two column ratio of ratios, two row ratio of ratios). This is primarily done for the column (condition) ratios, yielding likelihood ratios in diagnostic testing. Taking the ratio of one of these groups of ratios yields a final ratio, the diagnostic odds ratio (DOR). This can also be defined directly as (TP×TN)/(FP×FN) = (TP/FN)/(FP/TN); this has a useful interpretation – as an odds ratio – and is prevalence-independent.\n\nThere are a number of other metrics, most simply the accuracy or Fraction Correct (FC), which measures the fraction of all instances that are correctly categorized; the complement is the Fraction Incorrect (FiC). The F-score combines precision and recall into one number via a choice of weighing, most simply equal weighing, as the balanced F-score (F1 score). Some metrics come from regression coefficients: the markedness and the informedness, and their geometric mean, the Matthews correlation coefficient. Other metrics include Youden's J statistic, the uncertainty coefficient, the Phi coefficient, and Cohen's kappa.\n\nTests whose results are of continuous values, such as most blood values, can artificially be made binary by defining a cutoff value, with test results being designated as positive or negative depending on whether the resultant value is higher or lower than the cutoff.\n\nHowever, such conversion causes a loss of information, as the resultant binary classification does not tell \"how much\" above or below the cutoff a value is. As a result, when converting a continuous value that is close to the cutoff to a binary one, the resultant positive or negative predictive value is generally higher than the predictive value given directly from the continuous value. In such cases, the designation of the test of being either positive or negative gives the appearance of an inappropriately high certainty, while the value is in fact in an interval of uncertainty. For example, with the urine concentration of hCG as a continuous value, a urine pregnancy test that measured 52 mIU/ml of hCG may show as \"positive\" with 50 mIU/ml as cutoff, but is in fact in an interval of uncertainty, which may be apparent only by knowing the original continuous value. On the other hand, a test result very far from the cutoff generally has a resultant positive or negative predictive value that is lower than the predictive value given from the continuous value. For example, a urine hCG value of 200,000 mIU/ml confers a very high probability of pregnancy, but conversion to binary values results in that it shows just as \"positive\" as the one of 52 mIU/ml.\n\n\n", "id": "205393", "title": "Binary classification"}
{"url": "https://en.wikipedia.org/wiki?curid=21638340", "text": "Explanation-based learning\n\nExplanation-based learning (EBL) is a form of machine learning that exploits a very strong, or even perfect, domain theory in order to make generalizations or form concepts from training examples.\n\nAn example of EBL using a perfect domain theory is a program that learns to play chess through example. A specific chess position that contains an important feature such as \"Forced loss of black queen in two moves\" includes many irrelevant features, such as the specific scattering of pawns on the board. EBL can take a single training example and determine what are the relevant features in order to form a generalization.\n\nA domain theory is \"perfect\" or \"complete\" if it contains, in principle, all information needed to decide any question about the domain. For example, the domain theory for chess is simply the rules of chess. Knowing the rules, in principle, it is possible to deduce the best move in any situation. However, actually making such a deduction is impossible in practice due to combinatoric explosion. EBL uses training examples to make searching for deductive consequences of a domain theory efficient in practice.\n\nIn essence, an EBL system works by finding a way to deduce each training example from the system's existing database of domain theory. Having a short proof of the training example extends the domain-theory database, enabling the EBL system to find and classify future examples that are similar to the training example very quickly.\nThe main drawback of the method---the cost of applying the learned proof macros, as these become numerous---was analyzed by Minton.\nEBL software takes four inputs:\n\n\nAn especially good application domain for an EBL is natural language processing (NLP). Here a rich domain theory, i.e., a natural language grammar---although neither perfect nor complete, is tuned to a particular application or particular language usage, using a treebank (training examples). Rayner pioneered this work. The first successful industrial application was to a commercial NL interface to relational databases. The method has been successfully applied to several large-scale natural language parsing system, where the utility problem was solved by omitting the original grammar (domain theory) and using specialized LR-parsing techniques, resulting in huge speed-ups, at a cost in coverage, but with a gain in disambiguation.\nEBL-like techniques have also been applied to surface generation, the converse of parsing.\n\nWhen applying EBL to NLP, the operationality criteria can be hand-crafted, or can be\ninferred from the treebank using either the entropy of its or-nodes\nor a target coverage/disambiguation trade-off (= recall/precision trade-off = f-score).\nEBL can also be used to compile grammar-based language models for speech recognition, from general unification grammars.\nNote how the utility problem, first exposed by Minton, was solved by discarding the original grammar/domain theory, and that the quoted articles tend to contain the phrase \"grammar specialization\"---quite the opposite of the original term \"explanation-based generalization.\" Perhaps the best name for this technique would be \"data-driven search space reduction.\"\nOther people who worked on EBL for NLP include Guenther Neumann, Aravind Joshi, Srinivas Bangalore, and Khalil Sima'an.\n\n", "id": "21638340", "title": "Explanation-based learning"}
{"url": "https://en.wikipedia.org/wiki?curid=7309022", "text": "Nearest neighbor search\n\nNearest neighbor search (NNS), as a form of proximity search, is the optimization problem of finding the point in a given set that is closest (or most similar) to a given point. Closeness is typically expressed in terms of a dissimilarity function: the less similar the objects, the larger the function values. Formally, the nearest-neighbor (NN) search problem is defined as follows: given a set \"S\" of points in a space \"M\" and a query point \"q\" ∈ \"M\", find the closest point in \"S\" to \"q\". Donald Knuth in vol. 3 of \"The Art of Computer Programming\" (1973) called it the post-office problem, referring to an application of assigning to a residence the nearest post office. A direct generalization of this problem is a \"k\"-NN search, where we need to find the \"k\" closest points.\n\nMost commonly \"M\" is a metric space and dissimilarity is expressed as a distance metric, which is symmetric and satisfies the triangle inequality. Even more common, \"M\" is taken to be the \"d\"-dimensional vector space where dissimilarity is measured using the Euclidean distance, Manhattan distance or other distance metric. However, the dissimilarity function can be arbitrary. One example are asymmetric Bregman divergences, for which the triangle inequality does not hold.\n\nThe nearest neighbor search problem arises in numerous fields of application, including:\n\nVarious solutions to the NNS problem have been proposed. The quality and usefulness of the algorithms are determined by the time complexity of queries as well as the space complexity of any search data structures that must be maintained. The informal observation usually referred to as the curse of dimensionality states that there is no general-purpose exact solution for NNS in high-dimensional Euclidean space using polynomial preprocessing and polylogarithmic search time.\n\nThe simplest solution to the NNS problem is to compute the distance from the query point to every other point in the database, keeping track of the \"best so far\". This algorithm, sometimes referred to as the naive approach, has a running time of \"O\"(\"dN\") where \"N\" is the cardinality of \"S\" and \"d\" is the dimensionality of \"M\". There are no search data structures to maintain, so linear search has no space complexity beyond the storage of the database. Naive search can, on average, outperform space partitioning approaches on higher dimensional spaces.\n\nSince the 1970s, branch and bound methodology has been applied to the problem. In the case of Euclidean space this approach is known as spatial index or spatial access methods. Several space-partitioning methods have been developed for solving the NNS problem. Perhaps the simplest is the k-d tree, which iteratively bisects the search space into two regions containing half of the points of the parent region. Queries are performed via traversal of the tree from the root to a leaf by evaluating the query point at each split. Depending on the distance specified in the query, neighboring branches that might contain hits may also need to be evaluated. For constant dimension query time, average complexity is \"O\"(log \"N\") in the case of randomly distributed points, worst case complexity is \"O\"(\"kN\"^(1-1/\"k\"))\nAlternatively the R-tree data structure was designed to support nearest neighbor search in dynamic context, as it has efficient algorithms for insertions and deletions such as the R* tree. R-trees can yield nearest neighbors not only for Euclidean distance, but can also be used with other distances.\n\nIn case of general metric space branch and bound approach is known under the name of metric trees. Particular examples include vp-tree and BK-tree.\n\nUsing a set of points taken from a 3-dimensional space and put into a BSP tree, and given a query point taken from the same space, a possible solution to the problem of finding the nearest point-cloud point to the query point is given in the following description of an algorithm. (Strictly speaking, no such point may exist, because it may not be unique. But in practice, usually we only care about finding any one of the subset of all point-cloud points that exist at the shortest distance to a given query point.) The idea is, for each branching of the tree, guess that the closest point in the cloud resides in the half-space containing the query point. This may not be the case, but it is a good heuristic. After having recursively gone through all the trouble of solving the problem for the guessed half-space, now compare the distance returned by this result with the shortest distance from the query point to the partitioning plane. This latter distance is that between the query point and the closest possible point that could exist in the half-space not searched. If this distance is greater than that returned in the earlier result, then clearly there is no need to search the other half-space. If there is such a need, then you must go through the trouble of solving the problem for the other half space, and then compare its result to the former result, and then return the proper result. The performance of this algorithm is nearer to logarithmic time than linear time when the query point is near the cloud, because as the distance between the query point and the closest point-cloud point nears zero, the algorithm needs only perform a look-up using the query point as a key to get the correct result.\n\nAn approximation algorithm is allowed to return a point, whose distance from the query is at most formula_1 times the distance from the query to its nearest points. The appeal of this approach is that, in many cases, an approximate nearest neighbor is almost as good as the exact one. In particular, if the distance measure accurately captures the notion of user quality, then small differences in the distance should not matter. \n\nLocality sensitive hashing (LSH) is a technique for grouping points in space into 'buckets' based on some distance metric operating on the points. Points that are close to each other under the chosen metric are mapped to the same bucket with high probability.\n\nThe cover tree has a theoretical bound that is based on the dataset's doubling constant. The bound on search time is \"O\"(\"c\" log \"n\") where \"c\" is the expansion constant of the dataset.\n\nIn the special case where the data is a dense 3D map of geometric points, the projection geometry of the sensing technique can be used to dramatically simplify the search problem.\nThis approach requires that the 3D data is organized by a projection to a two dimensional grid and assumes that the data is spatially smooth across neighboring grid cells with the exception of object boundaries.\nThese assumptions are valid when dealing with 3D sensor data in applications such as surveying, robotics and stereo vision but may not hold for unorganized data in general.\nIn practice this technique has an average search time of \"O\"(\"1\") or \"O\"(\"K\") for the \"k\"-nearest neighbor problem when applied to real world stereo vision data.\n\nIn high dimensional spaces, tree indexing structures become useless because an increasing percentage of the nodes need to be examined anyway. To speed up linear search, a compressed version of the feature vectors stored in RAM is used to prefilter the datasets in a first run. The final candidates are determined in a second stage using the uncompressed data from the disk for distance calculation.\n\nThe VA-file approach is a special case of a compression based search, where each feature component is compressed uniformly and independently. The optimal compression technique in multidimensional spaces is Vector Quantization (VQ), implemented through clustering. The database is clustered and the most \"promising\" clusters are retrieved. Huge gains over VA-File, tree-based indexes and sequential scan have been observed. Also note the parallels between clustering and LSH.\n\nOne possible way to solve NNS is to construct a graph formula_2, where every point formula_3 is uniquely associated with vertex formula_4. The search of the point in the set \"S\" closest to the query \"q\" takes the form of the search of vertex in the graph formula_2.\nOne of the basic vertex search algorithms in graphs with metric objects is the greedy search algorithm. It starts from the random vertex formula_4. The algorithm computes a distance value from the query q to each vertex from the neighborhood formula_7 of the current vertex formula_8, and then selects a vertex with the minimal distance value. If the distance value between the query and the selected vertex is smaller than the one between the query and the current element, then the algorithm moves to the selected vertex, and it becomes new current vertex. The algorithm stops when it reaches a local minimum: a vertex whose neighborhood does not contain a vertex that is closer to the query than the vertex itself.\nThis idea was exploited in the VoroNet system for the plane, in the RayNet system for the formula_9, and for the general metric space in the Metrized Small World algorithm.\n\nThere are numerous variants of the NNS problem and the two most well-known are the \"k\"-nearest neighbor search and the ε-approximate nearest neighbor search.\n\n\"k\"-nearest neighbor search identifies the top \"k\" nearest neighbors to the query. This technique is commonly used in predictive analytics to estimate or classify a point based on the consensus of its neighbors. \"k\"-nearest neighbor graphs are graphs in which every point is connected to its \"k\" nearest neighbors.\n\nIn some applications it may be acceptable to retrieve a \"good guess\" of the nearest neighbor. In those cases, we can use an algorithm which doesn't guarantee to return the actual nearest neighbor in every case, in return for improved speed or memory savings. Often such an algorithm will find the nearest neighbor in a majority of cases, but this depends strongly on the dataset being queried.\n\nAlgorithms that support the approximate nearest neighbor search include locality-sensitive hashing, best bin first and balanced box-decomposition tree based search.\n\nNearest neighbor distance ratio do not apply the threshold on the direct distance from the original point to the challenger neighbor but on a ratio of it depending on the distance to the previous neighbor. It is used in CBIR to retrieve pictures through a \"query by example\" using the similarity between local features. More generally it is involved in several matching problems.\n\nFixed-radius near neighbors is the problem where one wants to efficiently find all points given in Euclidean space within a given fixed distance from a specified point. The data structure should work on a distance which is fixed however the query point is arbitrary.\n\nFor some applications (e.g. entropy estimation), we may have \"N\" data-points and wish to know which is the nearest neighbor \"for every one of those N points\". This could of course be achieved by running a nearest-neighbor search once for every point, but an improved strategy would be an algorithm that exploits the information redundancy between these \"N\" queries to produce a more efficient search. As a simple example: when we find the distance from point \"X\" to point \"Y\", that also tells us the distance from point \"Y\" to point \"X\", so the same calculation can be reused in two different queries.\n\nGiven a fixed dimension, a semi-definite positive norm (thereby including every L norm), and \"n\" points in this space, the nearest neighbour of every point can be found in \"O\"(\"n\" log \"n\") time and the \"m\" nearest neighbours of every point can be found in \"O\"(\"mn\" log \"n\") time.\n\n\n\n\n", "id": "7309022", "title": "Nearest neighbor search"}
{"url": "https://en.wikipedia.org/wiki?curid=20926", "text": "Supervised learning\n\nSupervised learning is the machine learning task of inferring a function from \"\". The training data consist of a set of \"training examples\". In supervised learning, each example is a \"pair\" consisting of an input object (typically a vector) and a desired output value (also called the \"supervisory signal\"). A supervised learning algorithm analyzes the training data and produces an inferred function, which can be used for mapping new examples. An optimal scenario will allow for the algorithm to correctly determine the class labels for unseen instances. This requires the learning algorithm to generalize from the training data to unseen situations in a \"reasonable\" way (see inductive bias).\n\nThe parallel task in human and animal psychology is often referred to as concept learning.\n\nIn order to solve a given problem of supervised learning, one has to perform the following steps:\n\n\nA wide range of supervised learning algorithms are available, each with its strengths and weaknesses. There is no single learning algorithm that works best on all supervised learning problems (see the No free lunch theorem).\n\nThere are four major issues to consider in supervised learning:\n\nA first issue is the tradeoff between \"bias\" and \"variance\". Imagine that we have available several different, but equally good, training data sets. A learning algorithm is biased for a particular input formula_1 if, when trained on each of these data sets, it is systematically incorrect when predicting the correct output for formula_1. A learning algorithm has high variance for a particular input formula_1 if it predicts different output values when trained on different training sets. The prediction error of a learned classifier is related to the sum of the bias and the variance of the learning algorithm. Generally, there is a tradeoff between bias and variance. A learning algorithm with low bias must be \"flexible\" so that it can fit the data well. But if the learning algorithm is too flexible, it will fit each training data set differently, and hence have high variance. A key aspect of many supervised learning methods is that they are able to adjust this tradeoff between bias and variance (either automatically or by providing a bias/variance parameter that the user can adjust).\n\nThe second issue is the amount of training data available relative to the complexity of the \"true\" function (classifier or regression function). If the true function is simple, then an \"inflexible\" learning algorithm with high bias and low variance will be able to learn it from a small amount of data. But if the true function is highly complex (e.g., because it involves complex interactions among many different input features and behaves differently in different parts of the input space), then the function will only be learnable from a very large amount of training data and using a \"flexible\" learning algorithm with low bias and high variance.\n\nA third issue is the dimensionality of the input space. If the input feature vectors have very high dimension, the learning problem can be difficult even if the true function only depends on a small number of those features. This is because the many \"extra\" dimensions can confuse the learning algorithm and cause it to have high variance. Hence, high input dimensionality typically requires tuning the classifier to have low variance and high bias. In practice, if the engineer can manually remove irrelevant features from the input data, this is likely to improve the accuracy of the learned function. In addition, there are many algorithms for feature selection that seek to identify the relevant features and discard the irrelevant ones. This is an instance of the more general strategy of dimensionality reduction, which seeks to map the input data into a lower-dimensional space prior to running the supervised learning algorithm.\n\nA fourth issue is the degree of noise in the desired output values (the supervisory target variables). If the desired output values are often incorrect (because of human error or sensor errors), then the learning algorithm should not attempt to find a function that exactly matches the training examples. Attempting to fit the data too carefully leads to overfitting. You can overfit even when there are no measurement errors (stochastic noise) if the function you are trying to learn is too complex for your learning model. In such a situation, the part of the target function that cannot be modeled \"corrupts\" your training data - this phenomenon has been called deterministic noise. When either type of noise is present, it is better to go with a higher bias, lower variance estimator.\n\nIn practice, there are several approaches to alleviate noise in the output values such as early stopping to prevent overfitting as well as detecting and removing the noisy training examples prior to training the supervised learning algorithm. There are several algorithms that identify noisy training examples and removing the suspected noisy training examples prior to training has decreased generalization error with statistical significance.\n\nOther factors to consider when choosing and applying a learning algorithm include the following:\n\n\nWhen considering a new application, the engineer can compare multiple learning algorithms and experimentally determine which one works best on the problem at hand (see cross validation). Tuning the performance of a learning algorithm can be very time-consuming. Given fixed resources, it is often better to spend more time collecting additional training data and more informative features than it is to spend extra time tuning the learning algorithms.\n\nThe most widely used learning algorithms are Support Vector Machines, linear regression, logistic regression, naive Bayes, linear discriminant analysis, decision trees, k-nearest neighbor algorithm and Neural Networks (Multilayer perceptron).\n\nGiven a set of formula_4 training examples of the form formula_5 such that formula_6 is the feature vector of the i-th example and formula_7 is its label (i.e., class), a learning algorithm seeks a function formula_8, where formula_9 is the input space and\nformula_10 is the output space. The function formula_11 is an element of some space of possible functions formula_12, usually called the \"hypothesis space\". It is sometimes convenient to\nrepresent formula_11 using a scoring function formula_14 such that formula_11 is defined as returning the formula_16 value that gives the highest score: formula_17. Let formula_18 denote the space of scoring functions.\n\nAlthough formula_12 and formula_18 can be any space of functions, many learning algorithms are probabilistic models where formula_11 takes the form of a conditional probability model formula_22, or formula_23 takes the form of a joint probability model formula_24. For example, naive Bayes and linear discriminant analysis are joint probability models, whereas logistic regression is a conditional probability model.\n\nThere are two basic approaches to choosing formula_23 or formula_11: empirical risk minimization and structural risk minimization. Empirical risk minimization seeks the function that best fits the training data. Structural risk minimization includes a \"penalty function\" that controls the bias/variance tradeoff.\n\nIn both cases, it is assumed that the training set consists of a sample of independent and identically distributed pairs, formula_27. In order to measure how well a function fits the training data, a loss function formula_28 is defined. For training example formula_29, the loss of predicting the value formula_30 is formula_31.\n\nThe \"risk\" formula_32 of function formula_11 is defined as the expected loss of formula_11. This can be estimated from the training data as\n\nIn empirical risk minimization, the supervised learning algorithm seeks the function formula_11 that minimizes formula_32. Hence, a supervised learning algorithm can be constructed by applying an optimization algorithm to find formula_11.\n\nWhen formula_11 is a conditional probability distribution formula_40 and the loss function is the negative log likelihood: formula_41, then empirical risk minimization is equivalent to maximum likelihood estimation.\n\nWhen formula_12 contains many candidate functions or the training set is not sufficiently large, empirical risk minimization leads to high variance and poor generalization. The learning algorithm is able\nto memorize the training examples without generalizing well. This is called overfitting.\n\nStructural risk minimization seeks to prevent overfitting by incorporating a regularization penalty into the optimization. The regularization penalty can be viewed as implementing a form of Occam's razor that prefers simpler functions over more complex ones.\n\nA wide variety of penalties have been employed that correspond to different definitions of complexity. For example, consider the case where the function formula_11 is a linear function of the form\n\nA popular regularization penalty is formula_45, which is the squared Euclidean norm of the weights, also known as the formula_46 norm. Other norms include the formula_47 norm, formula_48, and the formula_49 norm, which is the number of non-zero formula_50s. The penalty will be denoted by formula_51.\n\nThe supervised learning optimization problem is to find the function formula_11 that minimizes\n\nThe parameter formula_54 controls the bias-variance tradeoff. When formula_55, this gives empirical risk minimization with low bias and high variance. When formula_54 is large, the learning algorithm will have high bias and low variance. The value of formula_54 can be chosen empirically via cross validation.\n\nThe complexity penalty has a Bayesian interpretation as the negative log prior probability of formula_11, formula_59, in which case formula_60 is the posterior probabability of formula_11.\n\nThe training methods described above are \"discriminative training\" methods, because they seek to find a function formula_11 that discriminates well between the different output values (see discriminative model). For the special case where formula_24 is a joint probability distribution and the loss function is the negative log likelihood formula_64 a risk minimization algorithm is said to perform \"generative training\", because formula_23 can be regarded as a generative model that explains how the data were generated. Generative training algorithms are often simpler and more computationally efficient than discriminative training algorithms. In some cases, the solution can be computed in closed form as in naive Bayes and linear discriminant analysis.\n\nThere are several ways in which the standard supervised learning problem can be generalized:\n\n\n\n\n\n", "id": "20926", "title": "Supervised learning"}
{"url": "https://en.wikipedia.org/wiki?curid=18475546", "text": "Multivariate adaptive regression splines\n\nIn statistics, multivariate adaptive regression splines (MARS) is a form of regression analysis introduced by Jerome H. Friedman in 1991. It is a non-parametric regression technique\nand can be seen as an extension of linear models that automatically models nonlinearities and interactions between variables.\n\nThe term \"MARS\" is trademarked and licensed to Salford Systems. In order to avoid trademark infringements, many open source implementations of MARS are called \"Earth\".\n\nThis section introduces MARS using a few examples. We start with a set of data: a matrix of input variables \"x\", and a vector of the observed responses \"y\", with a response for each row in \"x\". For example, the data could be:\n\nHere there is only one independent variable, so the \"x\" matrix is just a single column. Given these measurements, we would like to build a model which predicts the expected \"y\" for a given \"x\".\nA linear model for the above data is\n\nThe hat on the formula_2 indicates that formula_2 is estimated from the data. The figure on the right shows a plot of this function: \na line giving the predicted formula_2 versus \"x\", with the original values of \"y\" shown as red dots.\n\nThe data at the extremes of \"x\" indicates that the relationship between \"y\" and \"x\" may be non-linear (look at the red dots relative to the regression line at low and high values of \"x\"). We thus turn to MARS to automatically build a model taking into account non-linearities. MARS software constructs a model from the given \"x\" and \"y\" as follows\n\nThe figure on the right shows a plot of this function: the predicted formula_2 versus \"x\", with the original values of y once again shown as red dots. The predicted response is now a better fit to the original \"y\" values.\n\nMARS has automatically produced a kink\nin the predicted \"y\" to take into account non-linearity.\nThe kink is produced by \"hinge functions\".\nThe hinge functions are the expressions starting with formula_7\n(where formula_8 \nis formula_9 if formula_10, else formula_11).\nHinge functions are described in more detail below.\n\nIn this simple example, we can easily see from the plot that\n\"y\" has a non-linear relationship with \"x\"\n(and might perhaps guess that y varies with the square of \"x\").\nHowever, in general there will be multiple \nindependent variables,\nand the relationship between \"y\" and these variables will be unclear\nand not easily visible by plotting.\nWe can use MARS to discover that non-linear relationship.\n\nAn example MARS expression with multiple variables is\n\nThis expression models air pollution (the ozone level)\nas a function of the temperature and a few other variables.\nNote that the last term in the formula (on the last line)\nincorporates an interaction between formula_13\nand formula_14.\n\nThe figure on the right plots the predicted \nformula_15 as formula_13 and \nformula_14 vary,\nwith the other variables fixed at their median values.\nThe figure shows that wind does not affect the ozone\nlevel unless visibility is low.\nWe see that MARS can build quite flexible regression surfaces\nby combining hinge functions.\n\nTo obtain the above expression, the MARS model building procedure\nautomatically selects which variables to use (some variables are\nimportant, others not), the positions of the kinks in the hinge\nfunctions, and how the hinge functions are combined.\n\nMARS builds models of the form\n\nThe model is a weighted sum of basis functions\nformula_19.\nEach formula_20 is a constant coefficient.\nFor example, each line in the formula for ozone above is one basis function\nmultiplied by its coefficient.\n\nEach basis function\nformula_19\ntakes one of the following three forms:\n\n1) a constant 1. There is just one such term, the intercept.\nIn the ozone formula above, the intercept term is 5.2.\n\n2) a \"hinge\" function.\nA hinge function has the form \nformula_22\nor \nformula_23.\nMARS automatically selects variables\nand values of those variables for knots of the hinge functions.\nExamples of such basis functions can be seen\nin the middle three lines of the ozone formula.\n\n3) a product of two or more hinge functions.\nThese basis functions can model interaction between two or more variables.\nAn example is the last line of the ozone formula.\n\nHinge functions are a key part of MARS models. A hinge function takes the form\nor \nwhere formula_26 is a constant, called the \"knot\".\nThe figure on the right shows a mirrored pair of hinge functions with a knot at 3.1.\n\nA hinge function is zero for part of its range, so can be used to partition the data into disjoint regions, each of which can be treated independently. Thus for example a mirrored pair of hinge functions in the expression\ncreates the piecewise linear graph shown for the simple MARS model in the previous section.\n\nOne might assume that only piecewise linear functions can be formed from hinge functions, but hinge functions can be multiplied together to form non-linear functions.\n\nHinge functions are also called ramp, hockey stick, or rectifier functions. Instead of the formula_7 notation used in this article, hinge functions are often represented by formula_29 where formula_30 means take the positive part.\n\nMARS builds a model in two phases:\nthe forward and the backward pass.\nThis two-stage approach is the same as that used by \nrecursive partitioning trees.\n\nMARS starts with a model which consists of just the intercept term\n(which is the mean of the response values).\n\nMARS then repeatedly adds basis function in pairs to the model.\nAt each step it finds the pair of basis functions that \ngives the maximum reduction in sum-of-squares\nresidual error\n(it is a greedy algorithm).\nThe two basis functions in the pair\nare identical except that a different\nside of a mirrored hinge function is used for each function.\nEach new basis function consists of \na term already in the model \nmultiplied by a new hinge function.\nA hinge function is defined by a variable and a knot,\nso to add a new basis function, MARS must search over\nall combinations of the following:\n\n1) existing terms (called \"parent terms\" in this context)\n\n2) all variables (to select one for the new basis function)\n\n3) all values of each variable (for the knot of the new hinge function).\n\nTo calculate the coefficient of each term\nMARS applies a linear regression over the terms.\n\nThis process of adding terms continues until\nthe change in residual error is too small to continue\nor until the maximum number of terms is reached.\nThe maximum number of terms\nis specified by the user before model building starts.\n\nThe search at each step is done in a brute force fashion,\nbut a key aspect of MARS is that\nbecause of the nature of hinge functions\nthe search can be done relatively\nquickly using a fast least-squares update technique.\nActually, the search is not quite brute force.\nThe search can be sped up with a heuristic \nthat reduces the number\nof parent terms to consider at each step\n(\"Fast MARS\"\n\nThe forward pass usually builds an overfit model.\n(An overfit model has a good fit to the data used to build\nthe model but will not generalize well to new data.)\nTo build a model with better generalization ability,\nthe backward pass prunes the model.\nIt removes terms one by one, \ndeleting the least effective term at each step\nuntil it finds the best submodel.\nModel subsets are compared using the GCV criterion described below.\n\nThe backward pass has an advantage over the forward pass:\nat any step it can choose any term to delete,\nwhereas the forward pass \nat each step can only see the next pair of terms.\n\nThe forward pass adds terms in pairs,\nbut the backward pass typically discards one side of the pair\nand so terms are often not seen in pairs in the final model.\nA paired hinge can be seen in \nthe equation for formula_2 in the\nfirst MARS example above;\nthere are no complete pairs retained in the ozone example.\n\nThe backward pass uses generalized cross validation (GCV) to compare the performance of model subsets in order to choose the best subset: lower values of GCV are better. \nThe GCV is a form of\nregularization:\nit trades off goodness-of-fit against model complexity.\n\nThe formula for the GCV is\nwhere RSS is the residual sum-of-squares\nmeasured on the training data and N is the\nnumber of observations (the number of rows in the x matrix).\n\nThe \"EffectiveNumberOfParameters\" is defined in\nthe MARS context as\nwhere Penalty is about 2 or 3 (the\nMARS software allows the user to preset Penalty).\n\nNote that \nis the number of hinge-function knots, \nso the formula penalizes the addition of knots.\nThus the GCV formula adjusts (i.e. increases) the training RSS to take into\naccount the flexibility of the model.\nWe penalize flexibility because models that are too flexible will model the specific realization of noise in the data instead of just the systematic structure of the data.\n\nGeneralized Cross Validation is so named because\nit uses a formula to approximate the error\nthat would be determined by leave-one-out validation.\nIt is just an approximation but works well in practice.\nGCVs were introduced by Craven and\nWahba and extended by Friedman for MARS.\n\nOne constraint has already been mentioned: the user\ncan specify the maximum number of terms in the forward pass.\n\nA further constraint can be placed on the forward pass\nby specifying a maximum allowable degree of interaction.\nTypically only one or two degrees of interaction are allowed,\nbut higher degrees can be used when the data warrants it.\nThe maximum degree of interaction in the first MARS example\nabove is one (i.e. no interactions or an \"additive model\"); \nin the ozone example it is two.\n\nOther constraints on the forward pass are possible.\nFor example, the user can specify that interactions are allowed \nonly for certain input variables.\nSuch constraints could make sense because of knowledge\nof the process that generated the data.\n\nNo regression modeling technique is best for all situations.\nThe guidelines below are intended to give an idea of the pros and cons of MARS, \nbut there will be exceptions to the guidelines.\nIt is useful to compare MARS to recursive partitioning and this is done below.\n(Recursive partitioning is also commonly called \"regression trees\",\n\"decision trees\", or CART;\nsee the recursive partitioning article for details).\n\n\n\n\n\nSeveral free and commercial software packages are available for fitting MARS-type models.\n\n\n", "id": "18475546", "title": "Multivariate adaptive regression splines"}
{"url": "https://en.wikipedia.org/wiki?curid=19667111", "text": "Statistical relational learning\n\nStatistical relational learning (SRL) is a subdiscipline of artificial intelligence and machine learning that is concerned with domain models that exhibit both uncertainty (which can be dealt with using statistical methods) and complex, relational structure. Note that SRL is sometimes called Relational Machine Learning (RML) in the literature. Typically, the knowledge representation formalisms developed in SRL use (a subset of) first-order logic to describe relational properties of a domain in a general manner (universal quantification) and draw upon probabilistic graphical models (such as Bayesian networks or Markov networks) to model the uncertainty; some also build upon the methods of inductive logic programming. Significant contributions to the field have been made since the late 1990s.\n\nAs is evident from the characterization above, the field is not strictly limited to learning aspects; it is equally concerned with reasoning (specifically probabilistic inference) and knowledge representation. Therefore, alternative terms that reflect the main foci of the field include \"statistical relational learning and reasoning\" (emphasizing the importance of reasoning) and \"first-order probabilistic languages\" (emphasizing the key properties of the languages with which models are represented).\n\nA number of canonical tasks are associated with statistical relational learning, the most common ones being\n\n\nOne of the fundamental design goals of the representation formalisms developed in SRL is to abstract away from concrete entities and to represent instead general principles that are intended to be universally applicable. Since there are countless ways in which such principles can be represented, many representation formalisms have been proposed in recent years. In the following, some of the more common ones are listed in alphabetical order:\n\n\n\n", "id": "19667111", "title": "Statistical relational learning"}
{"url": "https://en.wikipedia.org/wiki?curid=32402755", "text": "Hyperparameter (machine learning)\n\nIn machine learning, a hyperparameter is a parameter whose value is set before the learning process begins. By contrast, the values of other parameters are derived via training.\n\nDifferent model training algorithms require different hyperparameters, some simple algorithms (such as ordinary least squares regression) require none. Given these hyperparameters, the training algorithm learns the parameters from the data. For instance, LASSO is an algorithm that adds a regularization hyperparameter to OLS regression, which has to be set before estimating the parameters through the training algorithm.\n\nThe time required to train and test a model can depend upon the choice of its hyperparameters. An inherent stochasticity in learning directly implies that the empirical hyperparameter performance is not necessarily its true performance. A hyperparameter is usually of continuous or integer type, leading to mixed-type optimization problems. The existence of some hyperparameters is conditional upon the value of others, e.g. the size of each hidden layer in a neural network can be conditional upon the number of layers.\n\nMost performance variation can be attributed to just a few hyperparameters. For an LSTM, while the learning rate followed by the network size are its most crucial hyperparameters, others namely batching and momentum have no significant effect on its performance.\n\nHyperparameter optimization finds a tuple of hyperparameters that yields an optimal model which minimizes a predefined loss function on given test data. The objective function takes a tuple of hyperparameters and returns the associated loss.\n\n", "id": "32402755", "title": "Hyperparameter (machine learning)"}
{"url": "https://en.wikipedia.org/wiki?curid=13750669", "text": "Elastic matching\n\nElastic matching is one of the pattern recognition techniques in computer science. Elastic matching (EM) is also known as deformable template, flexible matching, or nonlinear template matching.\n\nElastic matching can be defined as an optimization problem of two-dimensional warping specifying corresponding pixels between subjected images.\n\n", "id": "13750669", "title": "Elastic matching"}
{"url": "https://en.wikipedia.org/wiki?curid=1331441", "text": "Document classification\n\nDocument classification or document categorization is a problem in library science, information science and computer science. The task is to assign a document to one or more classes or categories. This may be done \"manually\" (or \"intellectually\") or algorithmically. The intellectual classification of documents has mostly been the province of library science, while the algorithmic classification of documents is mainly in information science and computer science. The problems are overlapping, however, and there is therefore interdisciplinary research on document classification.\n\nThe documents to be classified may be texts, images, music, etc. Each kind of document possesses its special classification problems. When not otherwise specified, text classification is implied.\n\nDocuments may be classified according to their subjects or according to other attributes (such as document type, author, printing year etc.). In the rest of this article only subject classification is considered. There are two main philosophies of subject classification of documents: the content-based approach and the request-based approach.\n\nContent-based classification is classification in which the weight given to particular subjects in a document determines the class to which the document is assigned. It is, for example, a common rule for classification in libraries, that at least 20% of the content of a book should be about the class to which the book is assigned. In automatic classification it could be the number of times given words appears in a document.\n\nRequest-oriented classification (or -indexing) is classification in which the anticipated request from users is influencing how documents are being classified. The classifier asks himself: “Under which descriptors should this entity be found?” and “think of all the possible queries and decide for which ones the entity at hand is relevant” (Soergel, 1985, p. 230).\n\nRequest-oriented classification may be classification that is targeted towards a particular audience or user group. For example, a library or a database for feminist studies may classify/index documents differently when compared to a historical library. It is probably better, however, to understand request-oriented classification as \"policy-based classification\": The classification is done according to some ideals and reflects the purpose of the library or database doing the classification. In this way it is not necessarily a kind of classification or indexing based on user studies. Only if empirical data about use or users are applied should request-oriented classification be regarded as a user-based approach.\n\nSometimes a distinction is made between assigning documents to classes (\"classification\") versus assigning subjects to documents (\"subject indexing\") but as Frederick Wilfrid Lancaster has argued, this distinction is not fruitful. \"These terminological distinctions,” he writes, “are quite meaningless and only serve to cause confusion” (Lancaster, 2003, p. 21). The view that this distinction is purely superficial is also supported by the fact that a classification system may be transformed into a thesaurus and vice versa (cf., Aitchison, 1986, 2004; Broughton, 2008; Riesthuis & Bliedung, 1991). Therefore, is the act of labeling a document (say by assigning a term from a controlled vocabulary to a document) at the same time to assign that document to the class of documents indexed by that term (all documents indexed or classified as X belong to the same class of documents).\n\nAutomatic document classification tasks can be divided into three sorts: supervised document classification where some external mechanism (such as human feedback) provides information on the correct classification for documents, unsupervised document classification (also known as document clustering), where the classification must be done entirely without reference to external information, and semi-supervised document classification, where parts of the documents are labeled by the external mechanism. There are several software products under various license models available.\n\nAutomatic document classification techniques include:\n\nClassification techniques have been applied to\n\n\n", "id": "1331441", "title": "Document classification"}
{"url": "https://en.wikipedia.org/wiki?curid=30928751", "text": "Multilinear principal component analysis\n\nMultilinear principal component analysis (MPCA) is a multilinear extension of principal component analysis (PCA). MPCA is employed in the analysis of n-way arrays, i.e. a cube or hyper-cube of numbers, also informally referred to as a \"data tensor\". N-way arrays may be decomposed, analyzed, or modeled by \nThe origin of MPCA can be traced back to the Tucker decomposition and Peter Kroonenberg's \"M-mode PCA/3-mode PCA\" work. In 2000, De Lathauwer et al. restated Tucker and Kroonenberg's work in clear and concise numerical computational terms in their SIAM paper entitled \"Multilinear Singular Value Decomposition\", (HOSVD) and in their paper \"On the Best Rank-1 and Rank-(R, R, ..., R ) Approximation of Higher-order Tensors\".\n\nCirca 2001, Vasilescu reframed the data analysis, recognition and synthesis problems as multilinear tensor problems based on the insight that most observed data are the compositional consequence of several causal factors of data formation, and are well suited for multi-modal data tensor analysis. The power of the tensor framework was showcased by analyzing human motion joint angles, facial images or textures in terms of their causal factors of data formation in the following works: Human Motion Signatures\n\n(CVPR 2001, ICPR 2002), face recognition - TensorFaces,\n(ECCV 2002, CVPR 2003, etc.) and computer graphics -- TensorTextures(Siggraph 2004).\n\nHistorically, MPCA has been referred to as \"M-mode PCA\", a terminology which was coined by Peter Kroonenberg in 1980. In 2005, Vasilescu and Terzopoulos introduced the Multilinear PCA terminology as a way to better differentiate between linear and multilinear tensor decomposition, as well as, to better differentiate between the work that computed 2nd order statistics associated with each data tensor mode(axis), and subsequent work on Multilinear Independent Component Analysis that computed higher order statistics associated with each tensor mode/axis.\n\nMultilinear PCA may be applied to compute the causal factors of data formation, or as signal processing tool on data tensors whose individual observation have either been vectorized \n, or whose observations are treated as matrix and concatenated into a data tensor.\n\nMPCA computes a set of orthonormal matrices associated with each mode of the data tensor which are analogous to the orthonormal row and column space of a matrix computed by the matrix SVD. This transformation aims to capture as high a variance as possible, accounting for as much of the variability in the data associated with each data tensor mode(axis).\n\nThe MPCA solution follows the alternating least square (ALS) approach. It is iterative in nature.\nAs in PCA, MPCA works on centered data. Centering is a little more complicated for tensors, and it is problem dependent.\n\nMPCA features: Supervised MPCA feature selection is used in object recognition while unsupervised MPCA feature selection is employed in visualization task.\n\nVarious extensions of MPCA have been developed:\n\n\n", "id": "30928751", "title": "Multilinear principal component analysis"}
{"url": "https://en.wikipedia.org/wiki?curid=9732182", "text": "Base rate\n\nIn probability and statistics, base rate generally refers to the (base) class probabilities unconditioned on featural evidence, frequently also known as prior probabilities. For example, if it were the case that 1% of the public were \"medical professionals\", and 99% of the public were \"not\" \"medical professionals\", then the base rate of medical professionals is simply 1%.\nIn the sciences, including medicine, the base rate is critical for comparison. It may at first seem impressive that 1000 people beat their winter cold while using 'Treatment X', until we look at the entire 'Treatment X' population and find that the base rate of success is only 1/100 (i.e. 100,000 people tried the treatment, but the other 99,000 people never really beat their winter cold). The treatment's effectiveness is clearer when such base rate information (i.e. \"1000 people... out of how many?\") is available. Note that controls may likewise offer further information for comparison; maybe the control groups, who were using no treatment at all, had their own base rate success of 5/100. Controls thus indicate that 'Treatment X' makes things worse, despite that initial proud claim about 1000 people.\n\nThe normative method for integrating base rates (prior probabilities) and featural evidence (likelihoods) is given by Bayes' rule.\n\nA large number of psychological studies have examined a phenomenon called base-rate neglect\" or \"base rate fallacy in which category base rates are not integrated with featural evidence in the normative manner. Mathematician Keith Devlin provides an illustration of the risks of this: He asks us to imagine that there is a type of cancer that afflicts 1% of all people. A doctor then says there is a test for that cancer which is about 80% reliable. He also says that the test provides a positive result for 100% of people who have the cancer, but it also results in a 'false positive' for 20% of people - who do not have the cancer. Now, if we test positive, we may be tempted to think it is 80% likely that we have the cancer. Devlin explains that, in fact, our odds are less than 5%. What is missing from the jumble of statistics is the most relevant base rate information. We should ask the doctor, \"\"Out of the number of people who test positive (this is the base rate group that we care about), how many have the cancer?\"\" In assessing the probability that a given individual is a member of a particular class, we must account for other information besides the base rate. In particular, we must account for featural evidence. For example, when we see a person wearing a white doctor's coat and stethoscope, and prescribing medication, we have evidence which may allow us to conclude that the probability of this \"particular\" individual being a \"medical professional\" is considerably greater than the category base rate of 1%.\n", "id": "9732182", "title": "Base rate"}
{"url": "https://en.wikipedia.org/wiki?curid=33762888", "text": "Inferential theory of learning\n\nInferential theory of learning (ITL) is an area of machine learning which describes inferential processes performed by learning agents. ITL has been developed by Ryszard S. Michalski in 1980s. In ITL learning process is viewed as a search (inference) through hypotheses space guided by a specific goal. Results of learning need to be stored, in order to be used in the future.\n\n", "id": "33762888", "title": "Inferential theory of learning"}
{"url": "https://en.wikipedia.org/wiki?curid=34042707", "text": "Coupled pattern learner\n\nCoupled Pattern Learner (CPL) is a machine learning algorithm which couples the semi-supervised learning of categories and relations to forestall the problem of semantic drift associated with boot-strap learning methods.\n\nSemi-supervised learning approaches using a small number of labeled examples with many unlabeled examples are usually unreliable as they produce an internally consistent, but incorrect set of extractions. CPL solves this problem by simultaneously learning classifiers for many different categories and relations in the presence of an ontology defining constraints that couple the training of these classifiers. It was introduced by Andrew Carlson, Justin Betteridge, Estevam R. Hruschka Jr. and Tom M. Mitchell in 2009.\n\nCPL is an approach to semi-supervised learning that yields more accurate results by coupling the training of many information extractors. Basic idea behind CPL is that semi-supervised training of a single type of extractor such as ‘coach’ is much more difficult than simultaneously training many extractors that cover a variety of inter-related entity and relation types. Using prior knowledge about the relationships between these different entities and relations CPL makes unlabeled data as a useful constraint during training. For e.g., ‘coach(x)’ implies ‘person(x)’ and ‘not sport(x)’.\n\nCPL primarily relies on the notion of coupling the learning of multiple functions so as to constrain the semi-supervised learning problem. CPL constrains the learned function in two ways.\n\nEach predicate P in the ontology has a list of other same-arity predicates with which P is mutually exclusive. If A is mutually exclusive with predicate B, A’s positive instances and patterns become negative instances and negative patterns for B. For example, if ‘city’, having an instance ‘Boston’ and a pattern ‘mayor of arg1’, is mutually exclusive with ‘scientist’, then ‘Boston’ and ‘mayor of arg1’ will become a negative instance and a negative pattern respectively for ‘scientist.’ Further, Some categories are declared to be a subset of another category. For e.g., ‘athlete’ is a subset of ‘person’.\n\nThis is a type checking information used to couple the learning of relations and categories. For example, the arguments of the ‘ceoOf’ relation are declared to be of the categories ‘person’ and ‘company’. CPL does not promote a pair of noun phrases as an instance of a relation unless the two noun phrases are classified as belonging to the correct argument types.\n\nFollowing is a quick summary of the CPL algorithm. \n\nA large corpus of Part-Of-Speech tagged sentences and an initial ontology with predefined categories, relations, mutually exclusive relationships between same-arity predicates, subset relationships between some categories, seed instances for all predicates, and seed patterns for the categories.\n\nCPL finds new candidate instances by using newly promoted patterns to extract the noun phrases that co-occur with those patterns in the text corpus. CPL extracts,\n\nCandidate instances and patterns are filtered to maintain high precision, and to avoid extremely specific patterns. An instance is only considered for assessment if it co-occurs with at least two promoted patterns in the text corpus, and if its co-occurrence count with all promoted patterns is at least three times greater than its co-occurrence count with negative patterns.\n\nCPL ranks candidate instances using the number of promoted patterns that they co-occur with so that candidates that occur with more patterns are ranked higher. Patterns are ranked using an estimate of the precision of each pattern.\n\nCPL ranks the candidates according to their assessment scores and promotes at most 100 instances and 5 patterns for each predicate. Instances and patterns are only promoted if they co-occur with at least two promoted patterns or instances, respectively.\n\nMeta-Bootstrap Learner (MBL) was also proposed by the authors of CPL in. Meta-Bootstrap learner couples the training of multiple extraction techniques with a multi-view constraint, which requires the extractors to agree. It makes addition of coupling constraints on top of existing extraction algorithms, while treating them as black boxes, feasible. MBL assumes that the errors made by different extraction techniques are independent. Following is a quick summary of MBL.\n\nSubordinate algorithms used with MBL do not promote any instance on their own, they report the evidence about each candidate to MBL and MBL is responsible for promoting instances.\n\nIn their paper authors have presented results showing the potential of CPL to contribute new facts to existing repository of semantic knowledge, Freebase \n\n\n", "id": "34042707", "title": "Coupled pattern learner"}
{"url": "https://en.wikipedia.org/wiki?curid=34061548", "text": "Feature scaling\n\nFeature scaling is a method used to standardize the range of independent variables or features of data. In data processing, it is also known as data normalization and is generally performed during the data preprocessing step.\n\nSince the range of values of raw data varies widely, in some machine learning algorithms, objective functions will not work properly without normalization. For example, the majority of classifiers calculate the distance between two points by the Euclidean distance. If one of the features has a broad range of values, the distance will be governed by this particular feature. Therefore, the range of all features should be normalized so that each feature contributes approximately proportionately to the final distance.\n\nAnother reason why feature scaling is applied is that gradient descent converges much faster with feature scaling than without it.\n\nThe simplest method is rescaling the range of features to scale the range in [0, 1] or [−1, 1]. Selecting the target range depends on the nature of the data. The general formula is given as:\n\nformula_1\n\nwhere formula_2 is an original value, formula_3 is the normalized value. For example, suppose that we have the students' weight data, and the students' weights span [160 pounds, 200 pounds]. To rescale this data, we first subtract 160 from each student's weight and divide the result by 40 (the difference between the maximum and minimum weights).\n\nformula_4\n\nwhere formula_2 is an original value, formula_3 is the normalized value.\n\nIn machine learning, we can handle various types of data, e.g. audio signals and pixel values for image data, and this data can include multiple dimensions. Feature standardization makes the values of each feature in the data have zero-mean (when subtracting the mean in the numerator) and unit-variance. This method is widely used for normalization in many machine learning algorithms (e.g., support vector machines, logistic regression, and neural networks) . The general method of calculation is to determine the distribution mean and standard deviation for each feature. Next we subtract the mean from each feature. Then we divide the values (mean is already subtracted) of each feature by its standard deviation.\n\nformula_7\n\nWhere formula_2 is the original feature vector, formula_9 is the mean of that feature vector, and formula_10 is its standard deviation.\n\nAnother option that is widely used in machine-learning is to scale the components of a feature vector such that the complete vector has length one. This usually means dividing each component by the Euclidean length of the vector: \n\nIn some applications (e.g. Histogram features) it can be more practical to use the L1 norm (i.e. Manhattan Distance, City-Block Length or Taxicab Geometry) of the feature vector. This is especially important if in the following learning steps the Scalar Metric is used as a distance measure.\n\nIn stochastic gradient descent, feature scaling can sometimes improve the convergence speed of the algorithm . In support vector machines, it can reduce the time to find support vectors. Note that feature scaling changes the SVM result .\n\n\n\n", "id": "34061548", "title": "Feature scaling"}
{"url": "https://en.wikipedia.org/wiki?curid=34072838", "text": "Preference learning\n\nPreference learning is a subfield in machine learning in which the goal is to learn a predictive preference model from observed preference information. In the view of supervised learning, preference learning trains on a set of items which have preferences toward labels or other items and predicts the preferences for all items.\n\nWhile the concept of preference learning has been emerged for some time in many fields such as economics, it's a relatively new topic in Artificial Intelligence research. Several workshops have been discussing preference learning and related topics in the past decade.\n\nThe main task in preference learning concerns problems in \"learning to rank\". According to different types of preference information observed, the tasks are categorized as three main problems in the book \"Preference Learning\":\n\nIn label ranking, the model has an instance space formula_1 and a finite set of labels formula_2. The preference information is given in the form formula_3 indicating instance formula_4 shows preference in formula_5 rather than formula_6. A set of preference information is used as training data in the model. The task of this model is to find a preference ranking among the labels for any instance.\n\nIt was observed some conventional classification problems can be generalized in the framework of label ranking problem: if a training instance formula_4 is labeled as class formula_5, it implies that formula_9. In the multi-label case, formula_4 is associated with a set of labels formula_11 and thus the model can extract a set of preference information formula_12. Training a preference model on this preference information and the classification result of an instance is just the corresponding top ranking label.\n\nInstance ranking also has the instance space formula_13 and label set formula_14. In this task, labels are defined to have a fixed order formula_15 and each instance formula_16 is associated with a label formula_17. Giving a set of instances as training data, the goal of this task is to find the ranking order for a new set of instances.\n\nObject ranking is similar to instance ranking except that no labels are associated with instances. Given a set of pairwise preference information in the form formula_18 and the model should find out a ranking order among instances.\n\nThere are two practical representations of the preference information formula_19. One is assigning formula_20 and formula_21 with two real numbers formula_22 and formula_23 respectively such that formula_24. Another one is assigning a binary value formula_25 for all pairs formula_26 denoting whether formula_19 or formula_28. Corresponding to these two different representations, there are two different techniques applied to the learning process.\n\nIf we can find a mapping from data to real numbers, ranking the data can be solved by ranking the real numbers. This mapping is called utility function. For label ranking the mapping is a function formula_29 such that formula_30. For instance ranking and object ranking, the mapping is a function formula_31.\n\nFinding the utility function is a regression learning problem which is well developed in machine learning.\n\nThe binary representation of preference information is called preference relation. For each pair of alternatives (instances or labels), a binary predicate can be learned by conventional supervising learning approach. Fürnkranz and Hüllermeier proposed this approach in label ranking problem. For object ranking, there is an early approach by Cohen et al.\n\nUsing preference relations to predict the ranking will not be so intuitive. Since preference relation is not transitive, it implies that the solution of ranking satisfying those relations would sometimes be unreachable, or there could be more than one solution. A more common approach is to find a ranking solution which is maximally consistent with the preference relations. This approach is a natural extension of pairwise classification.\n\nPreference learning can be used in ranking search results according to feedback of user preference. Given a query and a set of documents, a learning model is used to find the ranking of documents corresponding to the relevance with this query. More discussions on research in this field can be found in Tie-Yan Liu's survey paper.\n\nAnother application of preference learning is recommender systems. Online store may analyze customer's purchase record to learn a preference model and then recommend similar products to customers. Internet content providers can make use of user's ratings to provide more user preferred contents.\n\n\n", "id": "34072838", "title": "Preference learning"}
{"url": "https://en.wikipedia.org/wiki?curid=21985449", "text": "Proactive learning\n\nProactive learning is a generalization of active learning designed to relax unrealistic assumptions and thereby reach practical applications.\n\n\"Active learning seeks to select the most informative unlabeled instances and ask an omniscient oracle for their labels, so as to retrain a learning algorithm maximizing accuracy. However, the oracle is assumed to be infallible (never wrong), indefatigable (always answers), individual (only one oracle), and insensitive to costs (always free or always charges the same).\"\n\n\"In real life, it is possible and more general to have multiple sources of information with differing reliabilities or areas of expertise. Active learning also assumes that the single oracle is perfect, always providing a correct answer when requested. In reality, though, an \"oracle\" (if we generalize the term to mean any source of expert information) may be incorrect (fallible) \nwith a probability that should be a function of the difficulty of the question. Moreover, an oracle may be reluctant – it may refuse to answer if it is too uncertain or too busy. Finally, active learning presumes the oracle is either free or charges uniform cost in label elicitation.\nSuch an assumption is naive since cost is likely to be regulated by difficulty (amount of work required to formulate an answer) or other factors.\"\n\nProactive learning relaxes all four of these assumptions, relying on a decision-theoretic approach to jointly select the optimal oracle and instance, by casting the problem as a utility optimization problem subject to a budget constraint.\n", "id": "21985449", "title": "Proactive learning"}
{"url": "https://en.wikipedia.org/wiki?curid=387537", "text": "Computational learning theory\n\nIn computer science, computational learning theory (or just learning theory) is a subfield of Artificial Intelligence devoted to studying the design and analysis of machine learning algorithms.\n\nTheoretical results in machine learning mainly deal with a type of inductive learning called supervised learning. In supervised\nlearning, an algorithm is given samples that are labeled in some useful way. For example, the samples might be descriptions of\nmushrooms, and the labels could be whether or not the mushrooms are edible. The algorithm takes these previously labeled samples and\nuses them to induce a classifier. This classifier is a function that assigns labels to samples including samples that have never been\npreviously seen by the algorithm. The goal of the supervised learning algorithm is to optimize some measure of performance such as\nminimizing the number of mistakes made on new samples.\n\nIn addition to performance bounds, computational learning theory studies the time complexity and feasibility of learning. In\ncomputational learning theory, a computation is considered feasible if it can be done in polynomial time. There are two kinds of time\ncomplexity results:\n\n\nNegative results often rely on commonly believed, but yet unproven assumptions, such as:\n\n\nThere are several different approaches to computational learning theory. These differences are based on making assumptions about the\ninference principles used to generalize from limited data. This includes different definitions of probability (see frequency probability, Bayesian probability) and different assumptions on the generation of samples. The different approaches include :\n\n\nComputational learning theory has led to several practical algorithms. For example, PAC theory inspired boosting, VC theory led to support vector machines, and Bayesian inference led to belief networks (by Judea Pearl).\n\n\n\n\n\n\n\n\n\n\n\n\nA description of some of these publications is given at important publications in machine learning.\n\n", "id": "387537", "title": "Computational learning theory"}
{"url": "https://en.wikipedia.org/wiki?curid=33998310", "text": "Mountain car problem\n\nMountain Car, a standard testing domain in Reinforcement Learning, is a problem in which an under-powered car must drive up a steep hill. Since gravity is stronger than the car's engine, even at full throttle, the car cannot simply accelerate up the steep slope. The car is situated in a valley and must learn to leverage potential energy by driving up the opposite hill before the car is able to make it to the goal at the top of the rightmost hill. The domain has been used as a test bed in various Reinforcement Learning papers.\n\nThe mountain car problem, although fairly simple, is commonly applied because it requires a reinforcement learning agent to learn on two continuous variables: position and velocity. For any given state (position and velocity) of the car, the agent is given the possibility of driving left, driving right, or not using the engine at all. In the standard version of the problem, the agent receives a negative reward at every time step when the goal is not reached; the agent has no information about the goal until an initial success.\n\nThe mountain car problem appeared first in Andrew Moore's PhD Thesis (1990). It was later more strictly defined in Singh and Sutton's Reinforcement Leaning paper with eligibility traces. The problem became more widely studied when Sutton and Barto added it to their book Reinforcement Learning: An Introduction (1998). Throughout the years many versions of the problem have been used, such as those which modify the reward function, termination condition, and/or the start state.\n\nQ-learning and similar techniques for mapping discrete states to discrete actions need to be extended to be able to deal with the continuous state space of the problem. Approaches often fall into one of two categories, state space discretization or function approximation.\n\nIn this approach, two continuous state variables are pushed into discrete states by bucketing each continuous variable into multiple discrete states. This approach works with properly tuned parameters but a disadvantage is information gathered from one state is not used to evaluate another state. Tile coding can be used to improve discretization and involves continuous variables mapping into sets of buckets offset from one another. Each step of training has a wider impact on the value function approximation because when the offset grids are summed, the information is diffused.\n\nFunction approximation is another way to solve the mountain car. By choosing a set of basis functions beforehand, or by generating them as the car drives, the agent can approximate the value function at each state. Unlike the step-wise version of the value function created with discretization, function approximation can more cleanly estimate the true smooth function of the mountain car domain.\n\nAn interesting aspect of the problem involves the delay of actual reward. The agent isn't able to learn about the goal until a successful completion. Given a naive approach without traces, for each trial the car can only backup the reward of the goal slightly. This is a problem for naive discretization because each discrete state will only be backup once, taking a larger number of episodes to learn the problem. To alleviate this problem, traces will automatically backup the reward given to states before dramatically increasing the speed of learning.\n\nThe mountain car problem has undergone many iterations. This section will focus on the standard well defined version from Sutton (2008).\n\nTwo-dimensional continuous state space.\n\nformula_1\n\nformula_2\n\nOne-dimensional discrete action space.\n\nformula_3\n\nFor every time step:\n\nformula_4\n\nFor every time step:\n\nformula_5\n\nformula_6\n\nformula_7\n\nOptionally, many implementations include randomness in both parameters to show better generalized learning.\n\nformula_8\n\nformula_9\n\nEnd the simulation when:\n\nformula_10\n\nThere are many versions of the mountain car which deviate in different ways from the standard model. Variables that vary include but are not limited to changing the constants (gravity and steepness) of the problem so specific tuning for specific policies become irrelevant and altering the reward function to affect the agent's ability to learn in a different manner. An example is changing the reward to be equal to the distance from the goal, or changing the reward to zero everywhere and one at the goal. Additionally we can use a 3D mountain car with a 4D continuous state space.\n\n\n", "id": "33998310", "title": "Mountain car problem"}
{"url": "https://en.wikipedia.org/wiki?curid=33890474", "text": "Leave-one-out error\n\n\nformula_1\n\nformula_6, with formula_4and formula_5 going to zero for formula_9\n\nX and Y ⊂ R being respectively an input and an output space, we consider a training set \n\nformula_10\nof size m in formula_11 drawn i.i.d. from an unknown distribution D. A learning algorithm is a function formula_12 from formula_13 into formula_14which maps a learning set S onto a function formula_15 from X to Y. To avoid complex notation, we consider only deterministic algorithms. It is also assumed that the algorithm formula_16 is symmetric with respect to S, i.e. it does not depend on the order of the elements in the training set. Furthermore, we assume that all functions are measurable and all sets are countable which does not limit the interest of the results presented here.\n\nThe loss of an hypothesis f with respect to an example formula_17 is then defined as formula_18.\nThe empirical error of f is formula_19.\n\nThe true error of f is formula_20\n\nGiven a training set S of size m, we will build, for all i = 1...,m, modified training sets as follows:\nformula_21\nformula_22\n\n", "id": "33890474", "title": "Leave-one-out error"}
{"url": "https://en.wikipedia.org/wiki?curid=35887507", "text": "Representer theorem\n\nIn statistical learning theory, a representer theorem is any of several related results stating that a minimizer formula_1 of a regularized empirical risk function defined over a reproducing kernel Hilbert space can be represented as a finite linear combination of kernel products evaluated on the input points in the training set data.\n\nThe following Representer Theorem and its proof are due to Schölkopf, Herbrich, and Smola:\n\nTheorem: Let formula_2 be a nonempty set and formula_3 a positive-definite real-valued kernel on formula_4 with corresponding reproducing kernel Hilbert space formula_5. Given a training sample formula_6, a strictly monotonically increasing real-valued function formula_7, and an arbitrary empirical risk function formula_8, then for any formula_9 satisfying\n\nformula_1 admits a representation of the form:\n\nwhere formula_13 for all formula_14.\n\nProof:\nDefine a mapping\n\n(so that formula_16 is itself a map formula_17). Since formula_3 is a reproducing kernel, then\n\nwhere formula_20 is the inner product on formula_5.\n\nGiven any formula_22, one can use orthogonal projection to decompose any formula_23 into a sum of two functions, one lying in formula_24, and the other lying in the orthogonal complement:\n\nwhere formula_26 for all formula_27.\n\nThe above orthogonal decomposition and the reproducing property together show that applying formula_28 to any training point formula_29 produces\n\nwhich we observe is independent of formula_31. Consequently, the value of the empirical risk formula_32 in (*) is likewise independent of formula_31. For the second term (the regularization term), since formula_31 is orthogonal to formula_35 and formula_36 is strictly monotonic, we have\n\nTherefore setting formula_38 does not affect the first term of (*), while it strictly decreasing the second term. Consequently, any minimizer formula_1 in (*) must have formula_38, i.e., it must be of the form\n\nwhich is the desired result.\n\nThe Theorem stated above is a particular example of a family of results that are collectively referred to as \"representer theorems\"; here we describe several such.\n\nThe first statement of a representer theorem was due to Kimeldorf and Wahba for the special case in which\n\nfor formula_43. Schölkopf, Herbrich, and Smola generalized this result by relaxing the assumption of the squared-loss cost and allowing the regularizer to be any strictly monotonically increasing function formula_44 of the Hilbert space norm.\n\nIt is possible to generalize further by augmenting the regularized empirical risk function through the addition of unpenalized offset terms. For example, Schölkopf, Herbrich, and Smola also consider the minimization\n\ni.e., we consider functions of the form formula_46, where formula_23 and formula_48 is an unpenalized function lying in the span of a finite set of real-valued functions formula_49. Under the assumption that the formula_50 matrix formula_51 has rank formula_52, they show that the minimizer formula_53 in formula_54\nadmits a representation of the form\n\nwhere formula_56 and the formula_57 are all uniquely determined.\n\nThe conditions under which a representer theorem exists were investigated by Argyriou, Miccheli, and Pontil, who proved the following:\n\nTheorem: Let formula_2 be a nonempty set, formula_3 a positive-definite real-valued kernel on formula_4 with corresponding reproducing kernel Hilbert space formula_5, and let formula_62 be a differentiable regularization function. Then given a training sample formula_63 and an arbitrary empirical risk function formula_64, a minimizer\n\nof the regularized empirical risk minimization problem admits a representation of the form\n\nwhere formula_13 for all formula_14, if and only if there exists a nondecreasing function formula_69 for which\n\nEffectively, this result provides a necessary and sufficient condition on a differentiable regularizer formula_71 under which the corresponding regularized empirical risk minimization formula_72 will have a representer theorem. In particular, this shows that a broad class of regularized risk minimizations (much broader than those originally considered by Kimeldorf and Wahba) have representer theorems.\n\nRepresenter theorems are useful from a practical standpoint because they dramatically simplify the regularized empirical risk minimization problem formula_72. In most interesting applications, the search domain formula_5 for the minimization will be an infinite-dimensional subspace of formula_75, and therefore the search (as written) does not admit implementation on finite-memory and finite-precision computers. In contrast, the representation of formula_76 afforded by a representer theorem reduces the original (infinite-dimensional) minimization problem to a search for the optimal formula_77-dimensional vector of coefficients formula_78; formula_79 can then be obtained by applying any standard function minimization algorithm. Consequently, representer theorems provide the theoretical basis for the reduction of the general machine learning problem to algorithms that can actually be implemented on computers in practice.\n\n\n", "id": "35887507", "title": "Representer theorem"}
{"url": "https://en.wikipedia.org/wiki?curid=23864280", "text": "Parity learning\n\nParity learning is a problem in machine learning. An algorithm that solves this problem must guess the function \"ƒ\", given some samples (\"x\", \"ƒ\"(\"x\")) and the assurance that \"ƒ\" computes the parity of bits at some fixed locations. The samples are generated using some distribution over the input. The problem is easy to solve using Gaussian elimination provided that a sufficient number of samples (from a distribution which is not too skewed) are provided to the algorithm.\n\nIn this version, the samples may contain some error. Instead of samples (\"x\", \"ƒ\"(\"x\")), the algorithm is provided with (\"x\", \"y\"), where \"y\" = 1 − \"ƒ\"(\"x\") with some small probability. The noisy version of the parity learning problem is conjectured to be hard. \n\n\n", "id": "23864280", "title": "Parity learning"}
{"url": "https://en.wikipedia.org/wiki?curid=1299404", "text": "Feature (machine learning)\n\nIn machine learning and pattern recognition, a feature is an individual measurable property or characteristic of a phenomenon being observed. Choosing informative, discriminating and independent features is a crucial step for effective algorithms in pattern recognition, classification and regression. Features are usually numeric, but structural features such as strings and graphs are used in syntactic pattern recognition.\nThe concept of \"feature\" is related to that of explanatory variable used in statistical techniques such as linear regression.\n\nThe initial set of raw features can be redundant and too large to be managed. Therefore, a preliminary step in many applications of machine learning and pattern recognition consists of selecting a subset of features, or constructing a new and reduced set of features to facilitate learning, and to improve generalization and interpretability.\n\nExtracting or selecting features is a combination of art and science; developing systems to do so is known as feature engineering. It requires the experimentation of multiple possibilities and the combination of automated techniques with the intuition and knowledge of the domain expert. Automating this process is feature learning, where a machine not only uses features for learning, but learns the features itself.\n\nA set of numeric features can be conveniently described by a feature vector. \nAn example of reaching a two-way classification from a feature vector (related to the perceptron) consists of\ncalculating the scalar product between the feature vector and a vector of weights,\ncomparing the result with a threshold, and deciding the class based on the comparison.\nAlgorithms for classification from a feature vector include nearest neighbor classification, neural networks, and statistical techniques such as Bayesian approaches.\n\nIn character recognition, features may include histograms counting the number of black pixels along horizontal and vertical directions, number of internal holes, stroke detection and many others.\n\nIn speech recognition, features for recognizing phonemes can include noise ratios, length of sounds, relative power, filter matches and many others.\n\nIn spam detection algorithms, features may include the presence or absence of certain email headers, \nthe email structure, the language, the frequency of specific terms, the grammatical correctness of the text.\n\nIn computer vision, there are a large number of possible features, such as edges and objects.\n\n", "id": "1299404", "title": "Feature (machine learning)"}
{"url": "https://en.wikipedia.org/wiki?curid=36126852", "text": "Feature hashing\n\nIn machine learning, feature hashing, also known as the hashing trick (by analogy to the kernel trick), is a fast and space-efficient way of vectorizing features, i.e. turning arbitrary features into indices in a vector or matrix. It works by applying a hash function to the features and using their hash values as indices directly, rather than looking the indices up in an associative array.\n\nIn a typical document classification task, the input to the machine learning algorithm (both during learning and classification) is free text. From this, a bag of words (BOW) representation is constructed: the individual tokens are extracted and counted, and each distinct token in the training set defines a feature (independent variable) of each of the documents in both the training and test sets.\n\nMachine learning algorithms, however, are typically defined in terms of numerical vectors. Therefore, the bags of words for a set of documents is regarded as a term-document matrix where each row is a single document, and each column is a single feature/word; the entry in such a matrix captures the frequency (or weight) of the 'th term of the \"vocabulary\" in document . (An alternative convention swaps the rows and columns of the matrix, but this difference is immaterial.)\nTypically, these vectors are extremely sparse—according to Zipf's law.\n\nThe common approach is to construct, at learning time or prior to that, a \"dictionary\" representation of the vocabulary of the training set, and use that to map words to indices. Hash tables and tries are common candidates for dictionary implementation. E.g., the three documents\n\n\ncan be converted, using the dictionary\n\nto the term-document matrix\n\nThe problem with this process is that such dictionaries take up a large amount of storage space and grow in size as the training set grows. On the contrary, if the vocabulary is kept fixed and not increased with a growing training set, an adversary may try to invent new words or misspellings that are not in the stored vocabulary so as to circumvent a machine learned filter. This difficulty is why feature hashing has been tried for spam filtering at Yahoo! Research.\n\nNote that the hashing trick isn't limited to text classification and similar tasks at the document level, but can be applied to any problem that involves large (perhaps unbounded) numbers of features.\n\nInstead of maintaining a dictionary, a feature vectorizer that uses the hashing trick can build a vector of a pre-defined length by applying a hash function to the features (e.g., words), then using the hash values directly as feature indices and updating the resulting vector at those indices. Here, we assume that feature actually means feature vector. \n\nThus, if our feature vector is [\"cat\",\"dog\",\"cat\"] and hash function is formula_2 if formula_3 is \"cat\" and formula_4 if formula_3 is \"dog\". Let us take the output feature vector dimension (N) to be 4. Then output x will be [0,2,1,0].\nIt has been suggested that a second, single-bit output hash function be used to determine the sign of the update value, to counter the effect of hash collisions. If such a hash function is used, the algorithm becomes\nThe above pseudocode actually converts each sample into a vector. An optimized version would instead only generate a stream of (,) pairs and let the learning and prediction algorithms consume such streams; a linear model can then be implemented as a single hash table representing the coefficient vector.\n\nWhen a second hash function \"ξ\" is used to determine the sign of a feature's value, the expected mean of each column in the output array becomes zero because \"ξ\" causes some collisions to cancel out. E.g., suppose an input contains two symbolic features \"f\"₁ and \"f\"₂ that collide with each other, but not with any other features in the same input; then there are four possibilities which, if we make no assumptions about \"ξ\", have equal probability, as listed in the table on the right.\n\nIn this example, there is a 50% probability that the hash collision cancels out. Multiple hash functions can be used to further reduce the risk of collisions.\n\nFurthermore, if \"φ\" is the transformation implemented by a hashing trick with a sign hash \"ξ\" (i.e. \"φ\"(\"x\") is the feature vector produced for a sample \"x\"), then inner products in the hashed space are unbiased:\n\nwhere the expectation is taken over the hashing function \"φ\". It can be verified thatformula_7 is a positive semi-definite kernel.\n\nRecent work extends the hashing trick to supervised mappings from words to indices,\nwhich are explicitly learned to avoid collisions of important terms.\n\nGanchev and Dredze showed that in text classification applications with random hash functions and several tens of thousands of columns in the output vectors, feature hashing need not have an adverse effect on classification performance, even without the signed hash function.\nWeinberger et al. applied their variant of hashing to the problem of spam filtering, formulating this as a multi-task learning problem where the input features are pairs (user, feature) so that a single parameter vector captured per-user spam filters as well as a global filter for several hundred thousand users, and found that the accuracy of the filter went up.\n\nImplementations of the hashing trick are present in:\n\n\n\n", "id": "36126852", "title": "Feature hashing"}
{"url": "https://en.wikipedia.org/wiki?curid=28037054", "text": "Large margin nearest neighbor\n\nLarge margin nearest neighbor (LMNN) classification is a statistical machine learning algorithm for metric learning. It learns a pseudometric designed for k-nearest neighbor classification. The algorithm is based on semidefinite programming, a sub-class of convex optimization.\n\nThe goal of supervised learning (more specifically classification) is to learn a decision rule that can categorize data instances into pre-defined classes. The k-nearest neighbor rule assumes a \"training\" data set of labeled instances (i.e. the classes are known). It classifies a new data instance with the class obtained from the majority vote of the k closest (labeled) training instances. Closeness is measured with a pre-defined metric. Large margin nearest neighbors is an algorithm that learns this global (pseudo-)metric in a supervised fashion to improve the classification accuracy of the k-nearest neighbor rule.\n\nThe main intuition behind LMNN is to learn a pseudometric under which all data instances in the training set are surrounded by at least k instances that share the same class label. If this is achieved, the leave-one-out error (a special case of cross validation) is minimized. Let the training data consist of a data set formula_1, where the set of possible class categories is formula_2.\n\nThe algorithm learns a pseudometric of the type \nFor formula_4 to be well defined, the matrix formula_5 needs to be positive semi-definite. The Euclidean metric is a special case, where formula_5 is the identity matrix. This generalization is often (falsely) referred to as Mahalanobis metric.\n\nFigure 1 illustrates the effect of the metric under varying formula_5. The two circles show the set of points with equal distance to the center formula_8. In the Euclidean case this set is a circle, whereas under the modified (Mahalanobis) metric it becomes an ellipsoid.\n\nThe algorithm distinguishes between two types of special data points: \"target neighbors\" and \"impostors\".\n\nTarget neighbors are selected before learning. Each instance formula_8 has exactly formula_10 different target neighbors within formula_11, which all share the same class label formula_12. The target neighbors are the data points that \"should become\" nearest neighbors \"under the learned metric\". Let us denote the set of target neighbors for a data point formula_8 as formula_14.\n\nAn impostor of a data point formula_8 is another data point formula_16 with a different class label (i.e. formula_17) which is one of the nearest neighbors of formula_8. During learning the algorithm tries to minimize the number of impostors for all data instances in the training set.\n\nLarge margin nearest neighbors optimizes the matrix formula_5 with the help of semidefinite programming. The objective is twofold: For every data point formula_8, the \"target neighbors\" should be \"close\" and the \"impostors\" should be \"far away\". Figure 1 shows the effect of such an optimization on an illustrative example. The learned metric causes the input vector formula_8 to be surrounded by training instances of the same class. If it was a test point, it would be classified correctly under the formula_22 nearest neighbor rule.\n\nThe first optimization goal is achieved by minimizing the average distance between instances and their target neighbors\nThe second goal is achieved by constraining impostors formula_24 to be one unit further away than target neighbors formula_16 (and therefore pushing them out of the local neighborhood of formula_8). The resulting inequality constraint can be stated as:\nThe margin of exactly one unit fixes the scale of the matrix formula_28. Any alternative choice formula_29 would result in a rescaling of formula_28 by a factor of formula_31.\n\nThe final optimization problem becomes:\n\nHere the slack variables formula_37 absorb the amount of violations of the impostor constraints. Their overall sum is minimized. The last constraint ensures that formula_5 is positive semi-definite. The optimization problem is an instance of semidefinite programming (SDP). Although SDPs tend to suffer from high computational complexity, this particular SDP instance can be solved very efficiently due to the underlying geometric properties of the problem. In particular, most impostor constraints are naturally satisfied and do not need to be enforced during runtime. A particularly well suited solver technique is the working set method, which keeps a small set of constraints that are actively enforced and monitors the remaining (likely satisfied) constraints only occasionally to ensure correctness.\n\nLMNN was extended to multiple local metrics in the 2008 paper. \nThis extension significantly improves the classification error, but involves a more expensive optimization problem. In their 2009 publication in the Journal of Machine Learning Research, Weinberger and Saul derive an efficient solver for the semi-definite program. It can learn a metric for the MNIST handwritten digit data set in several hours, involving billions of pairwise constraints. An open source Matlab implementation is freely available at the authors web page.\n\nKumal et al. extended the algorithm to incorporate local invariances to multivariate polynomial transformations and improved regularization.\n\n", "id": "28037054", "title": "Large margin nearest neighbor"}
{"url": "https://en.wikipedia.org/wiki?curid=1053303", "text": "Statistical learning theory\n\nStatistical learning theory is a framework for machine learning\ndrawing from the fields of statistics and functional analysis. Statistical learning theory deals with the problem of finding a predictive function based on data. Statistical learning theory has led to successful applications in fields such as computer vision, speech recognition, bioinformatics and baseball.\n\nThe goals of learning are understanding and prediction. Learning falls into many categories, including supervised learning, unsupervised learning, online learning, and reinforcement learning. From the perspective of statistical learning theory, supervised learning is best understood. Supervised learning involves learning from a training set of data. Every point in the training is an input-output pair, where the input maps to an output. The learning problem consists of inferring the function that maps between the input and the output, such that the learned function can be used to predict output from future input.\n\nDepending on the type of output, supervised learning problems are either problems of regression or problems of classification. If the output takes a continuous range of values, it is a regression problem. Using Ohm's Law as an example, a regression could be performed with voltage as input and current as output. The regression would find the functional relationship between voltage and current to be , such that\nClassification problems are those for which the output will be an element from a discrete set of labels. Classification is very common for machine learning applications. In facial recognition, for instance, a picture of a person's face would be the input, and the output label would be that person's name. The input would be represented by a large multidimensional vector whose elements represent pixels in the picture.\n\nAfter learning a function based on the training set data, that function is validated on a test set of data, data that did not appear in the training set.\n\nTake formula_2 to be the vector space of all possible inputs, and formula_3 to be\nthe vector space of all possible outputs. Statistical learning theory takes the perspective that there is some unknown probability distribution over the product space formula_4, i.e. there exists some unknown formula_5. The training set is made up of formula_6 samples from this probability distribution, and is notated \nEvery formula_8 is an input vector from the training data, and formula_9\nis the output that corresponds to it.\n\nIn this formalism, the inference problem consists of finding a function formula_10 such that formula_11. Let formula_12 be a space of functions formula_13 called the hypothesis space. The hypothesis space is the space of functions the algorithm will search through. Let formula_14 be the loss function, a metric for the difference between the predicted value formula_15 and the actual value formula_16. The expected risk is defined to be\nThe target function, the best possible function formula_18 that can be\nchosen, is given by the formula_18 that satisfies\n\nBecause the probability distribution formula_21 is unknown, a\nproxy measure for the expected risk must be used. This measure is based on the training set, a sample from this unknown probability distribution. It is called the empirical risk\nA learning algorithm that chooses the function formula_23 that minimizes\nthe empirical risk is called empirical risk minimization.\n\nThe choice of loss function is a determining factor on the function formula_23 that will be chosen by the learning algorithm. The loss function\nalso affects the convergence rate for an algorithm. It is important for the loss function to be convex.\n\nDifferent loss functions are used depending on whether the problem is\none of regression or one of classification.\n\nThe most common loss function for regression is the square loss function (also known as the L2-norm). This familiar loss function is used in ordinary least squares regression. The form is:\n\nThe absolute value loss (also known as the L1-norm) is also sometimes used:\n\nIn some sense the 0-1 indicator function is the most natural loss function for classification. It takes the value 0 if the predicted output is the same as the actual output, and it takes the value 1 if the predicted output is different from the actual output. For binary classification with formula_27, this is:\nwhere formula_29 is the Heaviside step function.\n\nIn machine learning problems, a major problem that arises is that of overfitting. Because learning is a prediction problem, the goal is not to find a function that most closely fits the (previously observed) data, but to find one that will most accurately predict output from future input. Empirical risk minimization runs this risk of overfitting: finding a function that matches the data exactly but does not predict future output well.\n\nOverfitting is symptomatic of unstable solutions; a small perturbation in the training set data would cause a large variation in the learned function. It can be shown that if the stability for the solution can be guaranteed, generalization and consistency are guaranteed as well. Regularization can solve the overfitting problem and give\nthe problem stability.\n\nRegularization can be accomplished by restricting the hypothesis space formula_12. A common example would be restricting formula_12 to linear functions: this can be seen as a reduction to the standard problem of linear regression. formula_12 could also be restricted to polynomial of degree formula_33, exponentials, or bounded functions on L1. Restriction of the hypothesis space avoids overfitting because the form of the potential functions are limited, and so does not allow for the choice of a function that gives empirical risk arbitrarily close to zero.\n\nOne example of regularization is Tikhonov regularization. This consists of minimizing\nwhere formula_35 is a fixed and positive parameter, the regularization parameter. Tikhonov regularization ensures existence, uniqueness, and stability of the solution.\n\n", "id": "1053303", "title": "Statistical learning theory"}
{"url": "https://en.wikipedia.org/wiki?curid=126706", "text": "Pattern recognition\n\nPattern recognition is a branch of machine learning that focuses on the recognition of patterns and regularities in data, although it is in some cases considered to be nearly synonymous with machine learning. Pattern recognition systems are in many cases trained from labeled \"training\" data (supervised learning), but when no labeled data are available other algorithms can be used to discover previously unknown patterns (unsupervised learning).\n\nThe terms pattern recognition, machine learning, data mining and knowledge discovery in databases (KDD) are hard to separate, as they largely overlap in their scope. Machine learning is the common term for supervised learning methods and originates from artificial intelligence, whereas KDD and data mining have a larger focus on unsupervised methods and stronger connection to business use. Pattern recognition has its origins in engineering, and the term is popular in the context of computer vision: a leading computer vision conference is named Conference on Computer Vision and Pattern Recognition. In pattern recognition, there may be a higher interest to formalize, explain and visualize the pattern, while machine learning traditionally focuses on maximizing the recognition rates. Yet, all of these domains have evolved substantially from their roots in artificial intelligence, engineering and statistics, and they've become increasingly similar by integrating developments and ideas from each other.\n\nIn machine learning, pattern recognition is the assignment of a label to a given input value. In statistics, discriminant analysis was introduced for this same purpose in 1936. An example of pattern recognition is classification, which attempts to assign each input value to one of a given set of \"classes\" (for example, determine whether a given email is \"spam\" or \"non-spam\"). However, pattern recognition is a more general problem that encompasses other types of output as well. Other examples are regression, which assigns a real-valued output to each input; sequence labeling, which assigns a class to each member of a sequence of values (for example, part of speech tagging, which assigns a part of speech to each word in an input sentence); and parsing, which assigns a parse tree to an input sentence, describing the syntactic structure of the sentence.\n\nPattern recognition algorithms generally aim to provide a reasonable answer for all possible inputs and to perform \"most likely\" matching of the inputs, taking into account their statistical variation. This is opposed to \"pattern matching\" algorithms, which look for exact matches in the input with pre-existing patterns. A common example of a pattern-matching algorithm is regular expression matching, which looks for patterns of a given sort in textual data and is included in the search capabilities of many text editors and word processors. In contrast to pattern recognition, pattern matching is generally not considered a type of machine learning, although pattern-matching algorithms (especially with fairly general, carefully tailored patterns) can sometimes succeed in providing similar-quality output of the sort provided by pattern-recognition algorithms.\n\nPattern recognition is generally categorized according to the type of learning procedure used to generate the output value. \"Supervised learning\" assumes that a set of \"training data\" (the \"training set\") has been provided, consisting of a set of instances that have been properly labeled by hand with the correct output. A learning procedure then generates a \"model\" that attempts to meet two sometimes conflicting objectives: Perform as well as possible on the training data, and generalize as well as possible to new data (usually, this means being as simple as possible, for some technical definition of \"simple\", in accordance with Occam's Razor, discussed below). Unsupervised learning, on the other hand, assumes training data that has not been hand-labeled, and attempts to find inherent patterns in the data that can then be used to determine the correct output value for new data instances. A combination of the two that has recently been explored is semi-supervised learning, which uses a combination of labeled and unlabeled data (typically a small set of labeled data combined with a large amount of unlabeled data). Note that in cases of unsupervised learning, there may be no training data at all to speak of; in other words, the data to be labeled \"is\" the training data.\n\nNote that sometimes different terms are used to describe the corresponding supervised and unsupervised learning procedures for the same type of output. For example, the unsupervised equivalent of classification is normally known as \"clustering\", based on the common perception of the task as involving no training data to speak of, and of grouping the input data into \"clusters\" based on some inherent similarity measure (e.g. the distance between instances, considered as vectors in a multi-dimensional vector space), rather than assigning each input instance into one of a set of pre-defined classes. Note also that in some fields, the terminology is different: For example, in community ecology, the term \"classification\" is used to refer to what is commonly known as \"clustering\".\n\nThe piece of input data for which an output value is generated is formally termed an \"instance\". The instance is formally described by a vector of \"features\", which together constitute a description of all known characteristics of the instance. (These feature vectors can be seen as defining points in an appropriate multidimensional space, and methods for manipulating vectors in vector spaces can be correspondingly applied to them, such as computing the dot product or the angle between two vectors.) Typically, features are either categorical (also known as nominal, i.e., consisting of one of a set of unordered items, such as a gender of \"male\" or \"female\", or a blood type of \"A\", \"B\", \"AB\" or \"O\"), ordinal (consisting of one of a set of ordered items, e.g., \"large\", \"medium\" or \"small\"), integer-valued (e.g., a count of the number of occurrences of a particular word in an email) or real-valued (e.g., a measurement of blood pressure). Often, categorical and ordinal data are grouped together; likewise for integer-valued and real-valued data. Furthermore, many algorithms work only in terms of categorical data and require that real-valued or integer-valued data be \"discretized\" into groups (e.g., less than 5, between 5 and 10, or greater than 10).\n\nMany common pattern recognition algorithms are \"probabilistic\" in nature, in that they use statistical inference to find the best label for a given instance. Unlike other algorithms, which simply output a \"best\" label, often probabilistic algorithms also output a probability of the instance being described by the given label. In addition, many probabilistic algorithms output a list of the \"N\"-best labels with associated probabilities, for some value of \"N\", instead of simply a single best label. When the number of possible labels is fairly small (e.g., in the case of classification), \"N\" may be set so that the probability of all possible labels is output. Probabilistic algorithms have many advantages over non-probabilistic algorithms:\n\nFeature selection algorithms attempt to directly prune out redundant or irrelevant features. A general introduction to feature selection which summarizes approaches and challenges, has been given. The complexity of feature-selection is, because of its non-monotonous character, an optimization problem where given a total of formula_1 features the powerset consisting of all formula_2 subsets of features need to be explored. The Branch-and-Bound algorithm does reduce this complexity but is intractable for medium to large values of the number of available features formula_1. For a large-scale comparison of feature-selection algorithms see \n\nTechniques to transform the raw feature vectors (feature extraction) are sometimes used prior to application of the pattern-matching algorithm. For example, feature extraction algorithms attempt to reduce a large-dimensionality feature vector into a smaller-dimensionality vector that is easier to work with and encodes less redundancy, using mathematical techniques such as principal components analysis (PCA). The distinction between feature selection and feature extraction is that the resulting features after feature extraction has taken place are of a different sort than the original features and may not easily be interpretable, while the features left after feature selection are simply a subset of the original features.\n\nFormally, the problem of supervised pattern recognition can be stated as follows: Given an unknown function formula_4 (the \"ground truth\") that maps input instances formula_5 to output labels formula_6, along with training data formula_7 assumed to represent accurate examples of the mapping, produce a function formula_8 that approximates as closely as possible the correct mapping formula_9. (For example, if the problem is filtering spam, then formula_10 is some representation of an email and formula_11 is either \"spam\" or \"non-spam\"). In order for this to be a well-defined problem, \"approximates as closely as possible\" needs to be defined rigorously. In decision theory, this is defined by specifying a loss function or cost function that assigns a specific value to \"loss\" resulting from producing an incorrect label. The goal then is to minimize the expected loss, with the expectation taken over the probability distribution of formula_12. In practice, neither the distribution of formula_12 nor the ground truth function formula_4 are known exactly, but can be computed only empirically by collecting a large number of samples of formula_12 and hand-labeling them using the correct value of formula_16 (a time-consuming process, which is typically the limiting factor in the amount of data of this sort that can be collected). The particular loss function depends on the type of label being predicted. For example, in the case of classification, the simple zero-one loss function is often sufficient. This corresponds simply to assigning a loss of 1 to any incorrect labeling and implies that the optimal classifier minimizes the error rate on independent test data (i.e. counting up the fraction of instances that the learned function formula_8 labels wrongly, which is equivalent to maximizing the number of correctly classified instances). The goal of the learning procedure is then to minimize the error rate (maximize the correctness) on a \"typical\" test set.\n\nFor a probabilistic pattern recognizer, the problem is instead to estimate the probability of each possible output label given a particular input instance, i.e., to estimate a function of the form\nwhere the feature vector input is formula_19, and the function \"f\" is typically parameterized by some parameters formula_20. In a discriminative approach to the problem, \"f\" is estimated directly. In a generative approach, however, the inverse probability formula_21 is instead estimated and combined with the prior probability formula_22 using Bayes' rule, as follows:\n\nWhen the labels are continuously distributed (e.g., in regression analysis), the denominator involves integration rather than summation:\n\nThe value of formula_25 is typically learned using maximum a posteriori (MAP) estimation. This finds the best value that simultaneously meets two conflicting objects: To perform as well as possible on the training data (smallest error-rate) and to find the simplest possible model. Essentially, this combines maximum likelihood estimation with a regularization procedure that favors simpler models over more complex models. In a Bayesian context, the regularization procedure can be viewed as placing a prior probability formula_26 on different values of formula_25. Mathematically:\n\nwhere formula_29 is the value used for formula_25 in the subsequent evaluation procedure, and formula_31, the posterior probability of formula_25, is given by\n\nIn the Bayesian approach to this problem, instead of choosing a single parameter vector formula_34, the probability of a given label for a new instance formula_19 is computed by integrating over all possible values of formula_25, weighted according to the posterior probability:\n\nThe first pattern classifier – the linear discriminant presented by Fisher – was developed in the frequentist tradition. The frequentist approach entails that the model parameters are considered unknown, but objective. The parameters are then computed (estimated) from the collected data. For the linear discriminant, these parameters are precisely the mean vectors and the covariance matrix. Also the probability of each class formula_22 is estimated from the collected dataset. Note that the usage of 'Bayes rule' in a pattern classifier does not make the classification approach Bayesian.\n\nBayesian statistics has its origin in Greek philosophy where a distinction was already made between the 'a priori' and the 'a posteriori' knowledge. Later Kant defined his distinction between what is a priori known – before observation – and the empirical knowledge gained from observations. In a Bayesian pattern classifier, the class probabilities formula_22 can be chosen by the user, which are then a priori. Moreover, experience quantified as a priori parameter values can be weighted with empirical observations – using e.g., the Beta- (conjugate prior) and Dirichlet-distributions. The Bayesian approach facilitates a seamless intermixing between expert knowledge in the form of subjective probabilities, and objective observations.\n\nProbabilistic pattern classifiers can be used according to a frequentist or a Bayesian approach.\n\nWithin medical science, pattern recognition is the basis for computer-aided diagnosis (CAD) systems. CAD describes a procedure that supports the doctor's interpretations and findings.\nOther typical applications of pattern recognition techniques are automatic speech recognition, classification of text into several categories (e.g., spam/non-spam email messages), the automatic recognition of handwritten postal codes on postal envelopes, automatic recognition of images of human faces, or handwriting image extraction from medical forms. The last two examples form the subtopic image analysis of pattern recognition that deals with digital images as input to pattern recognition systems.\n\nOptical character recognition is a classic example of the application of a pattern classifier, see\nOCR-example.\nThe method of signing one's name was captured with stylus and overlay starting in 1990. The strokes, speed, relative min, relative max, acceleration and pressure is used to uniquely identify and confirm identity. Banks were first offered this technology, but were content to collect from the FDIC for any bank fraud and did not want to inconvenience customers..\n\nArtificial neural networks (neural net classifiers) and deep learning have many real-world applications in image processing, a few examples:\n\nFor a discussion of the aforementioned applications of neural networks in image processing, see e.g.\n\nIn psychology, pattern recognition (making sense of and identifying objects) is closely related to perception, which explains how the sensory inputs humans receive are made meaningful. Pattern recognition can be thought of in two different ways: the first being template matching and the second being feature detection. \nA template is a pattern used to produce items of the same proportions. The template-matching hypothesis suggests that incoming stimuli are compared with templates in the long term memory. If there is a match, the stimulus is identified.\nFeature detection models, such as the Pandemonium system for classifying letters (Selfridge, 1959), suggest that the stimuli are broken down into their component parts for identification. For example, a capital E has three horizontal lines and one vertical line.\n\nAlgorithms for pattern recognition depend on the type of label output, on whether learning is supervised or unsupervised, and on whether the algorithm is statistical or non-statistical in nature. Statistical algorithms can further be categorized as generative or discriminative.\n\nParametric:\nNonparametric:\n\n\n\n\nUnsupervised:\n\nSupervised (?):\n\nSupervised:\n\nUnsupervised:\n\nSupervised:\n\nUnsupervised:\n\n\n", "id": "126706", "title": "Pattern recognition"}
{"url": "https://en.wikipedia.org/wiki?curid=35272263", "text": "Linear predictor function\n\nIn statistics and in machine learning, a linear predictor function is a linear function (linear combination) of a set of coefficients and explanatory variables (independent variables), whose value is used to predict the outcome of a dependent variable. This sort of function usually comes in linear regression, where the coefficients are called regression coefficients. However, they also occur in various types of linear classifiers (e.g. logistic regression, perceptrons, support vector machines, and linear discriminant analysis), as well as in various other models, such as principal component analysis and factor analysis. In many of these models, the coefficients are referred to as \"weights\".\n\nThe basic form of a linear predictor function formula_1 for data point \"i\" (consisting of \"p\" explanatory variables), for \"i\" = 1, ..., \"n\", is\n\nwhere formula_3 are the coefficients (regression coefficients, weights, etc.) indicating the relative effect of a particular explanatory variable on the outcome.\n\nIt is common to write the predictor function in a more compact form as follows:\n\nThis makes it possible to write the linear predictor function as follows:\n\nusing the notation for a dot product between two vectors.\n\nAn equivalent form using matrix notation is as follows:\n\nwhere formula_6 and formula_7 are assumed to be a \"p\"-by-1 column vectors (as is standard when representing vectors as matrices), formula_8 indicates the matrix transpose of formula_6 (which turns it into a 1-by-\"p\" row vector), and formula_10 indicates matrix multiplication between the 1-by-\"p\" row vector and the \"p\"-by-1 column vector, producing a 1-by-1 matrix that is taken to be a scalar.\n\nAn example of the usage of such a linear predictor function is in linear regression, where each data point is associated with a continuous outcome \"y\", and the relationship written\n\nwhere formula_12 is a \"disturbance term\" or \"error variable\" — an unobserved random variable that adds noise to the linear relationship between the dependent variable and predictor function.\n\nIn some models (standard linear regression in particular), the equations for each of the data points \"i\" = 1, ..., \"n\" are stacked together and written in vector form as\n\nwhere\n\nThe matrix \"X\" is known as the design matrix and encodes all known information about the independent variables. The variables formula_12 are random variables, which in standard linear regression are distributed according to a standard normal distribution; they express the influence of any unknown factors on the outcome.\n\nThis makes it possible to find optimal coefficients through the method of least squares using simple matrix operations. In particular, the optimal coefficients formula_16 as estimated by least squares can be written as follows:\n\nThe matrix formula_18 is known as the Moore-Penrose pseudoinverse of \"X\". Note that this formula assumes that \"X\" is of full rank, i.e. there is no multicollinearity among different explanatory variables (i.e. one variable can be perfectly, or almost perfectly, predicted from another). In such cases, the singular value decomposition can be used to compute the pseudoinverse.\n\nAlthough the outcomes (dependent variables) to be predicted are assumed to be random variables, the explanatory variables themselves are usually not assumed to be random. Instead, they are assumed to be fixed values, and any random variables (e.g. the outcomes) are assumed to be conditional on them. As a result, the model user is free to transform the explanatory variables in arbitrary ways, including creating multiple copies of a given explanatory variable, each transformed using a different function. Other common techniques are to create new explanatory variables in the form of interaction variables by taking products of two (or sometimes more) existing explanatory variables.\n\nWhen a fixed set of nonlinear functions are used to transform the value(s) of a data point, these functions are known as basis functions. An example is polynomial regression, which uses a linear predictor function to fit an arbitrary degree polynomial relationship (up to a given order) between two sets of data points (i.e. a single real-valued explanatory variable and a related real-valued dependent variable), by adding multiple explanatory variables corresponding to various powers of the existing explanatory variable. Mathematically, the form looks like this:\n\nIn this case, for each data point, a set of explanatory variables is created as follows:\n\nand then standard linear regression is run. The basis functions in this example would be\n\nThis example shows that a linear predictor function can actually be much more powerful than it first appears: It only really needs to be linear in the \"coefficients\". All sorts of non-linear functions of the explanatory variables can be fit by the model.\n\nThere is no particular need for the inputs to basis functions to be univariate or single-dimensional (or their outputs, for that matter, although in such a case, a \"K\"-dimensional output value is likely to be treated as \"K\" separate scalar-output basis functions). An example of this is radial basis functions (RBF's), which compute some transformed version of the distance to some fixed point:\n\nAn example is the Gaussian RBF, which has the same functional form as the normal distribution:\n\nwhich drops off rapidly as the distance from c increases.\n\nA possible usage of RBF's is to create one for every observed data point. This means that the result of an RBF applied to a new data point will be close to 0 unless the new point is near to the point around which the RBF was applied. That is, the application of the radial basis functions will pick out the nearest point, and its regression coefficient will dominate. The result will be a form of nearest neighbor interpolation, where predictions are made by simply using the prediction of the nearest observed data point, possibly interpolating between multiple nearby data points when they are all similar distances away. This type of nearest neighbor method for prediction is often considered diametrically opposed to the type of prediction used in standard linear regression: But in fact, the transformations that can be applied to the explanatory variables in a linear predictor function are so powerful that even the nearest neighbor method can be implemented as a type of linear regression.\n\nIt is even possible to fit some functions that appear non-linear in the coefficients by transforming the coefficients into new coefficients that do appear linear. For example, a function of the form formula_24 for coefficients formula_25 could be transformed into the appropriate linear function by applying the substitutions formula_26 leading to formula_27 which is linear. Linear regression and similar techniques could be applied and will often still find the optimal coefficients, but their error estimates and such will be wrong.\n\nThe explanatory variables may be of any type: real-valued, binary, categorical, etc. The main distinction is between continuous variables (e.g. income, age, blood pressure, etc.) and discrete variables (e.g. sex, race, political party, etc.). Discrete variables referring to more than two possible choices are typically coded using dummy variables (or indicator variables), i.e. separate explanatory variables taking the value 0 or 1 are created for each possible value of the discrete variable, with a 1 meaning \"variable does have the given value\" and a 0 meaning \"variable does not have the given value\". For example, a four-way discrete variable of blood type with the possible values \"A, B, AB, O\" would be converted to separate two-way dummy variables, \"is-A, is-B, is-AB, is-O\", where only one of them has the value 1 and all the rest have the value 0. This allows for separate regression coefficients to be matched for each possible value of the discrete variable.\n\nNote that, for \"K\" categories, not all \"K\" dummy variables are independent of each other. For example, in the above blood type example, only three of the four dummy variables are independent, in the sense that once the values of three of the variables are known, the fourth is automatically determined. Thus, it's really only necessary to encode three of the four possibilities as dummy variables, and in fact if all four possibilities are encoded, the overall model becomes non-identifiable. This causes problems for a number of methods, such as the simple closed-form solution used in linear regression. The solution is either to avoid such cases by eliminating one of the dummy variables, and/or introduce a regularization constraint (which necessitates a more powerful, typically iterative, method for finding the optimal coefficients).\n", "id": "35272263", "title": "Linear predictor function"}
{"url": "https://en.wikipedia.org/wiki?curid=37697003", "text": "Random indexing\n\nRandom indexing is a dimension reduction method and computational framework for Distributional semantics, based on the insight that very-high-dimensional Vector Space Model implementations are impractical, that models need not grow in dimensionality when new items (e.g. new terminology) is encountered, and that a high-dimensional model can be projected into a space of lower dimensionality without compromising L2 distance metrics if the resulting dimensions are chosen appropriately.\n\nThis is the original point of the random projection approach to dimension reduction first formulated as the Johnson–Lindenstrauss lemma, and Locality-sensitive hashing has some of the same starting points. Random indexing, as used in representation of language, originates from the work of Pentti Kanerva on Sparse distributed memory, and can be described as an incremental formulation of a random projection.\n\nIt can be also verified that random indexing is a random projection technique for the construction of Euclidean spaces---i.e. L2 normed vector spaces. In Euclidean spaces, random projections are elucidated using the Johnson–Lindenstrauss lemma.\n\nTopSig extends the Random Indexing model to produce bit vectors for comparison with the Hamming distance similarity function. It is used for improving the performance of information retrieval and document clustering. In a similar line of research, Random Manhattan Integer Indexing is proposed for improving the performance of the methods that employ the Manhattan distance between text units. Many random indexing methods primarily generate similarity from co-occurrence of items in a corpus. Reflexive Random Indexing generates similarity from co-occurrence and from shared occurrence with other items.\n\n", "id": "37697003", "title": "Random indexing"}
{"url": "https://en.wikipedia.org/wiki?curid=14003441", "text": "Bag-of-words model\n\nThe bag-of-words model is a simplifying representation used in natural language processing and information retrieval (IR). Also known as vector space model. In this model, a text (such as a sentence or a document) is represented as the bag (multiset) of its words, disregarding grammar and even word order but keeping multiplicity. The bag-of-words model has also been used for computer vision.\n\nThe bag-of-words model is commonly used in methods of document classification where the (frequency of) occurrence of each is used as a feature for training a classifier .\n\nAn early reference to \"bag of words\" in a linguistic context can be found in Zellig Harris's 1954 article on \"Distributional Structure\".\n\nThe following models a text document using bag-of-words.\n\nHere are two simple text documents:\n(1) John likes to watch movies. Mary likes movies too.\n\n(2) John also likes to watch football games.\nBased on these two text documents, a list is constructed as follows:\n\nIn practice, the Bag-of-words model is mainly used as a tool of feature generation. After transforming the text into a \"bag of words\", we can calculate various measures to characterize the text. The most common type of characteristics, or features calculated from the Bag-of-words model is term frequency, namely, the number of times a term appears in the text. For the example above, we can construct the following two lists to record the term frequencies of all the distinct words:\n\n(1) [1, 2, 1, 1, 2, 1, 1, 0, 0, 0]\n(2) [1, 1, 1, 1, 0, 0, 0, 1, 1, 1]\nEach entry of the lists refers to count of the corresponding entry in the list (this is also the histogram representation). For example, in the first list (which represents document 1), the first two entries are \"1,2\". The first entry corresponds to the word \"John\" which is the first word in the list, and its value is \"1\" because \"John\" appears in the first document 1 time. Similarly, the second entry corresponds to the word \"likes\" which is the second word in the list, and its value is \"2\" because \"likes\" appears in the first document 2 times. This list (or vector) representation does not preserve the order of the words in the original sentences, which is just the main feature of the Bag-of-words model. This kind of representation has several successful applications, for example email filtering.\nHowever, term frequencies are not necessarily the best representation for the text. Common words like \"the\", \"a\", \"to\" are almost always the terms with highest frequency in the text. Thus, having a high raw count does not necessarily mean that the corresponding word is more important. To address this problem, one of the most popular ways to \"normalize\" the term frequencies is to weight a term by the inverse of document frequency, or tf–idf. Additionally, for the specific purpose of classification, supervised alternatives have been developed that take into account the class label of a document. Lastly, binary (presence/absence or 1/0) weighting is used in place of frequencies for some problems. (For instance, this option is implemented in the WEKA machine learning software system.)\n\nBag-of-word model is an orderless document representation—only the counts of words mattered. For instance, in the above example \"John likes to watch movies. Mary likes movies too\", the bag-of-words representation will not reveal the fact that a person's name is always followed by the verb \"likes\" in this text. As an alternative, the n-gram model can be used to store this spatial information within the text. Applying to the same example above, a bigram model will parse the text into following units and store the term frequency of each unit as before.\n[\n\nConceptually, we can view bag-of-word model as a special case of the n-gram model, with n=1. See language model for a more detailed discussion.\n\nA common alternative to the use of dictionaries is the hashing trick, where words are directly mapped to indices with a hashing function. By mapping words to indices directly with a hash function, no memory is required to store a dictionary. Hash collisions are typically dealt with by using freed-up memory to increase the number of hash buckets. In practice, hashing greatly simplifies the implementation of bag-of-words models and improves their scalability.\n\nIn Bayesian spam filtering, an e-mail message is modeled as an unordered collection of words selected from one of two probability distributions: one representing spam and one representing legitimate e-mail (\"ham\"). \nImagine that there are two literal bags full of words. One bag is filled with words found in spam messages, and the other bag is filled with words found in legitimate e-mail. While any given word is likely to be found somewhere in both bags, the \"spam\" bag will contain spam-related words such as \"stock\", \"Viagra\", and \"buy\" much more frequently, while the \"ham\" bag will contain more words related to the user's friends or workplace.\n\nTo classify an e-mail message, the Bayesian spam filter assumes that the message is a pile of words that has been poured out randomly from one of the two bags, and uses Bayesian probability to determine which bag it is more likely to be.\n\n", "id": "14003441", "title": "Bag-of-words model"}
{"url": "https://en.wikipedia.org/wiki?curid=38059657", "text": "Similarity learning\n\nSimilarity learning is an area of supervised machine learning in artificial intelligence. It is closely related to regression and classification, but the goal is to learn from examples a similarity function that measures how similar or related two objects are. It has applications in ranking, in recommendation systems, \nvisual identity tracking, face verification, and speaker verification.\n\nThere are four common setups for similarity and metric distance learning.\n\n\nA common approach for learning similarity, is to model the similarity function as a bilinear form. For example, in the case of ranking similarity learning, one aims to learn a matrix W that parametrizes the similarity function formula_17.\n\nSimilarity learning is closely related to \"distance metric learning\". Metric learning is the task of learning a distance function over objects. A metric or distance function has to obey four axioms: non-negativity, Identity of indiscernibles, symmetry and subadditivity / triangle inequality. In practice, metric learning algorithms ignore the condition of identity of indiscernibles and learn a pseudo-metric.\n\nWhen the objects formula_11 are vectors in formula_19, then any matrix formula_20 in the symmetric positive semi-definite cone formula_21 defines a distance pseudo-metric of the space of x through the form formula_22. When formula_20 is a symmetric positive definite matrix, formula_24 is a metric. Moreover, as any symmetric positive semi-definite matrix formula_25 can be decomposed as formula_26 where formula_27 and formula_28, the distance function formula_24 can be rewritten equivalently formula_30. The distance formula_31 corresponds to the Euclidean distance between the projected feature vectors formula_32 and formula_33. \nSome well-known approaches for metric learning include Large margin nearest neighbor, Information theoretic metric learning (ITML).\n\nIn statistics, the covariance matrix of the data is sometimes used to define a distance metric called Mahalanobis distance.\n\nSimilarity learning is used in information retrieval for learning to rank, in face verification or face identification, and in recommendation systems. Also, many machine learning approaches rely on some metric. This includes unsupervised learning such as clustering, which groups together close or similar objects. It also includes supervised approaches like K-nearest neighbor algorithm which rely on labels of nearby objects to decide on the label of a new object. Metric learning has been proposed as a preprocessing step for many of these approaches \n\nMetric and similarity learning naively scale quadratically with the dimension of the input space, as can easily see when the learned metric has a bilinear form formula_17. Scaling to higher dimensions can be achieved by enforcing a sparseness structure over the matrix model, as done with HDSL, and with COMET.\n\n\nFor further information on this topic, see the surveys on metric and similarity learning by Bellet et al. and Kulis.\n", "id": "38059657", "title": "Similarity learning"}
{"url": "https://en.wikipedia.org/wiki?curid=38870173", "text": "Feature learning\n\nIn machine learning, feature learning or representation learning is a set of techniques that allows a system to automatically discover the representations needed for feature detection or classification from raw data. This replaces manual feature engineering and allows a machine to both learn the features and use them to perform a specific task.\n\nFeature learning is motivated by the fact that machine learning tasks such as classification often require input that is mathematically and computationally convenient to process. However, real-world data such as images, video, and sensor data has not yielded to attempts to algorithmically define specific features. An alternative is to discover such features or representations through examination, without relying on explicit algorithms. \n\nFeature learning can be either supervised or unsupervised.\n\nSupervised feature learning is learning features from labeled data. The data label allows the system to compute an error term, the degree to which the system fails to produce the label, which can then be used as feedback to correct the learning process (reduce/minimize the error). Approaches include:\n\nDictionary learning develops a set (dictionary) of representative elements from the input data such that each data point can be represented as a weighted sum of the representative elements. The dictionary elements and the weights may be found by minimizing the average representation error (over the input data), together with \"L1\" regularization on the weights to enable sparsity (i.e., the representation of each data point has only a few nonzero weights).\n\nSupervised dictionary learning exploits both the structure underlying the input data and the labels for optimizing the dictionary elements. For example, a supervised dictionary learning technique applied dictionary learning on classification problems by jointly optimizing the dictionary elements, weights for representing data points, and parameters of the classifier based on the input data. In particular, a minimization problem is formulated, where the objective function consists of the classification error, the representation error, an \"L1\" regularization on the representing weights for each data point (to enable sparse representation of data), and an \"L2\" regularization on the parameters of the classifier.\n\nNeural networks are a family of learning algorithms that use a \"network\" consisting of multiple layers of inter-connected nodes. It is inspired by the animal nervous system, where the nodes are viewed as neurons and edges are viewed as synapses. Each edge has an associated weight, and the network defines computational rules for passing input data from the network's input layer to the output layer. A network function associated with a neural network characterizes the relationship between input and output layers, which is parameterized by the weights. With appropriately defined network functions, various learning tasks can be performed by minimizing a cost function over the network function (weights).\n\nMultilayer neural networks can be used to perform feature learning, since they learn a representation of their input at the hidden layer(s) which is subsequently used for classification or regression at the output layer.\n\nUnsupervised feature learning is learning features from unlabeled data. The goal of unsupervised feature learning is often to discover low-dimensional features that captures some structure underlying the high-dimensional input data. When the feature learning is performed in an unsupervised way, it enables a form of semisupervised learning where features learned from an unlabeled dataset are then employed to improve performance in a supervised setting with labeled data. Several approaches are introduced in the following.\n\n\"K\"-means clustering is an approach for vector quantization. In particular, given a set of \"n\" vectors, \"k\"-means clustering groups them into k clusters (i.e., subsets) in such a way that each vector belongs to the cluster with the closest mean. The problem is computationally NP-hard, although suboptimal greedy algorithms have been developed.\n\nK-means clustering can be used to group an unlabeled set of inputs into \"k\" clusters, and then use the centroids of these clusters to produce features. These features can be produced in several ways. The simplest is to add \"k\" binary features to each sample, where each feature \"j\" has value one iff the \"j\"th centroid learned by \"k\"-means is the closest to the sample under consideration. It is also possible to use the distances to the clusters as features, perhaps after transforming them through a radial basis function (a technique that has been used to train RBF networks). Coates and Ng note that certain variants of \"k\"-means behave similarly to sparse coding algorithms.\n\nIn a comparative evaluation of unsupervised feature learning methods, Coates, Lee and Ng found that \"k\"-means clustering with an appropriate transformation outperforms the more recently invented auto-encoders and RBMs on an image classification task. \"K\"-means also improves performance in the domain of NLP, specifically for named-entity recognition; there, it competes with Brown clustering, as well as with distributed word representations (also known as neural word embeddings).\n\nPrincipal component analysis (PCA) is often used for dimension reduction. Given an unlabeled set of \"n\" input data vectors, PCA generates \"p\" (which is much smaller than the dimension of the input data) right singular vectors corresponding to the \"p\" largest singular values of the data matrix, where the \"k\"th row of the data matrix is the \"k\"th input data vector shifted by the sample mean of the input (i.e., subtracting the sample mean from the data vector). Equivalently, these singular vectors are the eigenvectors corresponding to the \"p\" largest eigenvalues of the sample covariance matrix of the input vectors. These \"p\" singular vectors are the feature vectors learned from the input data, and they represent directions along which the data has the largest variations.\n\nPCA is a linear feature learning approach since the \"p\" singular vectors are linear functions of the data matrix. The singular vectors can be generated via a simple algorithm with \"p\" iterations. In the \"i\"th iteration, the projection of the data matrix on the \"(i-1)\"th eigenvector is subtracted, and the \"i\"th singular vector is found as the right singular vector corresponding to the largest singular of the residual data matrix.\n\nPCA has several limitations. First, it assumes that the directions with large variance are of most interest, which may not be the case. PCA only relies on orthogonal transformations of the original data, and it exploits only the first- and second-order moments of the data, which may not well characterize the data distribution. Furthermore, PCA can effectively reduce dimension only when the input data vectors are correlated (which results in a few dominant eigenvalues).\n\nLocal linear embedding (LLE) is a nonlinear learning approach for generating low-dimensional neighbor-preserving representations from (unlabeled) high-dimension input. The approach was proposed by Roweis and Saul (2000). The general idea of LLE is to reconstruct the original high-dimensional data using lower-dimensional points while maintaining some geometric properties of the neighborhoods in the original data set. \n\nLLE consists of two major steps. The first step is for \"neighbor-preserving\", where each input data point \"Xi\" is reconstructed as a weighted sum of \"K\" nearest neighbor data points, and the optimal weights are found by minimizing the average squared reconstruction error (i.e., difference between an input point and its reconstruction) under the constraint that the weights associated with each point sum up to one. The second step is for \"dimension reduction,\" by looking for vectors in a lower-dimensional space that minimizes the representation error using the optimized weights in the first step. Note that in the first step, the weights are optimized with fixed data, which can be solved as a least squares problem. In the second step, lower-dimensional points are optimized with fixed weights, which can be solved via sparse eigenvalue decomposition.\n\nThe reconstruction weights obtained in the first step capture the \"intrinsic geometric properties\" of a neighborhood in the input data. It is assumed that original data lie on a smooth lower-dimensional manifold, and the \"intrinsic geometric properties\" captured by the weights of the original data are also expected to be on the manifold. This is why the same weights are used in the second step of LLE. Compared with PCA, LLE is more powerful in exploiting the underlying data structure.\n\nIndependent component analysis (ICA) is a technique for forming a data representation using a weighted sum of independent non-Gaussian components. The assumption of non-Gaussian is imposed since the weights cannot be uniquely determined when all the components follow Gaussian distribution.\n\nUnsupervised dictionary learning does not utilize data labels and exploits the structure underlying the data for optimizing dictionary elements. An example of unsupervised dictionary learning is sparse coding, which aims to learn basis functions (dictionary elements) for data representation from unlabeled input data. Sparse coding can be applied to learn overcomplete dictionaries, where the number of dictionary elements is larger than the dimension of the input data. Aharon et al. proposed algorithm K-SVD for learning a dictionary of elements that enables sparse representation.\n\nThe hierarchical architecture of the biological neural system inspires deep learning architectures for feature learning by stacking multiple layers of learning nodes. These architectures are often designed based on the assumption of distributed representation: observed data is generated by the interactions of many different factors on multiple levels. In a deep learning architecture, the output of each intermediate layer can be viewed as a representation of the original input data. Each level uses the representation produced by previous level as input, and produces new representations as output, which is then fed to higher levels. The input at the bottom layer is raw data, and the output of the final layer is the final low-dimensional feature or representation.\n\nRestricted Boltzmann machines (RBMs) are often used as a building block for multilayer learning architectures. An RBM can be represented by an undirected bipartite graph consisting of a group of binary hidden variables, a group of visible variables, and edges connecting the hidden and visible nodes. It is a special case of the more general Boltzmann machines with the constraint of no intra-node connections. Each edge in an RBM is associated with a weight. The weights together with the connections define an energy function, based on which a joint distribution of visible and hidden nodes can be devised. Based on the topology of the RBM, the hidden (visible) variables are independent, conditioned on the visible (hidden) variables. Such conditional independence facilitates computations.\n\nAn RBM can be viewed as a single layer architecture for unsupervised feature learning. In particular, the visible variables correspond to input data, and the hidden variables correspond to feature detectors. The weights can be trained by maximizing the probability of visible variables using Hinton's contrastive divergence (CD) algorithm.\n\nIn general training RBM by solving the maximization problem tends to result in non-sparse representations. Sparse RBM was proposed to enable sparse representations. The idea is to add a regularization term in the objective function of data likelihood, which penalizes the deviation of the expected hidden variables from a small constant formula_1.\n\nAn autoencoder consisting of an encoder and a decoder is a paradigm for deep learning architectures. An example is provided by Hinton and Salakhutdinov where the encoder uses raw data (e.g., image) as input and produces feature or representation as output and the decoder uses the extracted feature from the encoder as input and reconstructs the original input raw data as output. The encoder and decoder are constructed by stacking multiple layers of RBMs. The parameters involved in the architecture were originally trained in a greedy layer-by-layer manner: after one layer of feature detectors is learned, they are fed up as visible variables for training the corresponding RBM. Current approaches typically apply end-to-end training with stochastic gradient descent methods. Training can be repeated until some stopping criteria are satisfied.\n\n", "id": "38870173", "title": "Feature learning"}
{"url": "https://en.wikipedia.org/wiki?curid=1422176", "text": "Developmental robotics\n\nDevelopmental robotics (DevRob), sometimes called epigenetic robotics, is a scientific field which aims at studying the developmental mechanisms, architectures and constraints that allow lifelong and open-ended learning of new skills and new knowledge in embodied machines. As in human children, learning is expected to be cumulative and of progressively increasing complexity, and to result from self-exploration of the world in combination with social interaction. The typical methodological approach consists in starting from theories of human and animal development elaborated in fields such as developmental psychology, neuroscience, developmental and evolutionary biology, and linguistics, then to formalize and implement them in robots, sometimes exploring extensions or variants of them. The experimentation of those models in robots allows researchers to confront them with reality, and as a consequence developmental robotics also provides feedback and novel hypotheses on theories of human and animal development.\n\nDevelopmental robotics is related to, but differs from, evolutionary robotics (ER). ER uses populations of robots that evolve over time, whereas DevRob is interested in how the organization of a single robot's control system develops through experience, over time.\n\nDevRob is also related to work done in the domains of robotics and artificial life.\n\nCan a robot learn like a child? Can it learn a variety of new skills and new knowledge unspecified at design time and in a partially unknown and changing environment? How can it discover its body and its relationships with the physical and social environment? How can its cognitive capacities continuously develop without the intervention of an engineer once it is \"out of the factory\"? What can it learn through natural social interactions with humans? These are the questions at the center of developmental robotics. Alan Turing, as well as a number of other pioneers of cybernetics, already formulated those questions and the general approach in 1950,\nbut it is only since the end of the 20th century that they began to be investigated systematically.\n\nBecause the concept of adaptive intelligent machine is central to developmental robotics, it has relationships with fields such as artificial intelligence, machine learning, cognitive robotics or computational neuroscience. Yet, while it may reuse some of the techniques elaborated in these fields, it differs from them from many perspectives. It differs from classical artificial intelligence because it does not assume the capability of advanced symbolic reasoning and focuses on embodied and situated sensorimotor and social skills rather than on abstract symbolic problems. It differs from traditional machine learning because it targets task- independent self-determined learning rather than task-specific inference over \"spoon fed human-edited sensori data\" (Weng et al., 2001). It differs from cognitive robotics because it focuses on the processes that allow the formation of cognitive capabilities rather than these capabilities themselves. It differs from computational neuroscience because it focuses on functional modeling of integrated architectures of development and learning. More generally, developmental robotics is uniquely characterized by the following three features:\n\nDevelopmental robotics emerged at the crossroads of several research communities including embodied artificial intelligence, enactive and dynamical systems cognitive science, connectionism. Starting from the essential idea that learning and development happen as the self-organized result of the dynamical interactions among brains, bodies and their physical and social environment, and trying to understand how this self- organization can be harnessed to provide task-independent lifelong learning of skills of increasing complexity, developmental robotics strongly interacts with fields such as developmental psychology, developmental and cognitive neuroscience, developmental biology (embryology), evolutionary biology, and cognitive linguistics. As many of the theories coming from these sciences are verbal and/or descriptive, this implies a crucial formalization and computational modeling activity in developmental robotics. These computational models are then not only used as ways to explore how to build more versatile and adaptive machines, but also as a way to evaluate their coherence and possibly explore alternative explanations for understanding biological development.\n\nDue to the general approach and methodology, developmental robotics projects typically focus on having robots develop the same types of skills as human infants. A first category that is importantly being investigated is the acquisition of sensorimotor skills. These include the discovery of one's own body, including its structure and dynamics such as hand–eye coordination, locomotion, and interaction with objects as well as tool use, with a particular focus on the discovery and learning of affordances. A second category of skills targeted by developmental robots are social and linguistic skills: the acquisition of simple social behavioural games such as turn-taking, coordinated interaction, lexicons, syntax and grammar, and the grounding of these linguistic skills into sensorimotor skills (sometimes referred as symbol grounding). In parallel, the acquisition of associated cognitive skills are being investigated such as the emergence of the self/non-self distinction, the development of attentional capabilities, of categorization systems and higher-level representations of affordances or social constructs, of the emergence of values, empathy, or theories of mind.\n\nThe sensorimotor and social spaces in which humans and robot live are so large and complex that only a small part of potentially learnable skills can actually be explored and learnt within a life-time. Thus, mechanisms and constraints are necessary to guide developmental organisms in their development and control of the growth of complexity. There are several important families of these guiding mechanisms and constraints which are studied in developmental robotics, all inspired by human development:\n\nWhile most developmental robotics projects strongly interact with theories of animal and human development, the degrees of similarities and inspiration between identified biological mechanisms and their counterpart in robots, as well as the abstraction levels of modeling, may vary a lot. While some projects aim at modeling precisely both the function and biological implementation (neural or morphological models), such as in neurorobotics, some other projects only focus on functional modeling of the mechanisms and constraints described above, and might for example reuse in their architectures techniques coming from applied mathematics or engineering fields.\n\nAs developmental robotics is a relatively novel research field and at the same time very ambitious, many fundamental open challenges remain to be solved.\n\nFirst of all, existing techniques are far from allowing real-world high-dimensional robots to learn an open- ended repertoire of increasingly complex skills over a life-time period. High-dimensional continuous sensorimotor spaces are a major obstacle to be solved. Lifelong cumulative learning is another one. Actually, no experiments lasting more than a few days have been set up so far, which contrasts severely with the time period needed by human infants to learn basic sensorimotor skills while equipped with brains and morphologies which are tremendously more powerful than existing computational mechanisms.\n\nAmong the strategies to explore in order to progress towards this target, the interaction between the mechanisms and constraints described in the previous section shall be investigated more systematically. Indeed, they have so far mainly been studied in isolation. For example, the interaction of intrinsically motivated learning and socially guided learning, possibly constrained by maturation, is an essential issue to be investigated.\n\nAnother important challenge is to allow robots to perceive, interpret and leverage the diversity of multimodal social cues provided by non-engineer humans during human-robot interaction. These capacities are so far mostly too limited to allow efficient general purpose teaching from humans.\n\nA fundamental scientific issue to be understood and resolved, which applied equally to human development, is how compositionality, functional hierarchies, primitives, and modularity, at all levels of sensorimotor and social structures, can be formed and leveraged during development. This is deeply linked with the problem of the emergence of symbols, sometimes referred as the \"symbol grounding problem\" when it comes to language acquisition. Actually, the very existence and need for symbols in the brain is actively questioned, and alternative concepts, still allowing for compositionality and functional hierarchies are being investigated.\n\nDuring biological epigenesis, morphology is not fixed but rather develops in constant interaction with the development of sensorimotor and social skills. The development of morphology poses obvious practical problems with robots, but it may be a crucial mechanism that should be further explored, at least in simulation, such as in morphogenetic robotics.\n\nAnother open problem is the understanding of the relation between the key phenomena investigated by developmental robotics (e.g., hierarchical and modular sensorimotor systems, intrinsic/extrinsic/social motivations, and open-ended learning) and the underlying brain mechanisms.\n\nSimilarly, in biology, developmental mechanisms (operating at the ontogenetic time scale) strongly interact with evolutionary mechanisms (operating at the phylogenetic time scale) as shown in the flourishing \"evo-devo\" scientific literature.\nHowever, the interaction of those mechanisms in artificial organisms, developmental robots in particular, is still vastly understudied. The interaction of evolutionary mechanisms, unfolding morphologies and developing sensorimotor and social skills will thus be a highly stimulating topic for the future of developmental robotics.\n\n\nThe NSF/DARPA funded Workshop on Development and Learning was held April 5–7, 2000 at Michigan State University. It was the first international meeting devoted to computational understanding of mental development by robots and animals. The term \"by\" was used since the agents are active during development.\n\n\n\n\n\nThe first undergraduate courses in DevRob were offered at Bryn Mawr College and Swarthmore College in the Spring of 2003 by Douglas Blank and Lisa Meeden, respectively.\nThe first graduate course in DevRob was offered at Iowa State University by Alexander Stoytchev in the Fall of 2005.\n\n", "id": "1422176", "title": "Developmental robotics"}
{"url": "https://en.wikipedia.org/wiki?curid=847558", "text": "Confusion matrix\n\nIn the field of machine learning and specifically the problem of statistical classification, a confusion matrix, also known as an error matrix, is a specific table layout that allows visualization of the performance of an algorithm, typically a supervised learning one (in unsupervised learning it is usually called a matching matrix). Each row of the matrix represents the instances in a predicted class while each column represents the instances in an actual class (or vice versa). The name stems from the fact that it makes it easy to see if the system is confusing two classes (i.e. commonly mislabelling one as another).\n\nIt is a special kind of contingency table, with two dimensions (\"actual\" and \"predicted\"), and identical sets of \"classes\" in both dimensions (each combination of dimension and class is a variable in the contingency table).\n\nIf a classification system has been trained to distinguish between cats, dogs and rabbits, a confusion matrix will summarize the results of testing the algorithm for further inspection. Assuming a sample of 27 animals — 8 cats, 6 dogs, and 13 rabbits, the resulting confusion matrix could look like the table below:\nIn predictive analytics, a table of confusion (sometimes also called a confusion matrix), is a table with two rows and two columns that reports the number of \"false positives\", \"false negatives\", \"true positives\", and \"true negatives\". This allows more detailed analysis than mere proportion of correct classifications (accuracy). Accuracy is not a reliable metric for the real performance of a classifier, because it will yield misleading results if the data set is unbalanced (that is, when the numbers of observations in different classes vary greatly). For example, if there were 95 cats and only 5 dogs in the data set, a particular classifier might classify all the observations as cats. The overall accuracy would be 95%, but in more detail the classifier would have a 100% recognition rate for the cat class but a 0% recognition rate for the dog class. F1 score is even more unreliable in such cases, and here would yield over 97.4%, whereas Informedness removes such bias and yields 0 as the probability of an informed decision for any form of guessing (here alway guessing cat).\n\nAssuming the confusion matrix above, its corresponding table of confusion, for the cat class, would be:\n\nThe final table of confusion would contain the average values for all classes combined.\n\nLet us define an experiment from P positive instances and N negative instances for some condition. The four outcomes can be formulated in a 2×2 \"confusion matrix\", as follows:\n\n", "id": "847558", "title": "Confusion matrix"}
{"url": "https://en.wikipedia.org/wiki?curid=28801798", "text": "Active learning (machine learning)\n\nActive learning is a special case of semi-supervised machine learning in which a learning algorithm is able to interactively query the user (or some other information source) to obtain the desired outputs at new data points. In statistics literature it is sometimes also called optimal experimental design. \n\nThere are situations in which unlabeled data is abundant but manually labeling is expensive. In such a scenario, learning algorithms can actively query the user/teacher for labels. This type of iterative supervised learning is called active learning. Since the learner chooses the examples, the number of examples to learn a concept can often be much lower than the number required in normal supervised learning. With this approach, there is a risk that the algorithm be overwhelmed by uninformative examples.\nRecent developments are dedicated to multi-label active learning, hybrid active learning and active learning in a single-pass (on-line) context, combining concepts from the field of Machine Learning (e.g., conflict and ignorance) with adaptive, incremental learning policies in the field of Online machine learning.\n\nLet formula_1 be the total set of all data under consideration. For example, in a protein engineering problem, formula_1 would include all proteins that are known to have a certain interesting activity and all additional proteins that one might want to test for that activity.\n\nDuring each iteration, formula_3, formula_1 is broken up into three subsets\n\nMost of the current research in active learning involves the best method to choose the data points for formula_9.\n\nAlgorithms for determining which data points should be labeled can be organized into a number of different categories:\n\n\nA wide variety of algorithms have been studied that fall into these categories.\n\nSome active learning algorithms are built upon Support vector machines (SVMs) and exploit the structure of the SVM to determine which data points to label. Such methods usually calculate the margin, formula_10, of each unlabeled datum in formula_8 and treat formula_10 as an formula_13-dimensional distance from that datum to the separating hyperplane.\n\nMinimum Marginal Hyperplane methods assume that the data with the smallest formula_10 are those that the SVM is most uncertain about and therefore should be placed in formula_9 to be labeled. Other similar methods, such as Maximum Marginal Hyperplane, choose data with the largest formula_10. Tradeoff methods choose a mix of the smallest and largest formula_10s.\n\n", "id": "28801798", "title": "Active learning (machine learning)"}
{"url": "https://en.wikipedia.org/wiki?curid=4375576", "text": "Grammar induction\n\nGrammar induction (or grammatical inference) is the process in machine learning of learning a formal grammar (usually as a collection of \"re-write rules\" or \"productions\" or alternatively as a finite state machine or automaton of some kind) from a set of observations, thus constructing a model which accounts for the characteristics of the observed objects. More generally, grammatical inference is that branch of machine learning where the instance space consists of discrete combinatorial objects such as strings, trees and graphs.\n\nGrammatical inference has often been very focused on the problem of learning finite state machines of various types (see the article Induction of regular languages for details on these approaches), since there have been efficient algorithms for this problem since the 1980s.\n\nSince the beginning of the century, these approaches have been extended to the problem of inference of context-free grammars and richer formalisms, such as multiple context-free grammars and parallel multiple context-free grammars.\nOther classes of grammars for which grammatical inference has been studied are contextual grammars and pattern languages.\n\nThe simplest form of learning is where the learning algorithm merely receives a set of examples drawn from the language in question: the aim is to learn the language from examples of it (and, rarely, from counter-examples, that is, example that do not belong to the language).\nHowever, other learning models have been studied. One frequently studied alternative is the case where the learner can ask membership queries as in the exact query learning model or minimally adequate teacher model introduced by Angluin.\n\nThere is a wide variety of methods for grammatical inference. Two of the classic sources are and . also devote a brief section to the problem, and cite a number of references. The basic trial-and-error method they present is discussed below. For approaches to infer subclasses of regular languages in particular, see \"Induction of regular languages\". A more recent textbook is de la Higuera (2010), which covers the theory of grammatical inference of regular languages and finite state automata. D'Ulizia, Ferri and Grifoni provide a survey that explores grammatical inference methods for natural languages.\n\nThe method proposed in Section 8.7 of suggests successively guessing grammar rules (productions) and testing them against positive and negative observations. The rule set is expanded so as to be able to generate each positive example, but if a given rule set also generates a negative example, it must be discarded. This particular approach can be characterized as \"hypothesis testing\" and bears some similarity to Mitchel's version space algorithm. The text provide a simple example which nicely illustrates the process, but the feasibility of such an unguided trial-and-error approach for more substantial problems is dubious.\n\nGrammatical induction using evolutionary algorithms is the process of evolving a representation of the grammar of a target language through some evolutionary process. Formal grammars can easily be represented as tree structures of production rules that can be subjected to evolutionary operators. Algorithms of this sort stem from the genetic programming paradigm pioneered by John Koza. Other early work on simple formal languages used the binary string representation of genetic algorithms, but the inherently hierarchical structure of grammars couched in the EBNF language made trees a more flexible approach.\n\nKoza represented Lisp programs as trees. He was able to find analogues to the genetic operators within the standard set of tree operators. For example, swapping sub-trees is equivalent to the corresponding process of genetic crossover, where sub-strings of a genetic code are transplanted into an individual of the next generation. Fitness is measured by scoring the output from the functions of the Lisp code. Similar analogues between the tree structured lisp representation and the representation of grammars as trees, made the application of genetic programming techniques possible for grammar induction.\n\nIn the case of grammar induction, the transplantation of sub-trees corresponds to the swapping of production rules that enable the parsing of phrases from some language. The fitness operator for the grammar is based upon some measure of how well it performed in parsing some group of sentences from the target language. In a tree representation of a grammar, a terminal symbol of a production rule corresponds to a leaf node of the tree. Its parent nodes corresponds to a non-terminal symbol (e.g. a noun phrase or a verb phrase) in the rule set. Ultimately, the root node might correspond to a sentence non-terminal.\n\nLike all greedy algorithms, greedy grammar inference algorithms make, in iterative manner, decisions that seem to be the best at that stage.\nThe decisions made usually deal with things like the creation of new rules, the removal of existing rules, the choice of a rule to be applied or the merging of some existing rules.\nBecause there are several ways to define 'the stage' and 'the best', there are also several greedy grammar inference algorithms.\n\nThese context-free grammar generating algorithms make the decision after every read symbol:\n\nThese context-free grammar generating algorithms first read the whole given symbol-sequence and then start to make decisions:\n\nA more recent approach is based on distributional learning. Algorithms using these approaches have been applied to learning context-free grammars and mildly context-sensitive languages and have been proven to be correct and efficient for large subclasses of these grammars.\n\nAngluin defines a \"pattern\" to be \"a string of constant symbols from Σ and variable symbols from a disjoint set\".\nThe language of such a pattern is the set of all its nonempty ground instances i.e. all strings resulting from consistent replacement of its variable symbols by nonempty strings of constant symbols.\nA pattern is called descriptive for a finite input set of strings if its language is minimal (with respect to set inclusion) among all pattern languages subsuming the input set.\n\nAngluin gives a polynomial algorithm to compute, for a given input string set, all descriptive patterns in one variable \"x\".\nTo this end, she builds an automaton representing all possibly relevant patterns; using sophisticated arguments about word lengths, which rely on \"x\" being the only variable, the state count can be drastically reduced.\n\nErlebach et al. give a more efficient version of Angluin's pattern learning algorithm, as well as a parallelized version.\n\nArimura et al. show that a language class obtained from limited unions of patterns can be learned in polynomial time.\n\nPattern theory, formulated by Ulf Grenander, is a mathematical formalism to describe knowledge of the world as patterns. It differs from other approaches to artificial intelligence in that it does not begin by prescribing algorithms and machinery to recognize and classify patterns; rather, it prescribes a vocabulary to articulate and recast the pattern concepts in precise language.\n\nIn addition to the new algebraic vocabulary, its statistical approach was novel in its aim to:\nBroad in its mathematical coverage, pattern theory spans algebra and statistics, as well as local topological and global entropic properties.\n\nThe principle of grammar induction has been applied to other aspects of natural language processing, and has been applied (among many other problems) to morpheme analysis, and place name derivations. Grammar induction has also been used for lossless data compression and statistical inference via minimum message length (MML) and minimum description length (MDL) principles.\n\n\n", "id": "4375576", "title": "Grammar induction"}
{"url": "https://en.wikipedia.org/wiki?curid=40946774", "text": "Pattern language (formal languages)\n\nIn theoretical computer science, a pattern language is a formal language that can be defined as the set of all particular instances of a string of constants and variables. Pattern Languages were introduced by Dana Angluin in the context of machine learning.\n\nGiven a finite set Σ of constant symbols and a countable set \"X\" of variable symbols disjoint from Σ, a pattern is a finite non-empty string of symbols from Σ∪\"X\".\nThe length of a pattern \"p\", denoted by |\"p\"|, is just the number of its symbols.\nThe set of all patterns containing exactly \"n\" distinct variables (each of which may occur several times) is denoted by \"P\", the set of all patterns at all by \"P\".\nA substitution is a mapping \"f\": \"P\" → \"P\" such that\nIf \"p\" = \"f\"(\"q\") for some patterns \"p\", \"q\" ∈ \"P\" and some substitution \"f\", then \"p\" is said to be less general than \"q\", written \"p\"≤\"q\";\nin that case, necessarily |\"p\"| ≥ |\"q\"| holds.\nFor a pattern \"p\", its language is defined as the set of all less general patterns that are built from constants only, formally: \"L\"(\"p\") = { \"s\" ∈ Σ : \"s\" ≤ \"p\" }, where Σ denotes the set of all finite non-empty strings of symbols from Σ.\n\nFor example, using the constants Σ = { 0, 1 } and the variables \"X\" = { \"x\", \"y\", \"z\", ... }, the pattern 0\"x\"10\"xx\"1 ∈\"P\" and \"xxy\" ∈\"P\" has length 7 and 3, respectively.\nAn instance of the former pattern is 00\"z\"100\"z\"0\"z\"1 and 01\"z\"101\"z\"1\"z\"1, it is obtained by the substitution that maps \"x\" to 0\"z\" and to 1\"z\", respectively, and each other symbol to itself. Both 00\"z\"100\"z\"0\"z\"1 and 01\"z\"101\"z\"1\"z\"1 are also instances of \"xxy\". In fact, \"L\"(0\"x\"10\"xx\"1) is a subset of \"L\"(\"xxy\"). The language of the pattern \"x\"0 and \"x\"1 is the set of all bit strings which denote an even and odd binary number, respectively. The language of \"xx\" is the set of all strings obtainable by concatenating a bit string with itself, e.g. 00, 11, 0101, 1010, 11101110 ∈ \"L\"(\"xx\").\n\nThe problem of deciding whether \"s\" ∈ \"L\"(\"p\") for an arbitrary string \"s\" ∈ Σ and pattern \"p\" is NP-complete (see picture),\nand so is hence the problem of deciding \"p\" ≤ \"q\" for arbitrary patterns \"p\", \"q\".\n\nThe class of pattern languages is not closed under ...\nThe class of pattern languages is closed under ...\n\nIf \"p\", \"q\" ∈ \"P\" are patterns containing exactly one variable, then \"p\" ≤ \"q\" if and only if \"L\"(\"p\") ⊆ \"L\"(\"q\");\nthe same equivalence holds for patterns of equal length.\nFor patterns of different length, the above example \"p\" = 0\"x\"10\"xx\"1 and \"q\" = \"xxy\" shows that \"L\"(\"p\") ⊆ \"L\"(\"q\") may hold without implying \"p\" ≤ \"q\".\nHowever, any two patterns \"p\" and \"q\", of arbitrary lengths, generate the same language if and only if they are equal up to consistent variable renaming.\nEach pattern \"p\" is a common generalization of all strings in its generated language \"L\"(\"p\"), modulo associativity of (⋅).\n\nIn a refined Chomsky hierarchy, the class of pattern languages is a proper superclass and subclass of the singleton and the indexed languages, respectively, but incomparable to the language classes in between; due to the latter, the pattern language class is not explicitly shown in the table below.\n\nThe class of pattern languages is incomparable with the class of finite languages, with the class of regular languages, and with the class of context-free languages:\nEach singleton language is trivially a pattern language, generated by a pattern without variables.\n\nEach pattern language can be produced by an indexed grammar:\nFor example, using Σ = { \"a\", \"b\", \"c\" } and \"X\" = { x, y },\nthe pattern \"a\" x \"b\" y \"c\" x \"a\" y \"b\" is generated by a grammar with nonterminal symbols \"N\" = { \"S\", \"S\", \"S\" } ∪ \"X\", terminal symbols \"T\" = Σ, index symbols \"F\" = { \"a\", \"b\", \"c\", \"a\", \"b\", \"c\" }, start symbol \"S\", and the following production rules:\n\nAn example derivation is:\n  ⇒   \n  ⇒   \n  ⇒   \n  ⇒   \n  ⇒   \n  ⇒ ... ⇒   \n  ⇒ ... ⇒   \n  ⇒ ... ⇒   \n\nIn a similar way, an index grammar can be constructed from any pattern.\n\nGiven a sample set \"S\" of strings, a pattern \"p\" is called descriptive of \"S\" if \"S\" ⊆ \"L\"(\"p\"), but not \"S\" ⊆ \"L\"(\"q\") ⊂ \"L\"(\"p\") for any other pattern \"q\".\n\nGiven any sample set \"S\", a descriptive pattern for \"S\" can be computed by \nBased on this algorithm, the class of pattern languages can be identified in the limit from positive examples.\n", "id": "40946774", "title": "Pattern language (formal languages)"}
{"url": "https://en.wikipedia.org/wiki?curid=40973765", "text": "Bayesian optimization\n\nBayesian optimization is a sequential design strategy\nfor global optimization of black-box functions that doesn't require derivatives.\n\nThe term is generally attributed to Jonas Mockus and is coined in his work from a series of publications on global optimization in the 1970s and 1980s.\n\nSince the objective function is unknown, the Bayesian strategy is to treat it as a random function and place a prior over it.\nThe prior captures our beliefs about the behaviour of the function.\nAfter gathering the function evaluations, which are treated as data, the prior is updated\nto form the posterior distribution over the objective function.\nThe posterior distribution, in turn, is used to construct\nan acquisition function (often also referred to as infill sampling criteria) that determines what the next query point should be.\n\nExamples of acquisition functions include probability of improvement,\nexpected improvement, Bayesian expected losses, upper confidence bounds (UCB), Thompson sampling\nand mixtures of these. They all trade-off exploration and exploitation so as to minimize the number of function queries. As such, Bayesian optimization is well suited for functions that are very expensive to evaluate.\n\nThe maximum of the acquisition function is typically found by resorting to discretization or by means of an auxiliary optimizer.\n\nThe approach has been applied to solve a wide range of problems, including learning to rank, interactive animation, robotics, sensor networks, automatic algorithm configuration, automatic machine learning toolboxes, reinforcement learning, planning, visual attention, architecture configuration in deep learning, static program analysis, etc.\n\n\n", "id": "40973765", "title": "Bayesian optimization"}
{"url": "https://en.wikipedia.org/wiki?curid=213214", "text": "Early stopping\n\nIn machine learning, early stopping is a form of regularization used to avoid overfitting when training a learner with an iterative method, such as gradient descent. Such methods update the learner so as to make it better fit the training data with each iteration. Up to a point, this improves the learner's performance on data outside of the training set. Past that point, however, improving the learner's fit to the training data comes at the expense of increased generalization error. Early stopping rules provide guidance as to how many iterations can be run before the learner begins to over-fit. Early stopping rules have been employed in many different machine learning methods, with varying amounts of theoretical foundation.\n\nThis section presents some of the basic machine-learning concepts required for a description of early stopping methods.\n\nMachine learning algorithms train a model based on a finite set of training data. During this training, the model is evaluated based on how well it predicts the observations contained in the training set. In general, however, the goal of a machine learning scheme is to produce a model that generalizes, that is, that predicts previously unseen observations. Overfitting occurs when a model fits the data in the training set well, while incurring larger generalization error.\n\nRegularization, in the context of machine learning, refers to the process of modifying a learning algorithm so as to prevent overfitting. This generally involves imposing some sort of smoothness constraint on the learned model.\nThis smoothness may be enforced explicitly, by fixing the number of parameters in the model, or by augmenting the cost function as in Tikhonov regularization. Tikhonov regularization, along with principal component regression and many other regularization schemes, fall under the umbrella of spectral regularization, regularization characterized by the application of a filter. Early stopping also belongs to this class of methods.\n\nGradient descent methods are first-order, iterative, optimization methods. Each iteration updates an approximate solution to the optimization problem by taking a step in the direction of the negative of the gradient of the objective function. By choosing the step-size appropriately, such a method can be made to converge to a local minimum of the objective function. Gradient descent is used in machine-learning by defining a \"loss function\" that reflects the error of the learner on the training set and then minimizing that function.\n\nEarly-stopping can be used to regularize non-parametric regression problems encountered in machine learning. For a given input space, formula_1, output space, formula_2, and samples drawn from an unknown probability measure, formula_3, on formula_4, the goal of such problems is to approximate a \"regression function\", formula_5, given by\n\nwhere formula_7 is the conditional distribution at formula_8 induced by formula_3.\nOne common choice for approximating the regression function is to use functions from a reproducing kernel Hilbert space. These spaces can be infinite dimensional, in which they can supply solutions that overfit training sets of arbitrary size. Regularization is, therefore, especially important for these methods. One way to regularize non-parametric regression problems is to apply an early stopping rule to an iterative procedure such as gradient descent.\n\nThe early stopping rules proposed for these problems are based on analysis of upper bounds on the generalization error as a function of the iteration number. They yield prescriptions for the number of iterations to run that can be computed prior to starting the solution process.\n\nLet formula_10 and formula_11. Given a set of samples\n\ndrawn independently from formula_3, minimize the functional\n\nwhere, formula_15 is a member of the reproducing kernel Hilbert space formula_16. That is, minimize the expected risk for a Least-squares loss function. Since formula_17 depends on the unknown probability measure formula_3, it cannot be used for computation. Instead, consider the following empirical risk\n\nLet formula_20 and formula_21 be the \"t\"-th iterates of gradient descent applied to the expected and empirical risks, respectively, where both iterations are initialized at the origin, and both use the step size formula_22. The formula_20 form the \"population iteration\", which converges to formula_5, but cannot be used in computation, while the formula_21 form the \"sample iteration\" which usually converges to an overfitting solution.\n\nWe want to control the difference between the expected risk of the sample iteration and the minimum expected risk, that is, the expected risk of the regression function:\n\nThis difference can be rewritten as the sum of two terms: the difference in expected risk between the sample and population iterations and that between the population iteration and the regression function:\n\nThis equation presents a bias-variance tradeoff, which is then solved to give an optimal stopping rule that may depend on the unknown probability distribution. That rule has associated probabilistic bounds on the generalization error. For the analysis leading to the early stopping rule and bounds, the reader is referred to the original article. In practice, data-driven methods, e.g. cross-validation can be used to obtain an adaptive stopping rule.\n\nBoosting refers to a family of algorithms in which a set of weak learners (learners that are only slightly correlated with the true process) are combined to produce a strong learner. It has been shown, for several boosting algorithms (including AdaBoost), that regularization via early stopping can provide guarantees of consistency, that is, that the result of the algorithm approaches the true solution as the number of samples goes to infinity.\n\nBoosting methods have close ties to the gradient descent methods described above can be regarded as a boosting method based on the formula_28 loss: \"LBoost\".\n\nThese early stopping rules work by splitting the original training set into a new training set and a validation set. The error on the validation set is used as a proxy for the generalization error in determining when overfitting has begun. These methods are most commonly employed in the training of neural networks. Prechelt gives the following summary of a naive implementation of holdout-based early stopping as follows:\n\nMore sophisticated forms use cross-validation – multiple partitions of the data into training set and validation set – instead of a single partition into a training set and validation set. Even this simple procedure is complicated in practice by the fact that the validation error may fluctuate during training, producing multiple local minima. This complication has led to the creation of many ad-hoc rules for deciding when overfitting has truly begun.\n\n", "id": "213214", "title": "Early stopping"}
{"url": "https://en.wikipedia.org/wiki?curid=41200806", "text": "Proximal gradient methods for learning\n\nProximal gradient (forward backward splitting) methods for learning is an area of research in optimization and statistical learning theory which studies algorithms for a general class of convex regularization problems where the regularization penalty may not be differentiable. One such example is formula_1 regularization (also known as Lasso) of the form\n\nProximal gradient methods offer a general framework for solving regularization problems from statistical learning theory with penalties that are tailored to a specific problem application. Such customized penalties can help to induce certain structure in problem solutions, such as \"sparsity\" (in the case of lasso) or \"group structure\" (in the case of group lasso).\n\nProximal gradient methods are applicable in a wide variety of scenarios for solving convex optimization problems of the form\nwhere formula_4 is convex and differentiable with Lipschitz continuous gradient, formula_5 is a convex, lower semicontinuous function which is possibly nondifferentiable, and formula_6 is some set, typically a Hilbert space. The usual criterion of formula_7 minimizes formula_8 if and only if formula_9 in the convex, differentiable setting is now replaced by\nwhere formula_11 denotes the subdifferential of a real-valued, convex function formula_12.\n\nGiven a convex function formula_13 an important operator to consider is its proximity operator formula_14 defined by\nwhich is well-defined because of the strict convexity of the formula_16 norm. The proximity operator can be seen as a generalization of a projection.\nWe see that the proximity operator is important because formula_17 is a minimizer to the problem formula_18 if and only if\n\nOne important technique related to proximal gradient methods is the Moreau decomposition, which decomposes the identity operator as the sum of two proximity operators. Namely, let formula_21 be a lower semicontinuous, convex function on a vector space formula_22. We define its Fenchel conjugate formula_23 to be the function\nThe general form of Moreau's decomposition states that for any formula_25 and any formula_20 that\nwhich for formula_28 implies that formula_29. The Moreau decomposition can be seen to be a generalization of the usual orthogonal decomposition of a vector space, analogous with the fact that proximity operators are generalizations of projections.\n\nIn certain situations it may be easier to compute the proximity operator for the conjugate formula_30 instead of the function formula_31, and therefore the Moreau decomposition can be applied. This is the case for group lasso.\n\nConsider the regularized empirical risk minimization problem with square loss and with the formula_1 norm as the regularization penalty:\nwhere formula_34 The formula_1 regularization problem is sometimes referred to as \"lasso\" (least absolute shrinkage and selection operator). Such formula_1 regularization problems are interesting because they induce \" sparse\" solutions, that is, solutions formula_37 to the minimization problem have relatively few nonzero components. Lasso can be seen to be a convex relaxation of the non-convex problem\nwhere formula_39 denotes the formula_40 \"norm\", which is the number of nonzero entries of the vector formula_37. Sparse solutions are of particular interest in learning theory for interpretability of results: a sparse solution can identify a small number of important factors.\n\nFor simplicity we restrict our attention to the problem where formula_43. To solve the problem\nwe consider our objective function in two parts: a convex, differentiable term formula_45 and a convex function formula_46. Note that formula_47 is not strictly convex.\n\nLet us compute the proximity operator for formula_48. First we find an alternative characterization of the proximity operator formula_49 as follows:\n\nformula_50\n\nFor formula_46 it is easy to compute formula_52: the formula_53th entry of formula_52 is precisely\n\nUsing the recharacterization of the proximity operator given above, for the choice of formula_46 and formula_20 we have that formula_58 is defined entrywise by\n\nwhich is known as the soft thresholding operator formula_60.\n\nTo finally solve the lasso problem we consider the fixed point equation shown earlier:\n\nGiven that we have computed the form of the proximity operator explicitly, then we can define a standard fixed point iteration procedure. Namely, fix some initial formula_62, and for formula_63 define\nNote here the effective trade-off between the empirical error term formula_65 and the regularization penalty formula_48. This fixed point method has decoupled the effect of the two different convex functions which comprise the objective function into a gradient descent step (formula_67) and a soft thresholding step (via formula_68).\n\nConvergence of this fixed point scheme is well-studied in the literature and is guaranteed under appropriate choice of step size formula_69 and loss function (such as the square loss taken here). Accelerated methods were introduced by Nesterov in 1983 which improve the rate of convergence under certain regularity assumptions on formula_4. Such methods have been studied extensively in previous years.\nFor more general learning problems where the proximity operator cannot be computed explicitly for some regularization term formula_47, such fixed point schemes can still be carried out using approximations to both the gradient and the proximity operator.\n\nThere have been numerous developments within the past decade in convex optimization techniques which have influenced the application of proximal gradient methods in statistical learning theory. Here we survey a few important topics which can greatly improve practical algorithmic performance of these methods.\n\nIn the fixed point iteration scheme\none can allow variable step size formula_73 instead of a constant formula_69. Numerous adaptive step size schemes have been proposed throughout the literature. Applications of these schemes suggest that these can offer substantial improvement in number of iterations required for fixed point convergence.\n\nElastic net regularization offers an alternative to pure formula_1 regularization. The problem of lasso (formula_1) regularization involves the penalty term formula_46, which is not strictly convex. Hence, solutions to formula_78 where formula_4 is some empirical loss function, need not be unique. This is often avoided by the inclusion of an additional strictly convex term, such as an formula_80 norm regularization penalty. For example, one can consider the problem\nwhere formula_34\nFor formula_83 the penalty term formula_84 is now strictly convex, and hence the minimization problem now admits a unique solution. It has been observed that for sufficiently small formula_85, the additional penalty term formula_86 acts as a preconditioner and can substantially improve convergence while not adversely affecting the sparsity of solutions.\n\nProximal gradient methods provide a general framework which is applicable to a wide variety of problems in statistical learning theory. Certain problems in learning can often involve data which has additional structure that is known \" a priori\". In the past several years there have been new developments which incorporate information about group structure to provide methods which are tailored to different applications. Here we survey a few such methods.\n\nGroup lasso is a generalization of the lasso method when features are grouped into disjoint blocks. Suppose the features are grouped into blocks formula_87. Here we take as a regularization penalty\n\nwhich is the sum of the formula_80 norm on corresponding feature vectors for the different groups. A similar proximity operator analysis as above can be used to compute the proximity operator for this penalty. Where the lasso penalty has a proximity operator which is soft thresholding on each individual component, the proximity operator for the group lasso is soft thresholding on each group. For the group formula_90 we have that proximity operator of formula_91 is given by\n\nwhere formula_90 is the formula_94th group.\n\nIn contrast to lasso, the derivation of the proximity operator for group lasso relies on the Moreau decomposition. Here the proximity operator of the conjugate of the group lasso penalty becomes a projection onto the ball of a dual norm.\n\nIn contrast to the group lasso problem, where features are grouped into disjoint blocks, it may be the case that grouped features are overlapping or have a nested structure. Such generalizations of group lasso have been considered in a variety of contexts. For overlapping groups one common approach is known as \"latent group lasso\" which introduces latent variables to account for overlap. Nested group structures are studied in \"hierarchical structure prediction\" and with directed acyclic graphs.\n\n", "id": "41200806", "title": "Proximal gradient methods for learning"}
{"url": "https://en.wikipedia.org/wiki?curid=2090057", "text": "Kernel density estimation\n\nIn statistics, kernel density estimation (KDE) is a non-parametric way to estimate the probability density function of a random variable. Kernel density estimation is a fundamental data smoothing problem where inferences about the population are made, based on a finite data sample. In some fields such as signal processing and econometrics it is also termed the \"Parzen–Rosenblatt window\" method, after Emanuel Parzen and Murray Rosenblatt, who are usually credited with independently creating it in its current form.\n\nLet (\"x\", \"x\", …, \"x\") be a univariate independent and identically distributed sample drawn from some distribution with an unknown density \"ƒ\". We are interested in estimating the shape of this function \"ƒ\". Its \"kernel density estimator\" is\nwhere \"K\" is the kernel — a non-negative function that integrates to one — and is a smoothing parameter called the \"bandwidth\". A kernel with subscript \"h\" is called the \"scaled kernel\" and defined as . Intuitively one wants to choose \"h\" as small as the data will allow; however, there is always a trade-off between the bias of the estimator and its variance. The choice of bandwidth is discussed in more detail below.\n\nA range of kernel functions are commonly used: uniform, triangular, biweight, triweight, Epanechnikov, normal, and others. The Epanechnikov kernel is optimal in a mean square error sense, though the loss of efficiency is small for the kernels listed previously, and due to its convenient mathematical properties, the normal kernel is often used, which means , where \"ϕ\" is the standard normal density function.\n\nThe construction of a kernel density estimate finds interpretations in fields outside of density estimation. For example, in thermodynamics, this is equivalent to the amount of heat generated when heat kernels (the fundamental solution to the heat equation) are placed at each data point locations \"x\". Similar methods are used to construct discrete Laplace operators on point clouds for manifold learning.\n\nKernel density estimates are closely related to histograms, but can be endowed with properties such as smoothness or continuity by using a suitable kernel. To see this, we compare the construction of histogram and kernel density estimators, using these 6 data points: \"x\" = −2.1, \"x\" = −1.3, \"x\" = −0.4, \"x\" = 1.9, \"x\" = 5.1, \"x\" = 6.2. For the histogram, first the horizontal axis is divided into sub-intervals or bins which cover the range of the data. In this case, we have 6 bins each of width 2. Whenever a data point falls inside this interval, we place a box of height 1/12. If more than one data point falls inside the same bin, we stack the boxes on top of each other.\n\nFor the kernel density estimate, we place a normal kernel with variance 2.25 (indicated by the red dashed lines) on each of the data points \"x\". The kernels are summed to make the kernel density estimate (solid blue curve). The smoothness of the kernel density estimate is evident compared to the discreteness of the histogram, as kernel density estimates converge faster to the true underlying density for continuous random variables.\n\nThe bandwidth of the kernel is a free parameter which exhibits a strong influence on the resulting estimate. To illustrate its effect, we take a simulated random sample from the standard normal distribution (plotted at the blue spikes in the rug plot on the horizontal axis). The grey curve is the true density (a normal density with mean 0 and variance 1). In comparison, the red curve is \"undersmoothed\" since it contains too many spurious data artifacts arising from using a bandwidth \"h\" = 0.05, which is too small. The green curve is \"oversmoothed\" since using the bandwidth \"h\" = 2 obscures much of the underlying structure. The black curve with a bandwidth of \"h\" = 0.337 is considered to be optimally smoothed since its density estimate is close to the true density.\n\nThe most common optimality criterion used to select this parameter is the expected \"L\" risk function, also termed the mean integrated squared error:\n\nUnder weak assumptions on \"ƒ\" and \"K\",\nMISE (\"h\") = AMISE(\"h\") + \"o(1/(nh) + h)\" where \"o\" is the little o notation.\nThe AMISE is the Asymptotic MISE which consists of the two leading terms\n\nwhere formula_4 for a function \"g\", formula_5\nand \"ƒ\"\" is the second derivative of \"ƒ\". The minimum of this AMISE is the solution to this differential equation\n\nor\n\nNeither the AMISE nor the \"h\" formulas are able to be used directly since they involve the unknown density function \"ƒ\" or its second derivative \"ƒ\"\", so a variety of automatic, data-based methods have been developed for selecting the bandwidth. Many review studies have been carried out to compare their efficacies, with the general consensus that the plug-in selectors\n\nSubstituting any bandwidth \"h\" which has the same asymptotic order \"n\" as \"h\" into the AMISE\ngives that AMISE(\"h\") = \"O\"(\"n\"), where \"O\" is the big o notation. It can be shown that, under weak assumptions, there cannot exist a non-parametric estimator that converges at a faster rate than the kernel estimator. Note that the \"n\" rate is slower than the typical \"n\" convergence rate of parametric methods.\n\nIf the bandwidth is not held fixed, but is varied depending upon the location of either the estimate (balloon estimator) or the samples (pointwise estimator), this produces a particularly powerful method termed adaptive or variable bandwidth kernel density estimation.\n\nBandwidth selection for kernel density estimation of heavy-tailed distributions is said to be relatively difficult.\n\nIf Gaussian basis functions are used to approximate univariate data, and the underlying density being estimated is Gaussian, the optimal choice for \"h\" (that is, the bandwidth that minimises the mean integrated squared error) is\n\nwhere formula_9 is the standard deviation of the samples.\nThis approximation is termed the \"normal distribution approximation\", Gaussian approximation, or \"Silverman's (1986) rule of thumb\".\nWhile this rule of thumb is easy to compute, it should be used with caution as it can yield widely inaccurate estimates when the density is not close to being normal. For example, consider estimating the bimodal Gaussian mixture:\n\nfrom a sample of 200 points. The figure on the right below shows the true density and two kernel density estimates --- one using the rule-of-thumb bandwidth, and the other using \na solve-the-equation bandwidth. The estimate based on the rule-of-thumb bandwidth is significantly oversmoothed. \nThe Matlab script for this example uses \nkde.m and is given below.\n\nGiven the sample (\"x\", \"x\", …, \"x\"), it is natural to estimate the characteristic function as\nKnowing the characteristic function, it is possible to find the corresponding probability density function through the Fourier transform formula. One difficulty with applying this inversion formula is that it leads to a diverging integral, since the estimate formula_12 is unreliable for large \"t\"’s. To circumvent this problem, the estimator formula_12 is multiplied by a damping function , which is equal to 1 at the origin and then falls to 0 at infinity. The “bandwidth parameter” \"h\" controls how fast we try to dampen the function formula_12. In particular when \"h\" is small, then \"ψ\"(\"t\") will be approximately one for a large range of \"t\"’s, which means that formula_12 remains practically unaltered in the most important region of \"t\"’s.\n\nThe most common choice for function \"ψ\" is either the uniform function }, which effectively means truncating the interval of integration in the inversion formula to , or the gaussian function . Once the function \"ψ\" has been chosen, the inversion formula may be applied, and the density estimator will be\nwhere \"K\" is the Fourier transform of the damping function \"ψ\". Thus the kernel density estimator coincides with the characteristic function density estimator.\n\nA non-exhaustive list of software implementations of kernel density estimators includes:\n\n\n\n", "id": "2090057", "title": "Kernel density estimation"}
{"url": "https://en.wikipedia.org/wiki?curid=523173", "text": "Linear separability\n\nIn Euclidean geometry, linear separability is a geometric property of a pair of sets of points. This is most easily visualized in two dimensions (the Euclidean plane) by thinking of one set of points as being colored blue and the other set of points as being colored red. These two sets are \"linearly separable\" if there exists at least one line in the plane with all of the blue points on one side of the line and all the red points on the other side. This idea immediately generalizes to higher-dimensional Euclidean spaces if line is replaced by hyperplane.\n\nThe problem of determining if a pair of sets is linearly separable and finding a separating hyperplane if they are arises in several areas. In statistics and machine learning, classifying certain types of data is a problem for which good algorithms exist that are based on this concept. \n\nLet formula_1 and formula_2 be two sets of points in an \"n\"-dimensional Euclidean space. Then formula_1 and formula_2 are \"linearly separable\" if there exists \"n\" + 1 real numbers formula_5, such that every point formula_6 satisfies formula_7 and every point formula_8 satisfies formula_9, where formula_10 is the formula_11-th component of formula_12.\n\nEquivalently, two sets are linearly separable precisely when their respective convex hulls are disjoint (colloquially, do not overlap).\n\nThree non-collinear points in two classes ('+' and '-') are always linearly separable in two dimensions. This is illustrated by the three examples in the following figure (the all '+' case is not shown, but is similar to the all '-' case):\n\nHowever, not all sets of four points, no three collinear, are linearly separable in two dimensions. The following example would need \"two\" straight lines and thus is not linearly separable: \n\nNotice that three points which are collinear and of the form \"+ ⋅⋅⋅ — ⋅⋅⋅ +\" are also not linearly separable.\n\nA Boolean function in \"n\" variables can be thought of as an assignment of \"0\" or \"1\" to each vertex of a Boolean hypercube in \"n\" dimensions. This gives a natural division of the vertices into two sets. The Boolean function is said to be \"linearly separable\" provided these two sets of points are linearly separable.\n\nClassifying data is a common task in machine learning.\nSuppose some data points, each belonging to one of two sets, are given and we wish to create a model that will decide which set a \"new\" data point will be in. In the case of support vector machines, a data point is viewed as a \"p\"-dimensional vector (a list of \"p\" numbers), and we want to know whether we can separate such points with a (\"p\" − 1)-dimensional hyperplane. This is called a linear classifier. There are many hyperplanes that might classify (separate) the data. One reasonable choice as the best hyperplane is the one that represents the largest separation, or margin, between the two sets. So we choose the hyperplane so that the distance from it to the nearest data point on each side is maximized. If such a hyperplane exists, it is known as the \"maximum-margin hyperplane\" and the linear classifier it defines is known as a \"maximum margin classifier\".\n\nMore formally, given some training data formula_13, a set of \"n\" points of the form\n\nwhere the \"y\" is either 1 or −1, indicating the set to which the point formula_15 belongs. Each formula_16 is a \"p\"-dimensional real vector. We want to find the maximum-margin hyperplane that divides the points having formula_17 from those having formula_18. Any hyperplane can be written as the set of points formula_19 satisfying\n\nwhere formula_21 denotes the dot product and formula_22 the (not necessarily normalized) normal vector to the hyperplane. The parameter formula_23 determines the offset of the hyperplane from the origin along the normal vector formula_22.\n\nIf the training data are linearly separable, we can select two hyperplanes in such a way that they separate the data and there are no points between them, and then try to maximize their distance.\n\n", "id": "523173", "title": "Linear separability"}
{"url": "https://en.wikipedia.org/wiki?curid=40678189", "text": "Bias–variance tradeoff\n\nIn statistics and machine learning, the bias–variance tradeoff (or dilemma) is the problem of simultaneously minimizing two sources of error that prevent supervised learning algorithms from generalizing beyond their training set:\n\n\nThe bias–variance decomposition is a way of analyzing a learning algorithm's expected generalization error with respect to a particular problem as a sum of three terms, the bias, variance, and a quantity called the \"irreducible error\", resulting from noise in the problem itself.\n\nThis tradeoff applies to all forms of supervised learning: classification, regression (function fitting), and structured output learning. It has also been invoked to explain the effectiveness of heuristics in human learning.\n\nThe bias-variance tradeoff is a central problem in supervised learning. Ideally, one wants to choose a model that both accurately capture the regularities in its training data, but also generalizes well to unseen data. Unfortunately, it is typically impossible to do both simultaneously. High-variance learning methods may be able to represent their training set well but are at risk of overfitting to noisy or unrepresentative training data. In contrast, algorithms with high bias typically produce simpler models that don't tend to overfit but may \"underfit\" their training data, failing to capture important regularities.\n\nModels with low bias are usually more complex (e.g. higher-order regression polynomials), enabling them to represent the training set more accurately. In the process, however, they may also represent a large noise component in the training set, making their predictions less accurate - despite their added complexity. In contrast, models with higher bias tend to be relatively simple (low-order or even linear regression polynomials) but may produce lower variance predictions when applied beyond the training set.\n\nSuppose that we have a training set consisting of a set of points formula_1 and real values formula_2 associated with each point formula_3. We assume that there is a function with noise formula_4, where the noise, formula_5, has zero mean and variance formula_6.\n\nWe want to find a function formula_7, that approximates the true function formula_8 as well as possible, by means of some learning algorithm. We make \"as well as possible\" precise by measuring the mean squared error between formula_9 and formula_7: we want formula_11 to be minimal, both for formula_1 \"and for points outside of our sample\". Of course, we cannot hope to do so perfectly, since the formula_2 contain noise formula_5; this means we must be prepared to accept an \"irreducible error\" in any function we come up with.\n\nFinding an formula_15 that generalizes to points outside of the training set can be done with any of the countless algorithms used for supervised learning. It turns out that whichever function formula_15 we select, we can decompose its expected error on an unseen sample formula_17 as follows:\n\nWhere:\n\nand\n\nThe expectation ranges over different choices of the training set formula_21, all sampled from the same joint distribution formula_22. The three terms represent:\n\nThe more complex the model formula_7 is, the more data points it will capture, and the lower the bias will be. However, complexity will make the model \"move\" more to capture the data points, and hence its variance will be larger.\n\nThe derivation of the bias–variance decomposition for squared error proceeds as follows.\nFor notational convenience, abbreviate formula_28 and formula_29. First, recall that, by definition, for any random variable formula_30, we have\n\nRearranging, we get:\n\nSince formula_33 is deterministic\n\nThis, given formula_35 and formula_36, implies formula_37.\n\nAlso, since formula_38\n\nThus, since formula_5 and formula_15 are independent, we can write\n\nThe bias–variance decomposition forms the conceptual basis for regression regularization methods such as Lasso and ridge regression. Regularization methods introduce bias into the regression solution that can reduce variance considerably relative to the OLS solution. Although the OLS solution provides non-biased regression estimates, the lower variance solutions produced by regularization techniques provide superior MSE performance.\n\nThe bias–variance decomposition was originally formulated for least-squares regression. For the case of classification under the 0-1 loss (misclassification rate), it's possible to find a similar decomposition. Alternatively, if the classification problem can be phrased as probabilistic classification, then the expected squared error of the predicted probabilities with respect to the true probabilities can be decomposed as before.\n\nDimensionality reduction and feature selection can decrease variance by simplifying models. Similarly, a larger training set tends to decrease variance. Adding features (predictors) tends to decrease bias, at the expense of introducing additional variance. Learning algorithms typically have some tunable parameters that control bias and variance, e.g.:\n\n\nOne way of resolving the trade-off is to use mixture models and ensemble learning.\nFor example, boosting combines many \"weak\" (high bias) models in an ensemble that has lower bias than the individual models, while bagging combines \"strong\" learners in a way that reduces their variance.\n\nIn the case of -nearest neighbors regression, a closed-form expression exists that relates the bias–variance decomposition to the parameter :\n\nwhere formula_44 are the nearest neighbors of in the training set. The bias (first term) is a monotone rising function of , while the variance (second term) drops off as is increased. In fact, under \"reasonable assumptions\" the bias of the first-nearest neighbor (1-NN) estimator vanishes entirely as the size of the training set approaches infinity.\n\nWhile widely discussed in the context of machine learning, the bias-variance dilemma has been examined in the context of human cognition, most notably by Gerd Gigerenzer and co-workers in the context of learned heuristics. They have argued (see references below) that the human brain resolves the dilemma in the case of the typically sparse, poorly-characterised training-sets provided by experience by adopting high-bias/low variance heuristics. This reflects the fact that a zero-bias approach has poor generalisability to new situations, and also unreasonably presumes precise knowledge of the true state of the world. The resulting heuristics are relatively simple, but produce better inferences in a wider variety of situations.\n\nGeman et al. argue that the bias-variance dilemma implies that abilities such as generic object recognition cannot be learned from scratch, but require a certain degree of “hard wiring” that is later tuned by experience. This is because model-free approaches to inference require impractically large training sets if they are to avoid high variance.\n", "id": "40678189", "title": "Bias–variance tradeoff"}
{"url": "https://en.wikipedia.org/wiki?curid=405562", "text": "Solomonoff's theory of inductive inference\n\nRay Solomonoff's theory of universal inductive inference is a theory of prediction based on logical observations, such as predicting the next symbol based upon a given series of symbols. The only assumption that the theory makes is that the environment follows some unknown but computable probability distribution. It is a mathematical formalization of Occam's razor and the Principle of Multiple Explanations.\n\nPrediction is done using a completely Bayesian framework. The universal prior is calculated for all computable sequences—this is the universal a priori probability distribution;\nno computable hypothesis will have a zero probability. This means that Bayes rule of causation can be used in predicting the continuation of any particular computable sequence.\n\nThe theory is based in philosophical foundations, and was founded by Ray Solomonoff around 1960. It is a mathematically formalized combination of Occam's razor and the Principle of Multiple Explanations.\nAll computable theories which perfectly describe previous observations are used to calculate the probability of the next observation, with more weight put on the shorter computable theories. Marcus Hutter's universal artificial intelligence builds upon this to calculate the expected value of an action.\n\nThe proof of the \"razor\" is based on the known mathematical properties of a probability distribution over a countable set. These properties are relevant because the infinite set of all programs is a denumerable set. The sum S of the probabilities of all programs must be exactly equal to one (as per the definition of probability) thus the probabilities must roughly decrease as we enumerate the infinite set of all programs, otherwise S will be strictly greater than one. To be more precise, for every formula_1 > 0, there is some length \"l\" such that the probability of all programs longer than \"l\" is at most formula_1. This does not, however, preclude very long programs from having very high probability.\n\nFundamental ingredients of the theory are the concepts of algorithmic probability and Kolmogorov complexity. The universal prior probability of any prefix \"p\" of a computable sequence \"x\" is the sum of the probabilities of all programs (for a universal computer) that compute something starting with \"p\". Given some \"p\" and any computable but unknown probability distribution from which \"x\" is sampled, the universal prior and Bayes' theorem can be used to predict the yet unseen parts of \"x\" in optimal fashion.\n\nThough Solomonoff's inductive inference is not computable, several AIXI-derived algorithms approximate it in order to make it run on a modern computer. The more computing power they are given, the closer their predictions are to the predictions of inductive inference (their mathematical limit is Solomonoff's inductive inference).\n\nAnother direction of inductive inference is based on E. Mark Gold's model of learning in the limit from 1967 and has developed since then more and more models of learning. The general scenario is the following: Given a class \"S\" of computable functions, is there a learner (that is, recursive functional) which for any input of the form (\"f\"(0),\"f\"(1)...,\"f\"(\"n\")) outputs a hypothesis (an index \"e\" with respect to a previously agreed on acceptable numbering of all computable functions; the indexed function may be required consistent with the given values of \"f\"). A learner \"M\" learns a function \"f\" if almost all its hypotheses are the same index \"e\", which generates the function \"f\"; \"M\" learns \"S\" if \"M\" learns every \"f\" in \"S\". Basic results are that all recursively enumerable classes of functions are learnable while the class REC of all computable functions is not learnable. \n\nMany related models have been considered and also the learning of classes of recursively enumerable sets from positive data is a topic studied from Gold's pioneering paper in 1967 onwards. A far reaching extension of the Gold’s approach is developed by Schmidhuber's theory of generalized Kolmogorov complexities, which are kinds of super-recursive algorithms.\n\nThe third mathematically based direction of inductive inference makes use of the theory of automata and computation. In this context, the process of inductive inference is performed by an abstract automaton called an inductive Turing machine (Burgin, 2005).\n\"Inductive Turing machines\" represent the next step in the development of computer science providing better models for contemporary computers and computer networks (Burgin, 2001) and forming an important class of super-recursive algorithms as they satisfy all conditions in the definition of algorithm. Namely, each inductive Turing machines is a type of effective method in which a definite list of well-defined instructions for completing a task, when given an initial state, will proceed through a well-defined series of successive states, eventually terminating in an end-state. The difference between an inductive Turing machine and a Turing machine is that to produce the result a Turing machine has to stop, while in some cases an inductive Turing machine can do this without stopping. Stephen Kleene called procedures that could run forever without stopping by the name \"calculation procedure or algorithm\" (Kleene 1952:137). Kleene also demanded that such an algorithm must eventually exhibit \"some object\" (Kleene 1952:137). This condition is satisfied by inductive Turing machines, as their results are exhibited after a finite number of steps, but inductive Turing machines do not always tell at which step the result has been obtained.\n\nSimple inductive Turing machines are equivalent to other models of computation. More advanced inductive Turing machines are much more powerful. It is proved (Burgin, 2005) that limiting partial recursive functions, trial and error predicates, general Turing machines, and simple inductive Turing machines are equivalent models of computation. However, simple inductive Turing machines and general Turing machines give direct constructions of computing automata, which are thoroughly grounded in physical machines. In contrast, trial and error predicates, limiting recursive functions and limiting partial recursive functions present syntactic systems of symbols with formal rules for their manipulation. Simple inductive Turing machines and general Turing machines are related to limiting partial recursive functions and trial and error predicates as Turing machines are related to partial recursive functions and lambda-calculus.\n\nNote that only simple inductive Turing machines have the same structure (but different functioning semantics of the output mode) as Turing machines. Other types of inductive Turing machines have an essentially more advanced structure due to the structured memory and more powerful instructions. Their utilization for inference and learning allows achieving higher efficiency and better reflects learning of people (Burgin and Klinger, 2004).\n\nSome researchers confuse computations of inductive Turing machines with non-stopping computations or with infinite time computations. First, some of computations of inductive Turing machines halt. As in the case of conventional Turing machines, some halting computations give the result, while others do not give. Second, some non-stopping computations of inductive Turing machines give results, while others do not give. Rules of inductive Turing machines determine when a computation (stopping or non-stopping) gives a result. Namely, an inductive Turing machine produces output from time to time and once this output stops changing, it is considered the result of the computation. It is necessary to know that descriptions of this rule in some papers are incorrect. For instance, Davis (2006: 128) formulates the rule when result is obtained without stopping as \"… once the correct output has been produced any subsequent output will simply repeat this correct result.\" Third, in contrast to the widespread misconception, inductive Turing machines give results (when it happens) always after a finite number of steps (in finite time) in contrast to infinite and infinite-time computations.\nThere are two main distinctions between conventional Turing machines and simple inductive Turing machines. The first distinction is that even simple inductive Turing machines can do much more than conventional Turing machines. The second distinction is that a conventional Turing machine always informs (by halting or by coming to a final state) when the result is obtained, while a simple inductive Turing machine in some cases does inform about reaching the result, while in other cases (where the conventional Turing machine is helpless), it does not inform. People have an illusion that a computer always itself informs (by halting or by other means) when the result is obtained. In contrast to this, users themselves have to decide in many cases whether the computed result is what they need or it is necessary to continue computations. Indeed, everyday desktop computer applications like word processors and spreadsheets spend most of their time waiting in event loops, and do not terminate until directed to do so by users.\n\nEvolutionary approach to inductive inference is accomplished by another class of automata called evolutionary inductive Turing machines (Burgin and Eberbach, 2009; 2012). An ‘’’evolutionary inductive Turing machine’’’ is a (possibly infinite) sequence \"E\" = {\"A\"[\"t\"]; \"t\" = 1, 2, 3, ... } of inductive Turing machines \"A\"[\"t\"] each working on generations X[t] which are coded as words in the alphabet of the machines \"A\"[\"t\"]. The goal is to build a “population” \"Z\" satisfying the inference condition. The automaton \"A\"[\"t\"] called a component, or a level automaton, of E represents (encodes) a one-level evolutionary algorithm that works with input generations \"X\"[\"i\"] of the population by applying the variation operators v and selection operator s. The first generation \"X\"[0] is given as input to \"E\" and is processed by the automaton \"A\"[1], which generates/produces the first generation \"X\"[1] as its transfer output, which goes to the automaton \"A\"[2]. For all \"t\" = 1, 2, 3, ..., the automaton \"A\"[\"t\"] receives the generation \"X\"[\"t\" − 1] as its input from \"A\"[\"t\" − 1] and then applies the variation operator v and selection operator \"s\", producing the generation \"X\"[\"i\" + 1] and sending it to \"A\"[\"t\" + 1] to continue evolution.\n\n\n\n", "id": "405562", "title": "Solomonoff's theory of inductive inference"}
{"url": "https://en.wikipedia.org/wiki?curid=42579971", "text": "Inductive probability\n\nInductive probability attempts to give the probability of future events based on past events. It is the basis for inductive reasoning, and gives the mathematical basis for learning and the perception of patterns. It is a source of knowledge about the world.\n\nThere are three sources of knowledge: inference, communication, and deduction. Communication relays information found using other methods. Deduction establishes new facts based on existing facts. Only inference establishes new facts from data.\n\nThe basis of inference is Bayes' theorem. But this theorem is sometimes hard to apply and understand. The simpler method to understand inference is in terms of quantities of information.\n\nInformation describing the world is written in a language. For example, a simple mathematical language of propositions may be chosen. Sentences may be written down in this language as strings of characters. But in the computer it is possible to encode these sentences as strings of bits (1s and 0s). Then the language may be encoded so that the most commonly used sentences are the shortest. This internal language implicitly represents probabilities of statements.\n\nOccam's razor says the \"simplest theory, consistent with the data is most likely to be correct\". The \"simplest theory\" is interpreted as the representation of the theory written in this internal language. The theory with the shortest encoding in this internal language is most likely to be correct.\n\nProbability and statistics was focused on probability distributions and tests of significance. Probability was formal, well defined, but limited in scope. In particular its application was limited to situations that could be defined as an experiment or trial, with a well defined population.\n\nBayes's theorem is named after Rev. Thomas Bayes 1701–1761. Bayesian inference broadened the application of probability to many situations where a population was not well defined. But Bayes' theorem always depended on prior probabilities, to generate new probabilities. It was unclear where these prior probabilities should come from.\n\nRay Solomonoff developed algorithmic probability which gave an explanation for what randomness is and how patterns in the data may be represented by computer programs, that give shorter representations of the data circa 1964.\n\nChris Wallace and D. M. Boulton developed minimum message length circa 1968. Later Jorma Rissanen developed the minimum description length circa 1978. These methods allow information theory to be related to probability, in a way that can be compared to the application of Bayes' theorem, but which give a source and explanation for the role of prior probabilities.\n\nMarcus Hutter combined decision theory with the work of Ray Solomonoff and Andrey Kolmogorov to give a theory for the Pareto optimal behavior for an Intelligent agent, circa 1998.\n\nThe program with the shortest length that matches the data is the most likely to predict future data. This is the thesis behind the Minimum message length and Minimum description length methods.\n\nAt first sight Bayes' theorem appears different from the minimimum message/description length principle. At closer inspection it turns out to be the same. Bayes' theorem is about conditional probabilities. What is the probability that event \"B\" happens if firstly event \"A\" happens?\n\nBecomes in terms of message length \"L\",\n\nWhat this means is that in describing an event, if all the information is given describing the event then the length of the information may be used to give the raw probability of the event. So if the information describing the occurrence of \"A\" is given, along with the information describing \"B\" given \"A\", then all the information describing \"A\" and \"B\" has been given.\n\nOverfitting is where the model matches the random noise and not the pattern in the data. For example, take the situation where a curve is fitted to a set of points. If polynomial with many terms is fitted then it can more closely represent the data. Then the fit will be better, and the information needed to describe the deviances from the fitted curve will be smaller. Smaller information length means more probable.\n\nHowever the information needed to describe the curve must also be considered. The total information for a curve with many terms may be greater than for a curve with fewer terms, that has not as good a fit, but needs less information to describe the polynomial.\n\nSolomonoff's theory of inductive inference is also inductive inference. A bit string x is observed. Then consider all programs that generate strings starting with x. Cast in the form of inductive inference, the programs are theories that imply the observation of the bit string \"x\".\n\nThe method used here to give probabilities for inductive inference is based on Solomonoff's theory of inductive inference.\n\nIf all the bits are 1, then people infer that there is a bias in the coin and that it is more likely also that the next bit is 1 also. This is described as learning from, or detecting a pattern in the data.\n\nSuch a pattern may be represented by a computer program. A short computer program may be written that produces a series of bits which are all 1. If the length of the program \"K\" is formula_3 bits then its prior probability is,\n\nThe length of the shortest program that represents the string of bits is called the Kolmogorov complexity.\n\nKolmogorov complexity is not computable. This is related to the halting problem. When searching for the shortest program some programs may go into an infinite loop.\n\nThe Greek philosopher Epicurus is quoted as saying \"If more than one theory is consistent with the observations, keep all theories\".\n\nAs in a crime novel all theories must be considered in determining the likely murderer, so with inductive probability all programs must be considered in determining the likely future bits arising from the stream of bits.\n\nPrograms that are already longer than \"n\" have no predictive power. The raw (or prior) probability that the pattern of bits is random (has no pattern) is formula_5.\n\nEach program that produces the sequence of bits, but is shorter than the \"n\" is a theory/pattern about the bits with a probability of formula_6 where \"k\" is the length of the program.\n\nThe probability of receiving a sequence of bits \"y\" after receiving a series of bits \"x\" is then the conditional probability of receiving \"y\" given \"x\", which is the probability of \"x\" with \"y\" appended, divided by the probability of \"x\".\n\nThe programming language affects the predictions of the next bit in the string. The language acts as a prior probability. This is particularly a problem where the programming language codes for numbers and other data types. Intuitively we think that 0 and 1 are simple numbers, and that prime numbers are somehow more complex the numbers may be factorized.\n\nUsing the Kolmogorov complexity gives an unbiased estimate (a universal prior) of the prior probability of a number. As a thought experiment an intelligent agent may be fitted with a data input device giving a series of numbers, after applying some transformation function to the raw numbers. Another agent might have the same input device with a different transformation function. The agents do not see or know about these transformation functions. Then there appears no rational basis for preferring one function over another. A universal prior insures that although two agents may have different initial probability distributions for the data input, the difference will be bounded by a constant.\n\nSo universal priors do not eliminate an initial bias, but they reduce and limit it. Whenever we describe an event in a language, either using a natural language or other, the language has encoded in it our prior expectations. So some reliance on prior probabilities are inevitable.\n\nA problem arises where an intelligent agent's prior expectations interact with the environment to form a self reinforcing feed back loop. This is the problem of bias or prejudice. Universal priors reduce but do not eliminate this problem.\n\nThe theory of universal artificial intelligence applies decision theory to inductive probabilities. The theory shows how the best actions to optimize a reward function may be chosen. The result is a theoretical model of intelligence.\n\nIt is a fundamental theory of intelligence, which optimizes the agents behavior in,\n\nIn general no agent will always provide the best actions in all situations. A particular choice made by an agent may be wrong, and the environment may provide no way for the agent to recover from an initial bad choice. However the agent is Pareto optimal in the sense that no other agent will do better than this agent in this environment, without doing worse in another environment. No other agent may, in this sense, be said to be better.\n\nAt present the theory is limited by incomputability (the halting problem). Approximations may be used to avoid this. Processing speed and combinatorial explosion remain the primary limiting factors for artificial intelligence.\n\nProbability is the representation of uncertain or partial knowledge about the truth of statements. Probabilities are subjective and personal estimates of likely outcomes based on past experience and inferences made from the data.\n\nThis description of probability may seem strange at first. In natural language we refer to \"the probability\" that the sun will rise tomorrow. We do not refer to \"your probability\" that the sun will rise. But in order for inference to be correctly modeled probability must be personal, and the act of inference generates new posterior probabilities from prior probabilities.\n\nProbabilities are personal because they are conditional on the knowledge of the individual. Probabilities are subjective because they always depend, to some extent, on prior probabilities assigned by the individual. Subjective should not be taken here to mean vague or undefined.\n\nThe term intelligent agent is used to refer to the holder of the probabilities. The intelligent agent may be a human or a machine. If the intelligent agent does not interact with the environment then the probability will converge over time to the frequency of the event.\n\nIf however the agent uses the probability to interact with the environment there may be a feedback, so that two agents in the identical environment starting with only slightly different priors, end up with completely different probabilities. In this case optimal decision theory as in Marcus Hutter's Universal Artificial Intelligence will give Pareto optimal performance for the agent. This means that no other intelligent agent could do better in one environment without doing worse in another environment.\n\nIn deductive probability theories, probabilities are absolutes, independent of the individual making the assessment. But deductive probabilities are based on,\n\nFor example, in a trial the participants are aware the outcome of all the previous history of trials. They also assume that each outcome is equally probable. Together this allows a single unconditional value of probability to be defined.\n\nBut in reality each individual does not have the same information. And in general the probability of each outcome is not equal. The dice may be loaded, and this loading needs to be inferred from the data.\n\nThe principle of indifference has played a key role in probability theory. It says that if N statements are symmetric so that one condition cannot be preferred over another then all statements are equally probable.\n\nTaken seriously, in evaluating probability this principle leads to contradictions. Suppose there are 3 bags of gold in the distance and one is asked to select one. Then because of the distance one cannot see the bag sizes. You estimate using the principle of indifference that each bag has equal amounts of gold, and each bag has one third of the gold.\n\nNow, while one of us is not looking, the other takes one of the bags and divide it into 3 bags. Now there are 5 bags of gold. The principle of indifference now says each bag has one fifth of the gold. A bag that was estimated to have one third of the gold is now estimated to have one fifth of the gold.\n\nTaken as a value associated with the bag the values are different therefore contradictory. But taken as an estimate given under a particular scenario, both values are separate estimates given under different circumstances and there is no reason to believe they are equal.\n\nEstimates of prior probabilities are particularly suspect. Estimates will be constructed that do not follow any consistent frequency distribution. For this reason prior probabilities are considered as estimates of probabilities rather than probabilities.\n\nA full theoretical treatment would associate with each probability,\n\nInductive probability combines two different approaches to probability.\n\nEach approach gives a slightly different viewpoint. Information theory is used in relating probabilities to quantities of information. This approach is often used in giving estimates of prior probabilities.\n\nFrequentist probability defines probabilities as objective statements about how often an event occurs. This approach may be stretched by defining the trials to be over possible worlds. Statements about possible worlds define events.\n\nWhereas logic represents only two values; true and false as the values of statement, probability associates a number in [0,1] to each statement. If the probability of a statement is 0, the statement is false. If the probability of a statement is 1 the statement is true.\n\nIn considering some data as a string of bits the prior probabilities for a sequence of 1s and 0s, the probability of 1 and 0 is equal. Therefore, each extra bit halves the probability of a sequence of bits.\nThis leads to the conclusion that,\nWhere formula_8 is the probability of the string of bits formula_9 and formula_10 is its length.\n\nThe prior probability of any statement is calculated from the number of bits needed to state it. See also information theory.\n\nTwo statements formula_11 and formula_12 may be represented by two separate encodings. Then the length of the encoding is,\n\nor in terms of probability,\n\nBut this law is not always true because there may be a shorter method of encoding formula_12 if we assume formula_11. So the above probability law applies only if formula_11 and formula_12 are \"independent\".\n\nThe primary use of the information approach to probability is to provide estimates of the complexity of statements. Recall that Occam's razor states that \"All things being equal, the simplest theory is the most likely to be correct\". In order to apply this rule, first there needs to be a definition of what \"simplest\" means. Information theory defines simplest to mean having the shortest encoding.\n\nKnowledge is represented as statements. Each statement is a Boolean expression. Expressions are encoded by a function that takes a description (as against the value) of the expression and encodes it as a bit string.\n\nThe length of the encoding of a statement gives an estimate of the probability of a statement. This probability estimate will often be used as the prior probability of a statement.\n\nTechnically this estimate is not a probability because it is not constructed from a frequency distribution. The probability estimates given by it do not always obey the law of total of probability. Applying the law of total probability to various scenarios will usually give a more accurate probability estimate of the prior probability than the estimate from the length of the statement.\n\nAn expression is constructed from sub expressions,\n\nA Huffman code must distinguish the 3 cases. The length of each code is based on the frequency of each type of sub expressions.\n\nInitially constants are all assigned the same length/probability. Later constants may be assigned a probability using the Huffman code based on the number of uses of the function id in all expressions recorded so far. In using a Huffman code the goal is to estimate probabilities, not to compress the data.\n\nThe length of a function application is the length of the function identifier constant plus the sum of the sizes of the expressions for each parameter.\n\nThe length of a quantifier is the length of the expression being quantified over.\n\nNo explicit representation of natural numbers is given. However natural numbers may be constructed by applying the successor function to 0, and then applying other arithmetic functions. A distribution of natural numbers is implied by this, based on the complexity of constructing each number.\n\nRational numbers are constructed by the division of natural numbers. The simplest representation has no common factors between the numerator and the denominator. This allows the probability distribution of natural numbers may be extended to rational numbers.\n\nThe probability of an event may be interpreted as the frequencies of outcomes where the statement is true divided by the total number of outcomes. If the outcomes form a continuum the frequency may need to be replaced with a measure.\n\nEvents are sets of outcomes. Statements may be related to events. A Boolean statement B about outcomes defines a set of outcomes b,\n\nEach probability is always associated with the state of knowledge at a particular point in the argument. Probabilities before an inference are known as prior probabilities, and probabilities after are known as posterior probabilities.\n\nProbability depends on the facts known. The truth of a fact limits the domain of outcomes to the outcomes consistent with the fact. Prior probabilities are the probabilities before a fact is known. Posterior probabilities are after a fact is known. The posterior probabilities are said to be conditional on the fact. the probability that formula_12 is true given that formula_11 is true is written as: formula_22\n\nAll probabilities are in some sense conditional. The prior probability of formula_12 is,\n\nIn the frequentist approach, probabilities are defined as the ratio of the number of outcomes within an event to the total number of outcomes. In the possible world model each possible world is an outcome, and statements about possible worlds define events. The probability of a statement being true is the number of possible worlds divided by the total number of worlds. The probability of a statement formula_11 being true about possible worlds is then,\n\nFor a conditional probability.\n\nthen\n\nUsing symmetry this equation may be written out as Bayes' law.\n\nThis law describes the relationship between prior and posterior probabilities when new facts are learnt.\n\nWritten as quantities of information Bayes' Theorem becomes,\n\nTwo statements A and B are said to be independent if knowing the truth of A does not change the probability of B. Mathematically this is,\n\nthen Bayes' Theorem reduces to,\n\nFor a set of mutually exclusive possibilities formula_33, the sum of the posterior probabilities must be 1.\n\nSubstituting using Bayes' theorem gives the law of total probability\n\nThis result is used to give the extended form of Bayes' theorem,\n\nThis is the usual form of Bayes' theorem used in practice, because it guarantees the sum of all the posterior probabilities for formula_33 is 1.\n\nFor mutually exclusive possibilities, the probabilities add.\n\nUsing\nThen the alternatives\nare all mutually exclusive. Also,\n\nso, putting it all together,\n\nAs,\nthen\n\nImplication is related to conditional probability by the following equation,\n\nDerivation,\n\nBayes' theorem may be used to estimate the probability of a hypothesis or theory H, given some facts F. The posterior probability of H is then\n\nor in terms of information,\n\nBy assuming the hypothesis is true, a simpler representation of the statement F may be given. The length of the encoding of this simpler representation is formula_52\n\nformula_53 represents the amount of information needed to represent the facts F, if H is true. formula_54 is the amount of information needed to represent F without the hypothesis H. The difference is how much the representation of the facts has been compressed by assuming that H is true. This is the evidence that the hypothesis H is true.\n\nIf formula_54 is estimated from encoding length then the probability obtained will not be between 0 and 1. The value obtained is proportional to the probability, without being a good probability estimate. The number obtained is sometimes referred to as a relative probability, being how much more probable the theory is than not holding the theory.\n\nIf a full set of mutually exclusive hypothesis that provide evidence is known, a proper estimate may be given for the prior probability formula_56.\n\nProbabilities may be calculated from the extended form of Bayes' theorem. Given all mutually exclusive hypothesis formula_57 which give evidence, such that,\n\nand also the hypothesis R, that none of the hypothesis is true, then,\n\nIn terms of information,\n\nIn most situations it is a good approximation to assume that formula_61 is independent of formula_62, which means formula_63 giving,\n\nAbductive inference starts with a set of facts \"F\" which is a statement (Boolean expression). Abductive reasoning is of the form,\n\nThe theory \"T\", also called an explanation of the condition \"F\", is an answer to the ubiquitous factual \"why\" question. For example, for the condition \"F\" is \"Why do apples fall?\". The answer is a theory \"T\" that implies that apples fall;\n\nInductive inference is of the form,\n\nIn terms of abductive inference, \"all objects in a class C or set have a property P\" is a theory that implies the observed condition, \"All observed objects in a class C have a property P\".\n\nSo inductive inference is a special case of abductive inference. In common usage the term inductive inference is often used to refer to both abductive and inductive inference.\n\nInductive inference is related to generalization. Generalizations may be formed from statements by replacing a specific value with membership of a category, or by replacing membership of a category with membership of a broader category. In deductive logic, generalization is a powerful method of generating new theories that may be true. In inductive inference generalization generates theories that have a probability of being true.\n\nThe opposite of generalization is specialization. Specialization is used in applying a general rule to a specific case. Specializations are created from generalizations by replacing membership of a category by a specific value, or by replacing a category with a sub category.\n\nThe Linnaen classification of living things and objects forms the basis for generalization and specification. The ability to identify, recognize and classify is the basis for generalization. Perceiving the world as a collection of objects appears to be a key aspect of human intelligence. It is the object oriented model, in the non computer science sense.\n\nThe object oriented model is constructed from our perception. In particularly vision is based on the ability to compare two images and calculate how much information is needed to morph or map one image into another. Computer vision uses this mapping to construct 3D images from stereo image pairs.\n\nInductive logic programming is a means of constructing theory that implies a condition. Plotkin's \"\"relative least general generalization (rlgg)\"\" approach constructs the simplest generalization consistent with the condition.\n\nIsaac Newton used inductive arguments in constructing his law of universal gravitation. Starting with the statement,\n\nGeneralizing by replacing apple for object, and earth for object gives, in a two body system,\n\nThe theory explains all objects falling, so there is strong evidence for it. The second observation,\n\nAfter some complicated mathematical calculus, it can be seen that if the acceleration follows the inverse square law then objects will follow an ellipse. So induction gives evidence for the inverse square law.\n\nUsing Galileo's observation that all objects drop with the same speed,\n\nwhere formula_68 and formula_69 vectors towards the center of the other object. Then using Newton's third law formula_70\n\nImplication determines condition probability as,\n\nSo,\n\nThis result may be used in the probabilities given for Bayesian hypothesis testing. For a single theory, H = T and,\n\nor in terms of information, the relative probability is,\n\nNote that this estimate for P(T|F) is not a true probability. If formula_77 then the theory has evidence to support it. Then for a set of theories formula_78, such that formula_77,\n\ngiving,\n\nMake a list of all the shortest programs formula_84 that each produce a distinct infinite string of bits, and satisfy the relation,\n\nwhere formula_86 is the result of running the program formula_84 and formula_88 truncates the string after \"n\" bits.\n\nThe problem is to calculate the probability that the source is produced by program formula_89 given that the truncated source after n bits is \"x\". This is represented by the conditional probability,\n\nUsing the extended form of Bayes' theorem\n\nThe extended form relies on the law of total probability. This means that the formula_92 must be distinct possibilities, which is given by the condition that each formula_84 produce a different infinite string. Also one of the conditions formula_92 must be true. This must be true, as in the limit as formula_95 there is always at least one program that produces formula_96.\n\nAs formula_84 are chosen so that formula_98 then,\n\nThe apriori probability of the string being produced from the program, given no information about the string, is based on the size of the program,\n\ngiving,\n\nPrograms that are the same or longer than the length of \"x\" provide no predictive power. Separate them out giving,\n\nThen identify the two probabilities as,\n\nBut the prior probability that \"x\" is a random set of bits is formula_5. So,\n\nThe probability that the source is random, or unpredictable is,\n\nA model of how worlds are constructed is used in determining the probabilities of theories,\n\nIf \"w\" is the bit string then the world is created such that formula_108 is true. An intelligent agent has some facts about the word, represented by the bit string \"c\", which gives the condition,\n\nThe set of bit strings identical with any condition \"x\" is formula_110.\n\nA theory is a simpler condition that explains (or implies) \"C\". The set of all such theories is called \"T\",\n\nextended form of Bayes' theorem may be applied\nwhere,\n\nTo apply Bayes' theorem the following must hold: formula_33 is a partition of the event space.\n\nFor formula_117 to be a partition, no bit string \"n\" may belong to two theories. To prove this assume they can and derive a contradiction,\n\nSecondly prove that \"T\" includes all outcomes consistent with the condition. As all theories consistent with \"C\" are included then formula_108 must be in this set.\n\nSo Bayes theorem may be applied as specified giving,\n\nUsing the implication and condition probability law, the definition of formula_117 implies,\n\nThe probability of each theory in \"T\" is given by,\n\nso,\n\nFinally the probabilities of the events may be identified with the probabilities of the condition which the outcomes in the event satisfy,\n\ngiving\n\nThis is the probability of the theory \"t\" after observing that the condition \"C\" holds.\n\nTheories that are less probable than the condition \"C\" have no predictive power. Separate them out giving,\n\nThe probability of the theories without predictive power on \"C\" is the same as the probability of \"C\". So,\n\nSo the probability \n\nand the probability of no prediction for C, written as formula_132,\n\nThe probability of a condition was given as,\n\nBit strings for theories that are more complex than the bit string given to the agent as input have no predictive power. There probabilities are better included in the \"random\" case. To implement this a new definition is given as \"F\" in,\n\nUsing \"F\", an improved version of the abductive probabilities is,\n\n\n\n", "id": "42579971", "title": "Inductive probability"}
{"url": "https://en.wikipedia.org/wiki?curid=37787103", "text": "Universal portfolio algorithm\n\nThe universal portfolio algorithm is a portfolio selection algorithm from the field of machine learning and information theory. The algorithm learns adaptively from historical data and maximizes the log-optimal growth rate in the long run. It was introduced by the late Stanford University information theorist Thomas M. Cover.\n\nThe algorithm rebalances the portfolio at the beginning of each trading period. At the beginning of the first trading period it starts with a naive diversification. In the following trading periods the portfolio composition depends on the historical total return of all possible constant-rebalanced portfolios.\n", "id": "37787103", "title": "Universal portfolio algorithm"}
{"url": "https://en.wikipedia.org/wiki?curid=41370976", "text": "Kernel embedding of distributions\n\nIn machine learning, the kernel embedding of distributions (also called the kernel mean or mean map) comprises a class of nonparametric methods in which a probability distribution is represented as an element of a reproducing kernel Hilbert space (RKHS). A generalization of the individual data-point feature mapping done in classical kernel methods, the embedding of distributions into infinite-dimensional feature spaces can preserve all of the statistical features of arbitrary distributions, while allowing one to compare and manipulate distributions using Hilbert space operations such as inner products, distances, projections, linear transformations, and spectral analysis. This learning framework is very general and can be applied to distributions over any space formula_1 on which a sensible kernel function (measuring similarity between elements of formula_1) may be defined. For example, various kernels have been proposed for learning from data which are: vectors in formula_3, discrete classes/categories, strings, graphs/networks, images, time series, manifolds, dynamical systems, and other structured objects. The theory behind kernel embeddings of distributions has been primarily developed by Alex Smola, Le Song , Arthur Gretton, and Bernhard Schölkopf. A review of recent works on kernel embedding of distributions can be found in .\n\nThe analysis of distributions is fundamental in machine learning and statistics, and many algorithms in these fields rely on information theoretic approaches such as entropy, mutual information, or Kullback–Leibler divergence. However, to estimate these quantities, one must first either perform density estimation, or employ sophisticated space-partitioning/bias-correction strategies which are typically infeasible for high-dimensional data. Commonly, methods for modeling complex distributions rely on parametric assumptions that may be unfounded or computationally challenging (e.g. Gaussian mixture models), while nonparametric methods like kernel density estimation (Note: the smoothing kernels in this context have a different interpretation than the kernels discussed here) or characteristic function representation (via the Fourier transform of the distribution) break down in high-dimensional settings.\n\nMethods based on the kernel embedding of distributions sidestep these problems and also possess the following advantages: \nThus, learning via the kernel embedding of distributions offers a principled drop-in replacement for information theoretic approaches and is a framework which not only subsumes many popular methods in machine learning and statistics as special cases, but also can lead to entirely new learning algorithms.\n\nLet formula_4 denote a random variable with codomain formula_5 and distribution formula_6. Given a kernel formula_7 on formula_8, the Moore-Aronszajn Theorem asserts the existence of a RKHS formula_9 (a Hilbert space of functions formula_10 equipped with inner products formula_11 and norms formula_12) in which the element formula_13 satisfies the reproducing property formula_14. One may alternatively consider formula_15 an implicit feature mapping formula_16 from formula_5 to formula_9 (which is therefore also called the feature space), so that formula_19 can be viewed as a measure of similarity between points formula_20. While the similarity measure is linear in the feature space, it may be highly nonlinear in the original space depending on the choice of kernel.\n\nThe kernel embedding of the distribution formula_6 in formula_9 (also called the kernel mean or mean map) is given by:\n\nIf formula_24 allows a square integrable density formula_25, then formula_26, where formula_27 is the Hilbert–Schmidt integral operator. A kernel is \"characteristic\" if the mean embedding formula_28 is injective. Each distribution can thus be uniquely represented in the RKHS and all statistical features of distributions are preserved by the kernel embedding if a characteristic kernel is used.\n\nGiven formula_29 training examples formula_30 drawn independently and identically distributed (i.i.d.) from formula_31, the kernel embedding of formula_31 can be empirically estimated as\n\nIf formula_34 denotes another random variable (for simplicity, assume the co-domain of formula_34 is also formula_5 with the same kernel formula_7 which satisfies formula_38), then the joint distribution formula_39 can be mapped into a tensor product feature space formula_40 via \n\nBy the equivalence between a tensor and a linear map, this joint embedding may be interpreted as an uncentered cross-covariance operator formula_42 from which the cross-covariance of mean-zero functions formula_43 can be computed as \n\nGiven formula_29 pairs of training examples formula_46 drawn i.i.d. from formula_31, we can also empirically estimate the joint distribution kernel embedding via\n\nGiven a conditional distribution formula_49, one can define the corresponding RKHS embedding as \nNote that the embedding of formula_49 thus defines a family of points in the RKHS indexed by the values formula_52 taken by conditioning variable formula_53. By fixing formula_54 to a particular value, we obtain a single element in formula_55, and thus it is natural to define the operator\nwhich given the feature mapping of formula_58 outputs the conditional embedding of formula_59 given formula_60. Assuming that for all formula_61, it can be shown that \nThis assumption is always true for finite domains with characteristic kernels, but may not necessarily hold for continuous domains. Nevertheless, even in cases where the assumption fails, formula_63 may still be used to approximate the conditional kernel embedding formula_64, and in practice, the inversion operator is replaced with a regularized version of itself formula_65 (where formula_66 denotes the identity matrix).\n\nGiven training examples formula_67, the empirical kernel conditional embedding operator may be estimated as \nwhere formula_69 are implicitly formed feature matrices, formula_70 is the Gram matrix for samples of formula_54, and formula_72 is a regularization parameter needed to avoid overfitting.\n\nThus, the empirical estimate of the kernel conditional embedding is given by a weighted sum of samples of formula_59 in the feature space:\n\n\n\n\non compact subsets of formula_108 is universal.\n\nand support of formula_112 is an entire space, then formula_104 is universal. For example, Gaussian RBF is universal, sinc kernel is not universal.\n\n\n\nThis section illustrates how basic probabilistic rules may be reformulated as (multi)linear algebraic operations in the kernel embedding framework and is primarily based on the work of Song et al. The following notation is adopted: \n\nIn practice, all embeddings are empirically estimated from data formula_133 and it assumed that a set of samples formula_134 may be used to estimate the kernel embedding of the prior distribution formula_135.\n\nIn probability theory, the marginal distribution of formula_4 can be computed by integrating out formula_34 from the joint density (including the prior distribution on formula_34)\nThe analog of this rule in the kernel embedding framework states that formula_140, the RKHS embedding of formula_141, can be computed via\nIn practical implementations, the kernel sum rule takes the following form\nwhere formula_146 is the empirical kernel embedding of the prior distribution, formula_147, formula_148, and formula_149 are Gram matrices with entries formula_150 respectively.\n\nIn probability theory, a joint distribution can be factorized into a product between conditional and marginal distributions \nThe analog of this rule in the kernel embedding framework states that formula_152, the joint embedding of formula_153, can be factorized as a composition of conditional embedding operator with the auto-covariance operator associated with formula_135\nIn practical implementations, the kernel chain rule takes the following form\n\nIn probability theory, a posterior distribution can be expressed in terms of a prior distribution and a likelihood function as \nThe analog of this rule in the kernel embedding framework expresses the kernel embedding of the conditional distribution in terms of conditional embedding operators which are modified by the prior distribution\nIn practical implementations, the kernel Bayes' rule takes the following form\nwhere formula_164.\nTwo regularization parameters are used in this framework: formula_165 for the estimation of formula_166 and formula_167 for the estimation of the final conditional embedding operator formula_168. The latter regularization is done on square of formula_169 because formula_170 may not be positive definite.\n\nThe maximum mean discrepancy (MMD) is a distance-measure between distributions formula_171 and formula_172 which is defined as the squared distance between their embeddings in the RKHS \nWhile most distance-measures between distributions such as the widely used Kullback–Leibler divergence either require density estimation (either parametrically or nonparametrically) or space partitioning/bias correction strategies, the MMD is easily estimated as an empirical mean which is concentrated around the true value of the MMD. The characterization of this distance as the \"maximum mean discrepancy\" refers to the fact that computing the MMD is equivalent to finding the RKHS function that maximizes the difference in expectations between the two probability distributions \n\nGiven \"n\" training examples from formula_171 and \"m\" samples from formula_172, one can formulate a test statistic based on the empirical estimate of the MMD\nto obtain a two-sample test of the null hypothesis that both samples stem from the same distribution (i.e. formula_178) against the broad alternative formula_179.\n\nAlthough learning algorithms in the kernel embedding framework circumvent the need for intermediate density estimation, one may nonetheless use the empirical embedding to perform density estimation based on \"n\" samples drawn from an underlying distribution formula_180. This can be done by solving the following optimization problem \nwhere the maximization is done over the entire space of distributions on formula_5. Here, formula_184 is the kernel embedding of the proposed density formula_185 and formula_186 is an entropy-like quantity (e.g. Entropy, KL divergence, Bregman divergence). The distribution which solves this optimization may be interpreted as a compromise between fitting the empirical kernel means of the samples well, while still allocating a substantial portion of the probability mass to all regions of the probability space (much of which may not be represented in the training examples). In practice, a good approximate solution of the difficult optimization may be found by restricting the space of candidate densities to a mixture of \"M\" candidate distributions with regularized mixing proportions. Connections between the ideas underlying Gaussian processes and conditional random fields may be drawn with the estimation of conditional probability distributions in this fashion, if one views the feature mappings associated with the kernel as sufficient statistics in generalized (possibly infinite-dimensional) exponential families.\n\nA measure of the statistical dependence between random variables formula_4 and formula_34 (from any domains on which sensible kernels can be defined) can be formulated based on the Hilbert–Schmidt Independence Criterion \nand can be used as a principled replacement for mutual information, Pearson correlation or any other dependence measure used in learning algorithms. Most notably, HSIC can detect arbitrary dependencies (when a characteristic kernel is used in the embeddings, HSIC is zero if and only if the variables are independent), and can be used to measure dependence between different types of data (e.g. images and text captions). Given \"n\" i.i.d. samples of each random variable, a simple parameter-free unbiased estimator of HSIC which exhibits concentration about the true value can be computed in formula_190 time, where the Gram matrices of the two datasets are approximated using formula_191 with formula_192. The desirable properties of HSIC have led to the formulation of numerous algorithms which utilize this dependence measure for a variety of common machine learning tasks such as: feature selection (BAHSIC ), clustering (CLUHSIC ), and dimensionality reduction (MUHSIC ).\n\nHSIC can be extended to measure the dependence of multiple random variables. The question of when HSIC captures independence in this case has recently been studied : for \nmore than two variables\n\nBelief propagation is a fundamental algorithm for inference in graphical models in which nodes repeatedly pass and receive messages corresponding to the evaluation of conditional expectations. In the kernel embedding framework, the messages may be represented as RKHS functions and the conditional distribution embeddings can be applied to efficiently compute message updates. Given \"n\" samples of random variables represented by nodes in a Markov Random Field, the incoming message to node \"t\" from node \"u\" can be expressed as formula_194 if it assumed to lie in the RKHS. The kernel belief propagation update message from \"t\" to node \"s\" is then given by \nwhere formula_196 denotes the element-wise vector product, formula_197 is the set of nodes connected to \"t\" excluding node \"s\", formula_198, formula_199 are the Gram matrices of the samples from variables formula_200, respectively, and formula_201 is the feature matrix for the samples from formula_202.\n\nThus, if the incoming messages to node \"t\" are linear combinations of feature mapped samples from formula_203, then the outgoing message from this node is also a linear combination of feature mapped samples from formula_204. This RKHS function representation of message-passing updates therefore produces an efficient belief propagation algorithm in which the potentials are nonparametric functions inferred from the data so that arbitrary statistical relationships may be modeled.\n\nIn the hidden Markov model (HMM), two key quantities of interest are the transition probabilities between hidden states formula_205 and the emission probabilities formula_206 for observations. Using the kernel conditional distribution embedding framework, these quantities may be expressed in terms of samples from the HMM. A serious limitation of the embedding methods in this domain is the need for training samples containing hidden states, as otherwise inference with arbitrary distributions in the HMM is not possible.\n\nOne common use of HMMs is filtering in which the goal is to estimate posterior distribution over the hidden state formula_207 at time step \"t\" given a history of previous observations formula_208 from the system. In filtering, a belief state formula_209 is recursively maintained via a prediction step (where updates formula_210 are computed by marginalizing out the previous hidden state) followed by a conditioning step (where updates formula_211 are computed by applying Bayes' rule to condition on a new observation). The RKHS embedding of the belief state at time \"t+1\" can be recursively expressed as \nby computing the embeddings of the prediction step via the kernel sum rule and the embedding of the conditioning step via kernel Bayes' rule. Assuming a training sample formula_213 is given, one can in practice estimate formula_214 and filtering with kernel embeddings is thus implemented recursively using the following updates for the weights formula_215 \nwhere formula_218 denote the Gram matrices of formula_219 and formula_220 respectively, formula_221 is a transfer Gram matrix defined as formula_222, and formula_223.\n\nThe support measure machine (SMM) is a generalization of the support vector machine (SVM) in which the training examples are probability distributions paired with labels formula_224. \nSMMs solve the standard SVM dual optimization problem using the following expected kernel\nwhich is computable in closed form for many common specific distributions formula_226 (such as the Gaussian distribution) combined with popular embedding kernels formula_104 (e.g. the Gaussian kernel or polynomial kernel), or can be accurately empirically estimated from i.i.d. samples formula_228 via\nUnder certain choices of the embedding kernel formula_104, the SMM applied to training examples formula_231 is equivalent to a SVM trained on samples formula_232, and thus the SMM can be viewed as a \"flexible\" SVM in which a different data-dependent kernel (specified by the assumed form of the distribution formula_226) may be placed on each training point.\n\nThe goal of domain adaptation is the formulation of learning algorithms which generalize well when the training and test data have different distributions. Given training examples formula_234 and a test set formula_235 where the formula_236 are unknown, three types of differences are commonly assumed between the distribution of the training examples formula_237 and the test distribution formula_238:\n\nBy utilizing the kernel embedding of marginal and conditional distributions, practical approaches to deal with the presence of these types of differences between training and test domains can be formulated. Covariate shift may be accounted for by reweighting examples via estimates of the ratio formula_245 obtained directly from the kernel embeddings of the marginal distributions of formula_54 in each domain without any need for explicit estimation of the distributions. Target shift, which cannot be similarly dealt with since no samples from formula_59 are available in the test domain, is accounted for by weighting training examples using the vector formula_248 which solves the following optimization problem (where in practice, empirical approximations must be used) \n\nTo deal with location scale conditional shift, one can perform a LS transformation of the training points to obtain new transformed training data formula_251 (where formula_252 denotes the element-wise vector product). To ensure similar distributions between the new transformed training samples and the test data, formula_253 are estimated by minimizing the following empirical kernel embedding distance \nIn general, the kernel embedding methods for dealing with LS conditional shift and target shift may be combined to find a reweighted transformation of the training data which mimics the test distribution, and these methods may perform well even in the presence of conditional shifts other than location-scale changes.\n\nGiven \"N\" sets of training examples sampled i.i.d. from distributions formula_255, the goal of domain generalization is to formulate learning algorithms which perform well on test examples sampled from a previously unseen domain formula_256 where no data from the test domain is available at training time. If conditional distributions formula_257 are assumed to be relatively similar across all domains, then a learner capable of domain generalization must estimate a functional relationship between the variables which is robust to changes in the marginals formula_171. Based on kernel embeddings of these distributions, Domain Invariant Component Analysis (DICA) is a method which determines the transformation of the training data that minimizes the difference between marginal distributions while preserving a common conditional distribution shared between all training domains. DICA thus extracts \"invariants\", features that transfer across domains, and may be viewed as a generalization of many popular dimension-reduction methods such as kernel principal component analysis, transfer component analysis, and covariance operator inverse regression. \nDefining a probability distribution formula_259 on the RKHS formula_55 with formula_261, DICA measures dissimilarity between domains via distributional variance which is computed as \nso formula_264 is a formula_265 Gram matrix over the distributions from which the training data are sampled. Finding an orthogonal transform onto a low-dimensional subspace \"B\" (in the feature space) which minimizes the distributional variance, DICA simultaneously ensures that \"B\" aligns with the bases of a central subspace \"C\" for which formula_59 becomes independent of formula_54 given formula_268 across all domains. In the absence of target values formula_59, an unsupervised version of DICA may be formulated which finds a low-dimensional subspace that minimizes distributional variance while simultaneously maximizing the variance of formula_54 (in the feature space) across all domains (rather than preserving a central subspace).\n\nIn distribution regression, the goal is to regress from probability distributions to reals (or vectors). Many important machine learning and statistical tasks fit into this framework, including multi-instance learning, and point estimation problems without analytical solution (such as hyperparameter or entropy estimation). In practice only samples from sampled distributions are observable, and the estimates have to rely on similarities computed between \"sets of points\". Distribution regression has been successfully applied for example in supervised entropy learning, and aerosol prediction using multispectral satellite images.\n\nGiven formula_271 training data, where the formula_272 bag contains samples from a probability distribution formula_273 and the formula_274 output label is formula_275, one can tackle the distribution regression task by taking the embeddings of the distributions, and learning the regressor from the embeddings to the outputs. In other words, one can consider the following kernel ridge regression problem formula_276\nwhere formula_278 with a formula_104 kernel on the domain of formula_273-s formula_281, formula_282 is a kernel on the embedded distributions, and formula_283 is the RKHS determined by formula_282. Examples for formula_282 include the linear kernel formula_286, the Gaussian kernel formula_287, the exponential kernel formula_288, the Cauchy kernel formula_289, the generalized t-student kernel formula_290, or the inverse multiquadrics kernel formula_291.\n\nThe prediction on a new distribution formula_292 takes the simple, analytical form\nwhere formula_294, formula_295, formula_296, formula_297. Under mild regularity conditions this estimator can be shown to be consistent and it can achieve the one-stage sampled (as if one had access to the true formula_273-s) minimax optimal rate. In the formula_299 objective function formula_300-s are real numbers; the results can also be extended to the case when formula_300-s are formula_302-dimensional vectors, or more generally elements of a separable Hilbert space using operator-valued formula_282 kernels.\n\nIn this simple example, which is taken from Song et al., formula_304 are assumed to be discrete random variables which take values in the set formula_305 and the kernel is chosen to be the Kronecker delta function, so formula_306. The feature map corresponding to this kernel is the standard basis vector formula_307. The kernel embeddings of such a distributions are thus vectors of marginal probabilities while the embeddings of joint distributions in this setting are formula_308 matrices specifying joint probability tables, and the explicit form of these embeddings is\n\nThe conditional distribution embedding operator formula_311 is in this setting a conditional probability table\nThus, the embeddings of the conditional distribution under a fixed value of formula_54 may be computed as\n\nIn this discrete-valued setting with the Kronecker delta kernel, the kernel sum rule becomes\n\nThe kernel chain rule in this case is given by\n\n", "id": "41370976", "title": "Kernel embedding of distributions"}
{"url": "https://en.wikipedia.org/wiki?curid=33886025", "text": "Stability (learning theory)\n\nStability, also known as algorithmic stability, is a notion in computational learning theory of how a machine learning algorithm is perturbed by small changes to its inputs. A stable learning algorithm is one for which the prediction does not change much when the training data is modified slightly. For instance, consider a machine learning algorithm that is being trained to recognize handwritten letters of the alphabet, using 1000 examples of handwritten letters and their labels (\"A\" to \"Z\") as a training set. One way to modify this training set is to leave out an example, so that only 999 examples of handwritten letters and their labels are available. A stable learning algorithm would produce a similar classifier with both the 1000-element and 999-element training sets.\n\nStability can be studied for many types of learning problems, from language learning to inverse problems in physics and engineering, as it is a property of the learning process rather than the type of information being learned. The study of stability gained importance in computational learning theory in the 2000s when it was shown to have a connection with generalization. It was shown that for large classes of learning algorithms, notably empirical risk minimization algorithms, certain types of stability ensure good generalization.\n\nA central goal in designing a machine learning system is to guarantee that the learning algorithm will generalize, or perform accurately on new examples after being trained on a finite number of them. In the 1990s, milestones were reached in obtaining generalization bounds for supervised learning algorithms. The technique historically used to prove generalization was to show that an algorithm was consistent, using the uniform convergence properties of empirical quantities to their means. This technique was used to obtain generalization bounds for the large class of empirical risk minimization (ERM) algorithms. An ERM algorithm is one that selects a solution from a hypothesis space formula_1 in such a way to minimize the empirical error on a training set formula_2.\n\nA general result, proved by Vladimir Vapnik for an ERM binary classification algorithms, is that for any target function and input distribution, any hypothesis space formula_1 with VC-dimension formula_4, and formula_5 training examples, the algorithm is consistent and will produce a training error that is at most formula_6 (plus logarithmic factors) from the true training error. The result was later extended to almost-ERM algorithms with function classes that do not have unique minimizers.\n\nVapnik's work, using what became known as VC theory, established a relationship between generalization of a learning algorithm and properties of the hypothesis space formula_1 of functions being learned. However, these results could not be applied to algorithms with hypothesis spaces of unbounded VC-dimension. Put another way, these results could not be applied when the information being learned had a complexity that was too large to measure. Some of the simplest machine learning algorithms—for instance, for regression—have hypothesis spaces with unbounded VC-dimension. Another example is language learning algorithms that can produce sentences of arbitrary length.\n\nStability analysis was developed in the 2000s for computational learning theory and is an alternative method for obtaining generalization bounds. The stability of an algorithm is a property of the learning process, rather than a direct property of the hypothesis space formula_1, and it can be assessed in algorithms that have hypothesis spaces with unbounded or undefined VC-dimension such as nearest neighbor. A stable learning algorithm is one for which the learned function does not change much when the training set is slightly modified, for instance by leaving out an example. A measure of Leave one out error is used in a Cross Validation Leave One Out (CVloo) algorithm to evaluate a learning algorithm's stability with respect to the loss function. As such, stability analysis is the application of sensitivity analysis to machine learning.\n\n\nWe define several terms related to learning algorithms training sets, so that we can then define stability in multiple ways and present theorems from the field.\n\nA machine learning algorithm, also known as a learning map formula_9, maps a training data set, which is a set of labeled examples formula_11, onto a function formula_12 from formula_13 to formula_14, where formula_13 and formula_14 are in the same space of the training examples. The functions formula_12 are selected from a hypothesis space of functions called formula_1.\n\nThe training set from which an algorithm learns is defined as\n\nformula_19\n\nand is of size formula_20 in formula_21\n\ndrawn i.i.d. from an unknown distribution D.\n\nThus, the learning map formula_9 is defined as a mapping from formula_23 into formula_1, mapping a training set formula_2 onto a function formula_26 from formula_13 to formula_14. Here, we consider only deterministic algorithms where formula_9 is symmetric with respect to formula_2, i.e. it does not depend on the order of the elements in the training set. Furthermore, we assume that all functions are measurable and all sets are countable.\n\nThe loss formula_31 of a hypothesis formula_12 with respect to an example formula_33 is then defined as formula_34.\n\nThe empirical error of formula_12 is formula_36.\n\nThe true error of formula_12 is formula_38\n\nGiven a training set S of size m, we will build, for all i = 1...,m, modified training sets as follows:\nformula_39\nformula_40\n\nAn algorithm formula_9 has hypothesis stability β with respect to the loss function V if the following holds:\n\nformula_42\n\nAn algorithm formula_9 has point-wise hypothesis stability β with respect to the loss function V if the following holds:\n\nformula_44\n\nAn algorithm formula_9 has error stability β with respect to the loss function V if the following holds:\n\nformula_46\n\nAn algorithm formula_9 has uniform stability β with respect to the loss function V if the following holds:\n\nformula_48\n\nA probabilistic version of uniform stability β is:\n\nformula_49\n\nAn algorithm is said to be stable, when the value of formula_50 decreases as formula_51.\n\nAn algorithm formula_9 has CVloo stability β with respect to the loss function V if the following holds:\n\nformula_53\n\nThe definition of (CVloo) Stability is equivalent to Pointwise-hypothesis stability seen earlier.\n\nAn algorithm formula_9 has formula_54 stability if for each n there exists a formula_57 and a formula_58 such that:\n\nformula_59, with formula_57 and formula_58 going to zero for formula_62\n\nFrom Bousquet and Elisseeff (02):\n\nFor symmetric learning algorithms with bounded loss, if the algorithm has Uniform Stability with the probabilistic definition above, then the algorithm generalizes.\n\nUniform Stability is a strong condition which is not met by all algorithms but is, surprisingly, met by the large and important class of Regularization algorithms.\nThe generalization bound is given in the article.\n\nFrom Mukherjee et al. (06):\n\n\nThis is an important result for the foundations of learning theory, because it shows that two previously unrelated properties of an algorithm, stability and consistency, are equivalent for ERM (and certain loss functions).\nThe generalization bound is given in the article.\n\nThis is a list of algorithms that have been shown to be stable, and the article where the associated generalization bounds are provided.\n\n\n", "id": "33886025", "title": "Stability (learning theory)"}
{"url": "https://en.wikipedia.org/wiki?curid=35867897", "text": "Bayesian interpretation of kernel regularization\n\nIn machine learning, kernel methods arise from the assumption of an inner product space or similarity structure on inputs. For some such methods, such as support vector machines (SVMs), the original formulation and its regularization were not Bayesian in nature. It is helpful to understand them from a Bayesian perspective. Because the kernels are not necessarily positive semidefinite, the underlying structure may not be inner product spaces, but instead more general reproducing kernel Hilbert spaces. In Bayesian probability kernel methods are a key component of Gaussian processes, where the kernel function is known as the covariance function. Kernel methods have traditionally been used in supervised learning problems where the \"input space\" is usually a \"space of vectors\" while the \"output space\" is a \"space of scalars\". More recently these methods have been extended to problems that deal with multiple outputs such as in multi-task learning.\n\nIn this article we analyze the connections between the regularization and the Bayesian point of view for kernel methods in the case of scalar outputs. A mathematical equivalence between the regularization and the Bayesian point of view is easily proved in cases where the reproducing kernel Hilbert space is \"finite-dimensional\". The infinite-dimensional case raises subtle mathematical issues; we will consider here the finite-dimensional case. We start with a brief review of the main ideas underlying kernel methods for scalar learning, and briefly introduce the concepts of regularization and Gaussian processes. We then show how both points of view arrive at essentially equivalent estimators, and show the connection that ties them together.\n\nThe classical supervised learning problem requires estimating the output for some new input point formula_1 by learning a scalar-valued estimator formula_2 on the basis of a training set formula_3 consisting of formula_4 input-output pairs, formula_5. Given a symmetric and positive bivariate function formula_6 called a \"kernel\", one of the most popular estimators in machine learning is given by\n\nwhere formula_7 is the kernel matrix with entries formula_8, formula_9, and formula_10. We will see how this estimator can be derived both from a regularization and a Bayesian perspective.\n\nThe main assumption in the regularization perspective is that the set of functions formula_11 is assumed to belong to a reproducing kernel Hilbert space formula_12.\n\nA reproducing kernel Hilbert space (RKHS) formula_12 is a Hilbert space of functions defined by a symmetric, positive-definite function formula_14 called the \"reproducing kernel\" such that the function formula_15 belongs to formula_12 for all formula_17. There are three main properties make an RKHS appealing:\n\n1. The \"reproducing property\", which gives name to the space,\n\nwhere formula_19 is the inner product in formula_12.\n\n2. Functions in an RKHS are in the closure of the linear combination of the kernel at given points,\n\nThis allows the construction in a unified framework of both linear and generalized linear models.\n\n3. The squared norm in an RKHS can be written as\n\nand could be viewed as measuring the \"complexity\" of the function.\n\nThe estimator is derived as the minimizer of the regularized functional\n\nwhere formula_23 and formula_24 is the norm in formula_12. The first term in this functional, which measures the average of the squares of the errors between the formula_26 and the formula_27, is called the \"empirical risk\" and represents the cost we pay by predicting formula_26 for the true value formula_27. The second term in the functional is the squared norm in a RKHS multiplied by a weight formula_30 and serves the purpose of stabilizing the problem as well as of adding a trade-off between fitting and complexity of the estimator. The weight formula_30, called the \"regularizer\", determines the degree to which instability and complexity of the estimator should be penalized (higher penalty for increasing value of formula_30).\n\nThe explicit form of the estimator in equation () is derived in two steps. First, the representer theorem states that the minimizer of the functional () can always be written as a linear combination of the kernels centered at the training-set points,\n\nfor some formula_33. The explicit form of the coefficients formula_34 can be found by substituting for formula_35 in the functional (). For a function of the form in equation (), we have that\n\nWe can rewrite the functional () as\n\nThis functional is convex in formula_38 and therefore we can find its minimum by setting the gradient with respect to formula_38 to zero,\n\nSubstituting this expression for the coefficients in equation (), we obtain the estimator stated previously in equation (),\n\nThe notion of a kernel plays a crucial role in Bayesian probability as the covariance function of a stochastic process called the \"Gaussian process\".\n\nAs part of the Bayesian framework, the Gaussian process specifies the \"prior distribution\" that describes the prior beliefs about the properties of the function being modeled. These beliefs are updated after taking into account observational data by means of a \"likelihood function\" that relates the prior beliefs to the observations. Taken together, the prior and likelihood lead to an updated distribution called the \"posterior distribution\" that is customarily used for predicting test cases.\n\nA Gaussian process (GP) is a stochastic process in which any finite number of random variables that are sampled follow a joint Normal distribution. The mean vector and covariance matrix of the Gaussian distribution completely specify the GP. GPs are usually used as a priori distribution for functions, and as such the mean vector and covariance matrix can be viewed as functions, where the covariance function is also called the \"kernel\" of the GP. Let a function formula_42 follow a Gaussian process with mean function formula_43 and kernel function formula_44,\n\nIn terms of the underlying Gaussian distribution, we have that for any finite set formula_46 if we let formula_47 then\n\nwhere formula_49 is the mean vector and formula_50 is the covariance matrix of the multivariate Gaussian distribution.\n\nIn a regression context, the likelihood function is usually assumed to be a Gaussian distribution and the observations to be independent and identically distributed (iid),\n\nThis assumption corresponds to the observations being corrupted with zero-mean Gaussian noise with variance formula_52. The iid assumption makes it possible to factorize the likelihood function over the data points given the set of inputs formula_53 and the variance of the noise formula_52, and thus the posterior distribution can be computed analytically. For a test input vector formula_1, given the training data formula_56, the posterior distribution is given by\n\nwhere formula_58 denotes the set of parameters which include the variance of the noise formula_52 and any parameters from the covariance function formula_44 and where\n\nA connection between regularization theory and Bayesian theory can only be achieved in the case of \"finite dimensional RKHS\". Under this assumption, regularization theory and Bayesian theory are connected through Gaussian process prediction.\n\nIn the finite dimensional case, every RKHS can be described in terms of a feature map formula_62 such that\n\nFunctions in the RKHS with kernel formula_64 can be then be written as\n\nand we also have that\n\nWe can now build a Gaussian process by assuming formula_67 to be distributed according to a multivariate Gaussian distribution with zero mean and identity covariance matrix,\n\nIf we assume a Gaussian likelihood we have\n\nwhere formula_70. The resulting posterior distribution is the given by\n\nWe can see that a \"maximum posterior (MAP)\" estimate is equivalent to the minimization problem defining Tikhonov regularization, where in the Bayesian case the regularization parameter is related to the noise variance.\n\nFrom a philosophical perspective, the loss function in a regularization setting plays a different role than the likelihood function in the Bayesian setting. Whereas the loss function measures the error that is incurred when predicting formula_72 in place of formula_73, the likelihood function measures how likely the observations are from the model that was assumed to be true in the generative process. From a mathematical perspective, however, the formulations of the regularization and Bayesian frameworks make the loss function and the likelihood function to have the same mathematical role of promoting the inference of functions formula_42 that approximate the labels formula_73 as much as possible.\n", "id": "35867897", "title": "Bayesian interpretation of kernel regularization"}
{"url": "https://en.wikipedia.org/wiki?curid=5721403", "text": "Machine Learning (journal)\n\nMachine Learning is a peer-reviewed scientific journal, published since 1986.\n\nIn 2001, forty editors and members of the editorial board of \"Machine Learning\" resigned in order to support the \"Journal of Machine Learning Research\" (JMLR), saying that in the era of the internet, it was detrimental for researchers to continue publishing their papers in expensive journals with pay-access archives. Instead, they wrote, they supported the model of \"JMLR\", in which authors retained copyright over their papers and archives were freely available on the internet.\n\nFollowing the mass resignation, Kluwer changed their publishing policy to allow authors to self-archive their papers online after peer-review. \n", "id": "5721403", "title": "Machine Learning (journal)"}
{"url": "https://en.wikipedia.org/wiki?curid=5721283", "text": "Journal of Machine Learning Research\n\nThe Journal of Machine Learning Research is a peer-reviewed open access scientific journal covering machine learning. It was established in 2000 and the first editor-in-chief was Leslie Kaelbling. The editors-in-chief are Kevin Murphy (Google) and Bernhard Schölkopf (Max Planck Institute for Intelligent Systems).\n\nThe journal was established as an open-access alternative to the journal \"Machine Learning\". In 2001, forty editorial board members of \"Machine Learning\" resigned, saying that in the era of the Internet, it was detrimental for researchers to continue publishing their papers in expensive journals with pay-access archives. The open access model employed by the \"Journal of Machine Learning Research\" allows authors to publish articles for free and retain copyright, while archives are freely available online.\n\nPrint editions of the journal were published by MIT Press until 2004 and by Microtome Publishing thereafter. From its inception, the journal received no revenue from the print edition and paid no subvention to MIT Press or Microtome Publishing.\n\nIn response to the prohibitive costs of arranging workshop and conference proceedings publication with traditional academic publishing companies, the journal launched a proceedings publication arm in 2007 and now publishes proceedings for several leading machine learning conferences including the International Conference on Machine Learning, COLT, AISTATS, and workshops held at the Conference on Neural Information Processing Systems.\n", "id": "5721283", "title": "Journal of Machine Learning Research"}
{"url": "https://en.wikipedia.org/wiki?curid=30511763", "text": "AIXI\n\nAIXI is a theoretical mathematical formalism for artificial general intelligence.\nIt combines Solomonoff induction with sequential decision theory.\nAIXI was first proposed by Marcus Hutter in 2000 and the results below are proved in Hutter's 2005 book \"Universal Artificial Intelligence\".\n\nAIXI is a reinforcement learning agent;\nit maximizes the expected total rewards received from the environment.\nIntuitively, it simultaneously considers every computable hypothesis.\nIn each time step, it looks at every possible program and evaluates how many rewards that program generates depending on the next action taken.\nThe promised rewards are then weighted by the subjective belief that this program constitutes the true environment.\nThis belief is computed from the length of the program: longer programs are considered less likely, in line with Occam's razor. \nAIXI then selects the action that has the highest expected total reward in the weighted sum of all these programs.\n\nThe AIXI agent interacts sequentially with some (stochastic and unknown to AIXI) environment formula_1.\nIn step \"t\", the agent outputs an action formula_2 and\nthe environment responds with an observation formula_3 and a reward formula_4 distributed according to the conditional probability\nformula_5.\nThen this cycle repeats for \"t + 1\".\nThe agent tries to maximize cumulative future reward formula_6 for a fixed lifetime \"m\".\n\nGiven a current time \"t\" and history formula_7,\nthe action AIXI outputs is defined as\n\nwhere \"U\" denotes a monotone universal Turing machine, and\n\"q\" ranges over all programs on the universal machine \"U\".\n\nThe parameters to AIXI are the universal Turing machine and the agent's lifetime \"m\".\nThe latter dependence can be removed by the use of discounting.\n\nAIXI's performance is measured by the expected total number of rewards it receives.\nAIXI has been proven to be optimal in the following ways.\n\n\nIt was later shown that balanced Pareto optimality is subjective and that any policy can be considered Pareto optimal, which undermines all previous optimality claims for AIXI.\n\nHowever, AIXI does have limitations. It is restricted to maximizing rewards based on percepts as opposed to external states. It also assumes it interacts with the environment solely through action and percept channels, preventing it from considering the possibility of being damaged or modified. Colloquially, this means that it doesn't consider itself to be contained by the environment it interacts with. It also assumes the environment is computable. Since AIXI is incomputable (see below), it assigns zero probability to its own existence.\n\nLike Solomonoff induction, AIXI is incomputable.\nHowever, there are computable approximations of it.\nOne such approximation is AIXI\"tl\",\nwhich performs as least as well as the provably best time \"t\" and space \"l\" limited agent.\nAnother approximation to AIXI with a restricted environment class is MC-AIXI(FAC-CTW),\nwhich has had some success playing simple games such as partially observable Pac-Man.\n\n\n", "id": "30511763", "title": "AIXI"}
{"url": "https://en.wikipedia.org/wiki?curid=43269516", "text": "Sample complexity\n\nThe sample complexity of a machine learning algorithm represents the number of training-samples that it needs in order to successfully learn a target function.\n\nMore precisely, the sample complexity is the number of training-samples that we need to supply to the algorithm, so that the function returned by the algorithm is within an arbitrarily small error of the best possible function, with probability arbitrarily close to 1.\n\nThere are two variants of sample complexity:\n\nThe No Free Lunch theorem, discussed below, proves that, in general, the strong sample complexity is infinite. I.e, there is no algorithm that can learn the globally-optimal target function using a finite number of training samples.\n\nHowever, if we are only interested in a particular class of target functions (e.g, only linear functions) then the sample complexity is finite, and it depends linearly on the VC dimension on the class of target functions.\nLet formula_1 be a space which we call the input space, and formula_2 be a space which we call the output space, and let formula_3 denote the product formula_4. For example, in the setting of binary classification, formula_1 is typically a finite-dimensional vector space and formula_2 is the set formula_7.\n\nFix a hypothesis space formula_8 of functions formula_9. A learning algorithm over formula_8 is a computable map from formula_11 to formula_8. In other words, it is an algorithm that takes as input a finite sequence of training samples and outputs a function from formula_1 to formula_2. Typical learning algorithms include empirical risk minimization, without or with Tikhonov regularization.\n\nFix a loss function formula_15, for example, the square loss formula_16. For a given distribution formula_17 on formula_4, the expected risk of a hypothesis (a function) formula_19 is\n\nIn our setting, we have formula_21 where formula_22 is a learning algorithm and formula_23 is a sequence of vectors which are all drawn independently from formula_17. Define the optimal riskformula_25Set formula_26 for each formula_27. Note that \nformula_28 is a random variable and depends on the random variable formula_29, which is drawn from the distribution formula_30. The algorithm formula_22 is called consistent if formula_32 probabilistically converges to formula_33, in other words, for all \"ε\", \"δ\" > 0, there exists a positive integer \"N\" such that for all \"n\" ≥ \"N\", we haveformula_34The sample complexity of formula_22 is then the minimum \"N\" for which this holds, as a function of \"ρ\", \"ε\", and \"δ\". We write the sample complexity as formula_36 to emphasize that this value of \"N\" depends on \"ρ\", \"ε\", and \"δ\". If formula_22 is not consistent, then we set formula_38. If there exists an algorithm for which formula_36 is finite, then we say that the hypothesis space formula_40 is learnable.\n\nIn words, the sample complexity formula_36 defines the rate of consistency of the algorithm: given a desired accuracy \"ε\" and confidence \"δ\", one needs to sample formula_36 data points to guarantee that the risk of the output function is within \"ε\" of the best possible, with probability at least 1 - \"δ\".\n\nIn probabilistically approximately correct (PAC) learning, one is concerned with whether the sample complexity is \"polynomial\", that is, whether formula_36 is bounded by a polynomial in 1/\"ε\" and 1/\"δ\". If formula_36 is polynomial for some learning algorithm, then one says that the hypothesis space \nformula_45 is PAC-learnable. Note that this is a stronger notion than being learnable.\n\nOne can ask whether there exists a learning algorithm so that the sample complexity is finite in the strong sense, that is, there is a bound on the number of samples needed so that the algorithm can learn any distribution over the input-output space with a specified target error. More formally, one asks whether there exists a learning algorithm formula_22 such that, for all \"ε\", \"δ\" > 0, there exists a positive integer \"N\" such that for all \"n\" ≥ \"N\", we haveformula_47where formula_48, with formula_23 as above. The No Free Lunch Theorem says that without restrictions on the hypothesis space formula_8, this is not the case, i.e., there always exist \"bad\" distributions for which the sample complexity is arbitrarily large. \n\nThus, in order to make statements about the rate of convergence of the quantity\nformula_51\none must either\n\nThe latter approach leads to concepts such as VC dimension and Rademacher complexity which control the complexity of the space formula_8. A smaller hypothesis space introduces more bias into the inference process, meaning that formula_55 may be greater than the best possible risk in a larger space. However, by restricting the complexity of the hypothesis space it becomes possible for an algorithm to produce more uniformly consistent functions. This trade-off leads to the concept of regularization.\n\nIt is a theorem from VC theory that the following three statements are equivalent for a hypothesis space formula_8:\nThis gives a way to prove that certain hypothesis spaces are PAC learnable, and by extension, learnable.\n\nLet \"X\" = R, \"Y\" = {-1, 1}, and let formula_8 be the space of affine functions on \"X\", that is, functions of the form formula_61 for some formula_62. This is the linear classification with offset learning problem. Now, note that four coplanar points in a square cannot be shattered by any affine function, since no affine function can be positive on two diagonally opposite vertices and negative on the remaining two. Thus, the VC dimension of formula_8 is formula_64, in particular finite. It follows by the above characterization of PAC-learnable classes that formula_8 is PAC-learnable, and by extension, learnable.\n\nSuppose formula_8 is a class of binary functions (functions to {0,1}). Then, formula_8 is formula_68-PAC-learnable with a sample of size:\n\nformula_69\nwhere formula_70 is the VC dimension of formula_8.\nMoreover, any formula_68-PAC-learning algorithm for formula_8 must have sample-complexity:\nformula_74\nThus, the sample-complexity is a linear function of the VC dimension of the hypothesis space.\n\nSuppose formula_8 is a class of real-valued functions with range in [0,T]. Then, formula_8 is formula_68-PAC-learnable with a sample of size:\n\nformula_78\nwhere formula_79 is Pollard's pseudo-dimension of formula_8.\n\nIn addition to the supervised learning setting, sample complexity is relevant to semi-supervised learning problems including active learning, where the algorithm can ask for labels to specifically chosen inputs in order to reduce the cost of obtaining many labels. The concept of sample complexity also shows up in reinforcement learning, online learning, and unsupervised algorithms, e.g. for dictionary learning.\n", "id": "43269516", "title": "Sample complexity"}
{"url": "https://en.wikipedia.org/wiki?curid=43218024", "text": "Evaluation of binary classifiers\n\nThe evaluation of binary classifiers compares two methods of assigning a binary attribute, one of which is usually a standard method and the other is being investigated. There are many metrics that can be used to measure the performance of a classifier or predictor; different fields have different preferences for specific metrics due to different goals. For example, in medicine sensitivity and specificity are often used, while in computer science precision and recall are preferred. An important distinction is between metrics that are independent on the prevalence (how often each category occurs in the population), and metrics that depend on the prevalence – both types are useful, but they have very different properties.\n\nGiven a data set, a classification (the output of a classifier on that set) gives two numbers: the number of positives and the number of negatives, which add up to the total size of the set. To evaluate a classifier, one compares its output to another reference classification – ideally a perfect classification, but in practice the output of another gold standard test – and cross tabulates the data into a 2×2 contingency table, comparing the two classifications. One then evaluates the classifier \"relative\" to the gold standard by computing summary statistics of these 4 numbers. Generally these statistics will be scale invariant (scaling all the numbers by the same factor does not change the output), to make them independent of population size, which is achieved by using ratios of homogeneous functions, most simply homogeneous linear or homogeneous quadratic functions.\n\nSay we test some people for the presence of a disease. Some of these people have the disease, and our test correctly says they are positive. They are called \"true positives\" (TP). Some have the disease, but the test incorrectly claims they don't. They are called \"false negatives\" (FN). Some don't have the disease, and the test says they don't – \"true negatives\" (TN). Finally, there might be healthy people who have a positive test result – \"false positives\" (FP). These can be arranged into a 2×2 contingency table (confusion matrix), conventionally with the test result on the vertical axis and the actual condition on the horizontal axis.\n\nThese numbers can then be totaled, yielding both a grand total and marginal totals. Totaling the entire table, the number of true positives, false negatives, true negatives, and false positives add up to 100% of the set. Totaling the rows (adding horizontally) the number of true positives and false positives add up to 100% of the test positives, and likewise for negatives. Totaling the columns (adding vertically), the number of true positives and false negatives add up to 100% of the condition positives (conversely for negatives). The basic marginal ratio statistics are obtained by dividing the 2×2=4 values in the table by the marginal totals (either rows or columns), yielding 2 auxiliary 2×2 tables, for a total of 8 ratios. These ratios come in 4 complementary pairs, each pair summing to 1, and so each of these derived 2×2 tables can be summarized as a pair of 2 numbers, together with their complements. Further statistics can be obtained by taking ratios of these ratios, ratios of ratios, or more complicated functions.\n\nThe contingency table and the most common derived ratios are summarized below; see sequel for details.\n\nNote that the columns correspond to the \"condition actually\" being positive or negative (or classified as such by the gold standard), as indicated by the color-coding, and the associated statistics are prevalence-independent, while the rows correspond to the \"test\" being positive or negative, and the associated statistics are prevalence-dependent. There are analogous likelihood ratios for prediction values, but these are less commonly used, and not depicted above.\n\nThe fundamental prevalence-independent statistics are sensitivity and specificity.\n\nSensitivity or True Positive Rate (TPR), also known as recall, is the proportion of people that tested positive and are positive (True Positive, TP) of all the people that actually are positive (Condition Positive, CP = TP + FN). It can be seen as \"the probability that the test is positive given that the patient is sick\". With higher sensitivity, fewer actual cases of disease go undetected (or, in the case of the factory quality control, fewer faulty products go to the market).\n\nSpecificity (SPC) or True Negative Rate (TNR) is the proportion of people that tested negative and are negative (True Negative, TN) of all the people that actually are negative (Condition Negative, CN = TN + FP). As with sensitivity, it can be looked at as \"the probability that the test result is negative given that the patient is not sick\". With higher specificity, fewer healthy people are labeled as sick (or, in the factory case, fewer good products are discarded).\n\nThe relationship between sensitivity and specificity, as well as the performance of the classifier, can be visualized and studied using the Receiver Operating Characteristic (ROC) curve.\n\nIn theory, sensitivity and specificity are independent in the sense that it is possible to achieve 100% in both (such as in the red/blue ball example given above). In more practical, less contrived instances, however, there is usually a trade-off, such that they are inversely proportional to one another to some extent. This is because we rarely measure the actual thing we would like to classify; rather, we generally measure an indicator of the thing we would like to classify, referred to as a surrogate marker. The reason why 100% is achievable in the ball example is because redness and blueness is determined by directly detecting redness and blueness. However, indicators are sometimes compromised, such as when non-indicators mimic indicators or when indicators are time-dependent, only becoming evident after a certain lag time. The following example of a pregnancy test will make use of such an indicator.\n\nModern pregnancy tests \"do not\" use the pregnancy itself to determine pregnancy status; rather, human chorionic gonadotropin is used, or hCG, present in the urine of gravid females, as a \"surrogate marker to indicate\" that a woman is pregnant. Because hCG can also be produced by a tumor, the specificity of modern pregnancy tests cannot be 100% (in that false positives are possible). Also, because hCG is present in the urine in such small concentrations after fertilization and early embryogenesis, the sensitivity of modern pregnancy tests cannot be 100% (because false negatives are possible).\n\nIn addition to sensitivity and specificity, the performance of a binary classification test can be measured with positive predictive value (PPV), also known as precision, and negative predictive value (NPV). The positive prediction value answers the question \"If the test result is \"positive\", how well does that \"predict\" an actual presence of disease?\". It is calculated as TP/(TP + FP); that is, it is the proportion of true positives out of all positive results. The negative prediction value is the same, but for negatives, naturally.\n\nPrevalence has a significant impact on prediction values. As an example, suppose there is a test for a disease with 99% sensitivity and 99% specificity. If 2000 people are tested and the prevalence (in the sample) is 50%, 1000 of them are sick and 1000 of them are healthy. Thus about 990 true positives and 990 true negatives are likely, with 10 false positives and 10 false negatives. The positive and negative prediction values would be 99%, so there can be high confidence in the result.\n\nHowever, if the prevalence is only 5%, so of the 2000 people only 100 are really sick, then the prediction values change significantly. The likely result is 99 true positives, 1 false negative, 1881 true negatives and 19 false positives. Of the 19+99 people tested positive, only 99 really have the disease – that means, intuitively, that given that a patient's test result is positive, there is only 84% chance that they really have the disease. On the other hand, given that the patient's test result is negative, there is only 1 chance in 1882, or 0.05% probability, that the patient has the disease despite the test result.\n\nThere are various relationships between these ratios.\n\nIf the prevalence, sensitivity, and specificity are known, the positive predictive value can be obtained from the following identity:\n\nIf the prevalence, sensitivity, and specificity are known, the negative predictive value can be obtained from the following identity:\n\nIn addition to the paired metrics, there are also single metrics that give a single number to evaluate the test.\n\nPerhaps the simplest statistic is accuracy or Fraction Correct (FC), which measures the fraction of all instances that are correctly categorized; it is the ratio of the number of correct classifications to the total number of correct or incorrect classifications: (TP + TN)/Total Population = (TP + TN)/(TP + TN + FP + FN). This is often not very useful, compared to the marginal ratios, as it does not yield useful marginal interpretations, due to mixing true positives (test positive, condition positive) and true negatives (test negative, condition negative) – in terms of the condition table, it sums the diagonal; further, it is prevalence-dependent. The complement is the Fraction Incorrect (FiC): FC + FiC = 1, or (FP + FN)/(TP + TN + FP + FN) – this is the sum of the antidiagonal, divided by the total population.\n\nThe diagnostic odds ratio (DOR) is a more useful overall metric, which can be defined directly as (TP×TN)/(FP×FN) = (TP/FN)/(FP/TN), or indirectly as a ratio of ratio of ratios (ratio of likelihood ratios, which are themselves ratios of True Rates or Prediction Values). This has a useful interpretation – as an odds ratio – and is prevalence-independent.\n\nAn F-score is a combination of the precision and the recall, providing a single score. There is a one-parameter family of statistics, with parameter \"β,\" which determines the relative weights of precision and recall. The traditional or balanced F-score (F1 score) is the harmonic mean of precision and recall:\n\nNote, however, that the F-scores do not take the true negative rate into account, and that measures such as the Phi coefficient, Matthews correlation coefficient, Informedness or Cohen's kappa may be preferable to assess the performance of a binary classifier. As a correlation coefficient, the Matthews correlation coefficient is the geometric mean of the regression coefficients of the problem and its dual. The component regression coefficients of the Matthews correlation coefficient are markedness (deltap) and informedness (deltap').\n\nOther metrics include Youden's J statistic.\n\n", "id": "43218024", "title": "Evaluation of binary classifiers"}
{"url": "https://en.wikipedia.org/wiki?curid=43502368", "text": "Vanishing gradient problem\n\nIn machine learning, the vanishing gradient problem is a difficulty found in training artificial neural networks with gradient-based learning methods and backpropagation. In such methods, each of the neural network's weights receives an update proportional to the gradient of the error function with respect to the current weight in each iteration of training. The problem is that in some cases, the gradient will be vanishingly small, effectively preventing the weight from changing its value. In the worst case, this may completely stop the neural network from further training. As one example of the problem cause, traditional activation functions such as the hyperbolic tangent function have gradients in the range , and backpropagation computes gradients by the chain rule. This has the effect of multiplying of these small numbers to compute gradients of the \"front\" layers in an -layer network, meaning that the gradient (error signal) decreases exponentially with while the front layers train very slowly.\n\nBack-propagation allowed researchers to train supervised deep artificial neural networks from scratch, initially with little success. Hochreiter's diploma thesis of 1991 formally identified the reason for this failure in the \"vanishing gradient problem\", which not only affects many-layered feedforward networks , but also recurrent networks. The latter are trained by unfolding them into very deep feedforward networks, where a new layer is created for each time step of an input sequence processed by the network.\n\nWhen activation functions are used whose derivatives can take on larger values, one risks encountering the related exploding gradient problem.\nTo overcome this problem, several methods were proposed. One is Jürgen Schmidhuber's multi-level hierarchy of networks (1992) pre-trained one level at a time through unsupervised learning, fine-tuned through backpropagation. Here each level learns a compressed representation of the observations that is fed to the next level.\n\nSimilar ideas have been used in feed-forward neural network for unsupervised pre-training to structure a neural network, making it first learn generally useful feature detectors. Then the network is trained further by supervised back-propagation to classify labeled data. The deep belief network model by Hinton et al. (2006) involves learning the distribution of a high level representation using successive layers of binary or real-valued latent variables. It uses a restricted Boltzmann machine to model each new layer of higher level features. Each new layer guarantees an increase on the lower-bound of the log likelihood of the data, thus improving the model, if trained properly. Once sufficiently many layers have been learned the deep architecture may be used as a generative model by reproducing the data when sampling down the model (an \"ancestral pass\") from the top level feature activations.\nHinton reports that his models are effective feature extractors over high-dimensional, structured data. This work plays a key role in reintroducing the interests in deep neural network research and consequently leads to the developments of Deep learning, although deep belief network is no longer the main deep learning technique.\n\nAnother technique particularly used for recurrent neural networks is the long short-term memory (LSTM) network of 1997 by Hochreiter & Schmidhuber. In 2009, deep multidimensional LSTM networks demonstrated the power of deep learning with many nonlinear layers, by winning three ICDAR 2009 competitions in connected handwriting recognition, without any prior knowledge about the three different languages to be learned.\n\nHardware advances have meant that from 1991 to 2015, computer power (especially as delivered by GPUs) has increased around a million-fold, making standard backpropagation feasible for networks several layers deeper than when the vanishing gradient problem was recognized. Schmidhuber notes that this \"is basically what is winning many of the image recognition competitions now\", but that it \"does not really\novercome the problem in a fundamental way\" since the original models tackling the vanishing gradient problem by Hinton et al. (2006) were trained in a Xeon processor, not GPUs.\n\nOne of the newest and most effective ways to resolve the vanishing gradient problem is with residual neural networks (ResNets - not to be confused with recurrent neural networks). It was noted prior to ResNets that a deeper network would actually have higher \"training\" error than the shallow network. This intuitively can be understood as data disappearing through too many layers of the network, meaning output from a shallow layer was diminished through the greater number of layers in the deeper network, yielding a worse result. Going with this intuitive hypothesis, Microsoft research found that splitting a deep network into e.g., three layer chunks and passing the input into each chunk straight through to the next chunk (along with the residual—output of the chunk minus the input to the chunk that is reintroduced) helped eliminate much of this disappearing signal problem. No extra parameters or changes to the learning algorithm were needed. ResNets yielded lower training error (and test error) than their shallower counterparts simply by reintroducing outputs from shallower layers in the network to compensate for the vanishing data.\n\nNote that ResNets are an ensemble of relatively shallow Nets and do not resolve the vanishing gradient problem by preserving gradient flow throughout the entire depth of the network – rather, they avoid the problem simply by constructing ensembles of many short networks together. (Ensemble by Construction)\nBehnke relied only on the sign of the gradient (Rprop) when training his Neural Abstraction Pyramid to solve problems like image reconstruction and face localization.\n\nNeural networks can also be optimized by using a universal search algorithm on the space of neural network's weights, e.g., random guess or more systematically genetic algorithm. This approach is not based on gradient and avoids the vanishing gradient problem.\n\n", "id": "43502368", "title": "Vanishing gradient problem"}
{"url": "https://en.wikipedia.org/wiki?curid=41929726", "text": "Query-level feature\n\nA query-level feature or QLF is a ranking feature utilized in a machine-learned ranking algorithm.\n\nExample QLFs:\n", "id": "41929726", "title": "Query-level feature"}
{"url": "https://en.wikipedia.org/wiki?curid=43932548", "text": "Random projection\n\nIn mathematics and statistics, random projection is a technique used to reduce the dimensionality of a set of points which lie in Euclidean space. Random projection methods are powerful methods known for their simplicity and less erroneous output compared with other methods. According to experimental results, random projection preserve distances well, but empirical results are sparse.\nThey have been applied to many natural language tasks under the name of random indexing.\n\nDimensionality reduction, as the name suggests, is reducing the number of random variables using various mathematical methods from statistics and machine learning. Dimensionality reduction is often used to reduce the problem of managing and manipulating large data sets. Dimensionality reduction techniques generally use linear transformations in determining the intrinsic dimensionality of the manifold as well as extracting its principal directions. For this purpose there are various related techniques, including: principal component analysis, linear discriminant analysis, canonical correlation analysis, discrete cosine transform, random projection, etc.\n\nRandom projection is a simple and computationally efficient way to reduce the dimensionality of data by trading a controlled amount of error for faster processing times and smaller model sizes. The dimensions and distribution of random projection matrices are controlled so as to approximately preserve the pairwise distances between any two samples of the dataset.\n\nThe core idea behind random projection is given in the Johnson-Lindenstrauss lemma, which states that if points in a vector space are of sufficiently high dimension, then they may be projected into a suitable lower-dimensional space in a way which approximately preserves the distances between the points.\n\nIn random projection, the original d-dimensional data is projected to a k-dimensional (k « d) subspace, using a random formula_1 - dimensional matrix R whose rows have unit lengths. Using matrix notation: If formula_2 is the original set of N d-dimensional observations, then formula_3 is the projection of the data onto a lower k-dimensional subspace. Random projection is computationally simple: form the random matrix \"R\" and project the formula_4 data matrix X onto K dimensions of order formula_5. If the data matrix X is sparse with about c nonzero entries per column, then the complexity of this operation is of order formula_6.\n\nThe random matrix R can be generated using a Gaussian distribution. The first row is a random unit vector uniformly chosen from formula_7. The second row is a random unit vector from the space orthogonal to the first row, the third row is a random unit vector from the space orthogonal to the first two rows, and so on. In this way of choosing R, the following properties are satisfied:\n\nAchlioptas has shown that the Gaussian distribution can be replaced by a much simpler distribution such as\nThis is efficient for database applications because the computations can be performed using integer arithmetic.\n\nIt was later shown how to use integer arithmetic while making the distribution even sparser, having very few nonzeroes per column, in work on the Sparse JL Transform. This is advantageous since a sparse embedding matrix means being able to project the data to lower dimension even faster.\n\nThe Johnson-Lindenstrauss lemma states that large sets of vectors in a high-dimensional space can be linearly mapped in a space of much lower (but still high) dimension \"n\" with approximate preservation of distances. One of the explanations of this effect is the exponentially high quasiorthogonal dimension of \"n\"-dimensional Euclidean space. There are exponentially large (in dimension \"n\") sets of almost orthogonal vectors (with small value of inner products) in \"n\"–dimensional Euclidean space. This observation is useful in indexing of high-dimensional data.\n\nQuasiorthogonality of large random sets is important for methods of random approximation in machine learning. In high dimensions, exponentially large numbers of randomly and independently chosen vectors from equidistribution on a sphere (and from many other distributions) are almost orthogonal with probability close to one. This implies that in order to represent an element of such a high-dimensional space by linear combinations of randomly and independently chosen vectors, it may often be necessary to generate samples of exponentially large length if we use bounded coefficients in linear combinations. On the other hand, if coefficients with arbitrarily large values are allowed, the number of randomly generated elements that are sufficient for approximation is even less than dimension of the data space.\n\nRandom projections have been applied for human activity recognition to reduce feature dimensionality of sensor data.\n\n\n", "id": "43932548", "title": "Random projection"}
{"url": "https://en.wikipedia.org/wiki?curid=43808044", "text": "Action model learning\n\nAction model learning (sometimes abbreviated action learning) is an area of machine learning concerned with creation and modification of software agent's knowledge about \"effects\" and \"preconditions\" of the \"actions\" that can be executed within its \"environment\". This knowledge is usually represented in logic-based action description language and used as the input for automated planners.\n\nLearning action models is important when goals change. When an agent acted for a while, it can use its accumulated knowledge about actions in the domain to make better decisions. Thus, learning action models differs from reinforcement learning. It enables reasoning about actions instead of expensive trials in the world. Action model learning is a form of inductive reasoning, where new knowledge is generated based on agent's \"observations\". It differs from standard supervised learning in that correct input/output pairs are never presented, nor imprecise action models explicitly corrected.\n\nUsual motivation for action model learning is the fact that manual specification of action models for planners is often a difficult, time consuming, and error-prone task (especially in complex environments).\n\nGiven a training set formula_1 consisting of examples formula_2, where formula_3 are observations of a world state from two consecutive time steps formula_4 and formula_5 is an \"action instance\" observed in time step formula_6, the goal of action model learning in general is to construct an \"action model\" formula_7, where formula_8 is a description of domain dynamics in action description formalism like STRIPS, ADL or PDDL and formula_9 is a probability function defined over the elements of formula_8.\n\nHowever, many state of the art \"action learning methods\" assume determinism and do not induce formula_9. In addition to determinism, individual methods differ in how they deal with other attributes of domain (e.g. partial observability or sensoric noise).\n\nRecent action learning methods take various approaches and employ a wide variety of tools from different areas of artificial intelligence and computational logic. As an example of a method based on propositional logic, we can mention SLAF (Simultaneous Learning and Filtering) algorithm, which uses agent's observations to construct a long propositional formula over time and subsequently interprets it using a satisfiability (SAT) solver. Another technique, in which learning is converted into a satisfiability problem (weighted MAX-SAT in this case) and SAT solvers are used, is implemented in ARMS (Action-Relation Modeling System).\nTwo mutually similar, fully declarative approaches to action learning were based on logic programming paradigm Answer Set Programming (ASP) and its extension, Reactive ASP. In another example, bottom-up inductive logic programming approach was employed. Several different solutions are not directly logic-based. For example, the action model learning using a perceptron algorithm or the multi level greedy search over the space of\npossible action models. In the older paper from 1992, the action model learning was studied as an extension of reinforcement learning.\n\nMost action learning research papers are published in journals and conferences focused on artificial intelligence in general (e.g. Journal of Artificial Intelligence Research (JAIR), Artificial Intelligence, Applied Artificial Intelligence (AAI) or AAAI conferences). Despite mutual relevance of the topics, action model learning is usually not addressed on planning conferences like ICAPS.\n\n", "id": "43808044", "title": "Action model learning"}
{"url": "https://en.wikipedia.org/wiki?curid=44439173", "text": "Bradley–Terry model\n\nThe Bradley–Terry model is a probability model that can predict the outcome of a comparison. Given a pair of individuals and drawn from some population, it estimates the probability that the pairwise comparison turns out true, as\n\nwhere is a positive real-valued score assigned to individual . The comparison can be read as \" is preferred to \", \" ranks higher than \", or \" beats \", depending on the application.\n\nFor example, may represent the skill of a team in a sports tournament, estimated from the number of times has won a match. formula_2 then represents the probability that will win a match against . Another example used to explain the model's purpose is that of scoring products in a certain category by quality. While it's hard for a person to draft a direct ranking of (many) brands of wine, it may be feasible to compare a sample of pairs of wines and say, for each pair, which one is better. The Bradley–Terry model can then be used to derive a full ranking.\n\nThe model is named after R. A. Bradley and M. E. Terry, who presented it in 1952, although it had already been studied by Zermelo in the 1920s.\n\nReal-world applications of the model include estimation of the influence of statistical journals, or ranking documents by relevance in machine-learned search engines.\nIn the latter application, formula_3 may reflect that document is more relevant to the user's query than document , so it should be displayed earlier in the results list. The individual then express the relevance of the document, and can be estimated from the frequency with which users click particular \"hits\" when presented with a result list.\n\nThe Bradley–Terry model can be parametrized in various ways. One way to do so is to pick a single parameter per observation, leading to a model of parameters .\nAnother variant, in fact the version considered by Bradley and Terry, uses exponential score functions formula_4 so that\n\nor, using the logit (and disallowing ties),\n\nreducing the model to logistic regression on pairs of individuals.\n\nThe following algorithm computes the parameters of the basic version of the model from a sample of observations. Formally, it computes a maximum likelihood estimate, i.e., it maximizes the likelihood of the observed data. The algorithm dates back to the work of Zermelo.\n\nThe observations required are the outcomes of previous comparisons, for example, pairs where beats . Summarizing these outcomes as , the number of times has beaten , we obtain the log-likelihood of the parameter vector as\n\nDenote the number of comparisons \"won\" by as , and the number of comparisons made between and as . Starting from an arbitrary vector , the algorithm iteratively performs the update\n\nfor all . After computing all of the new parameters, they should be renormalized,\n\nThis estimation procedure improves the log-likelihood in every iteration, and eventually converges to a unique maximum.\n\n", "id": "44439173", "title": "Bradley–Terry model"}
{"url": "https://en.wikipedia.org/wiki?curid=44108758", "text": "Quantum machine learning\n\nQuantum machine learning is an emerging interdisciplinary research area at the intersection of quantum physics and machine learning. One can distinguish four different ways of merging the two parent disciplines. Quantum machine learning algorithms can use the advantages of quantum computation in order to improve classical methods of machine learning, for example by developing efficient implementations of expensive classical algorithms on a quantum computer. On the other hand, one can apply classical methods of machine learning to analyse quantum systems. Most generally, one can consider situations wherein both the learning device and the system under study are fully quantum.\n\nA related branch of research explores methodological and structural similarities between certain physical systems and learning systems, in particular neural networks, which has revealed, for example, that certain mathematical and numerical techniques from quantum physics carry over to classical deep learning.\n\nQuantum-enhanced machine learning refers to quantum algorithms that solve tasks in machine learning, thereby improving a classical machine learning method. Such algorithms typically require one to encode the given classical dataset into a quantum computer, so as to make it accessible for quantum information processing. After this, quantum information processing routines can be applied and the result of the quantum computation is read out by measuring the quantum system. For example, the outcome of the measurement of a qubit could reveal the result of a binary classification task. While many proposals of quantum machine learning algorithms are still purely theoretical and require a full-scale universal quantum computer to be tested, others have been implemented on small-scale or special purpose quantum devices.\n\nOne line of approaches is based on the idea of \"amplitude encoding\", that is, to associate the amplitudes of a quantum state with the inputs and outputs of computations. Since a state of formula_1 qubits is described by formula_2 complex amplitudes, this information encoding can allow for an exponentially compact representation. Intuitively, this corresponds to associating a discrete probability distribution over binary random variables with a classical vector. The goal of algorithms based on amplitude encoding is to formulate quantum algorithms whose resources grow polynomially in the number of qubits formula_1, which amounts to a logarithmic growth in the number of amplitudes and thereby the dimension of the input.\n\nMany quantum machine learning algorithms in this category are based on variations of the quantum algorithm for linear systems of equations which, under specific conditions, performs a matrix inversion using an amount of physical resources growing only logarithmically in the dimensions of the matrix. One of these conditions is that a Hamiltonian which entrywise corresponds to the matrix can be simulated efficiently, which is known to be possible if the matrix is sparse or low rank. For reference, any known classical algorithm for matrix inversion requires a number of operations that grows at least quadratically in the dimension of the matrix.\n\nQuantum matrix inversion can be applied to machine learning methods in which the training reduces to solving a linear system of equations, for example in least-squares linear regression, the least-squares version of support vector machines, and Gaussian processes.\n\nA crucial bottleneck of methods that simulate linear algebra computations with the amplitudes of quantum states is state preparation, which often requires one to initialise a quantum system in a state whose amplitudes reflect the features of the entire dataset. Although efficient methods for state preparation are known for specific cases, this step easily hides the complexity of the task.\n\nAnother approach to improving classical machine learning with quantum information processing uses amplitude amplification methods based on Grover's search algorithm, which has been shown to solve unstructured search problems with a quadratic speedup compared to classical algorithms. These quantum routines can be employed for learning algorithms that translate into an unstructured search task, as can be done, for instance, in the case of the k-medians and the k-nearest neighbors algorithms. Another application is a quadratic speedup in the training of perceptron.\n\nAmplitude amplification is often combined with quantum walks to achieve the same quadratic speedup. Quantum walks have been proposed to enhance Google's PageRank algorithm as well as the performance of reinforcement learning agents in the projective simulation framework.\n\nReinforcement learning is a third branch of machine learning, distinct from supervised and unsupervised learning, which also admits quantum enhancements. In quantum-enhanced reinforcement learning, a quantum agent interacts with a classical environment and occasionally receives rewards for its actions, which allows the agent to adapt its behaviour—in other words, to learn what to do in order to gain more rewards. In some situations, either because of the quantum processing capability of the agent, or due to the possibility to probe the environment in superpositions, a quantum speedup may be achieved. Implementations of these kinds of protocols in superconducting circuits and in systems of trapped ions have been proposed.\n\nSampling from high-dimensional probability distributions is at the core of a wide spectrum of computational techniques with important applications across science, engineering, and society. Examples include deep learning, probabilistic programming, and other machine learning and artificial intelligence applications.\n\nA computationally hard problem, which is key for some relevant machine learning tasks, is the estimation of averages over probabilistic models defined in terms of a Boltzmann distribution. Sampling from generic probabilistic models is hard: algorithms relying heavily on sampling are expected to remain intractable no matter how large and powerful classical computing resources become. Even though quantum annealers, like those produced by D-Wave Systems, were designed for challenging combinatorial optimization problems, it has been recently recognized as a potential candidate to speed up computations that rely on sampling by exploiting quantum effects.\n\nSome research groups have recently explored the use of quantum annealing hardware for training Boltzmann machines and deep neural networks. The standard approach to training Boltzmann machines relies on the computation of certain averages that can be estimated by standard sampling techniques, such as Markov chain Monte Carlo algorithms. Another possibility is to rely on a physical process, like quantum annealing, that naturally generates samples from a Boltzmann distribution. The objective is to find the optimal control parameters that best represent the empirical distribution of a given dataset.\n\nThe D-Wave 2X system hosted at NASA Ames Research Center has been recently used for the learning of a special class of restricted Boltzmann machines that can serve as a building block for deep learning architectures. Complementary work that appeared roughly simultaneously showed that quantum annealing can be used for supervised learning in classification tasks. The same device was later used to train a fully connected Boltzmann machine to generate, reconstruct, and classify down-scaled, low-resolution handwritten digits, among other synthetic datasets. In both cases, the models trained by quantum annealing had a similar or better performance in terms of quality. The ultimate question that drives this endeavour is whether there is quantum speedup in sampling applications. Experience with the use of quantum annealers for combinatorial optimization suggests the answer is not straightforward.\n\nInspired by the success of Boltzmann machines based on classical Boltzmann distribution, a new machine learning approach based on quantum Boltzmann distribution of a transverse-field Ising Hamiltonian was recently proposed. Due to the non-commutative nature of quantum mechanics, the training process of the quantum Boltzmann machine can become nontrivial. This problem was, to some extent, circumvented by introducing bounds on the quantum probabilities, allowing the authors to train the model efficiently by sampling. It is possible that a specific type of quantum Boltzmann machine has been trained in the D-Wave 2X by using a learning rule analogous to that of classical Boltzmann machines.\n\nQuantum annealing is not the only technology for sampling. In a prepare and measure scenario, a universal quantum computer prepares a thermal state, which is then sampled by measurements. This can reduce the time required to train a deep restricted Boltzmann machine, and provide a richer and more comprehensive framework for deep learning than classical computing. The same quantum methods also permit efficient training of full Boltzmann machines and multi-layer, fully connected models and do not have well-known classical counterparts. Relying on an efficient thermal state preparation protocol starting from an arbitrary state, quantum-enhanced Markov logic networks exploit the symmetries and the locality structure of the probabilistic graphical model generated by a first-order logic template. This provides an exponential reduction in computational complexity in probabilistic inference, and, while the protocol relies on a universal quantum computer, under mild assumptions it can be embedded on contemporary quantum annealing hardware.\n\nThere are quantum analogues or generalisations of classical neural nets which are known as quantum neural networks.\n\nQuantum learning theory pursues a mathematical analysis of the quantum generalizations of classical learning models and of the possible speed-ups or other improvements that they may provide. The framework is very similar to that of classical computational learning theory, but the learner in this case is a quantum information processing device, while the data may be either classical or quantum. Quantum learning theory should be contrasted with the quantum-enhanced machine learning discussed above, where the goal was to consider \"specific problems\" and to use quantum protocols to improve the time complexity of classical algorithms for these problems. Although quantum learning theory is still under development, partial results in this direction have been obtained.\n\nThe starting point in learning theory is typically a \"concept class\", a set of possible concepts. Usually a concept is a function on some domain, such as formula_4. For example, the concept class could be the set of disjunctive normal form (DNF) formulas on \"n\" bits or the set of Boolean circuits of some constant depth. The goal for the learner is to learn\n(exactly or approximately) an unknown \"target concept\" from this concept class. The learner may be actively interacting with the target concept, or passively receiving samples from it.\n\nIn active learning, a learner can make \"membership queries\" to the target concept \"c\", asking for its value \"c(x)\" on inputs \"x\" chosen by the learner. The learner then has to reconstruct the exact target concept, with high probability. In the model of \"quantum exact learning\", the learner can make membership queries in quantum superposition. If the complexity of the learner is measured by the number of membership queries it makes, then quantum exact learners can be polynomially more efficient than classical learners for some concept classes, but not more. If complexity is measured by the amount of \"time\"\nthe learner uses, then there are concept classes that can be learned efficiently by\nquantum learners but not by classical learners (under plausible complexity-theoretic assumptions).\n\nA natural model of passive learning is Valiant's probably approximately correct (PAC) learning. Here the learner receives random examples \"(x,c(x))\", where \"x\" is distributed according to some unknown distribution \"D\". The learner's goal is to output a hypothesis function \"h\" such that \"h(x)=c(x)\" with high probability when \"x\" is drawn according to \"D\". The learner has to be able to produce such an 'approximately correct' \"h\" for every \"D\" and every target concept \"c\" in its concept class.\nWe can consider replacing the random examples by potentially more powerful quantum examples formula_5. In the PAC model (and the related agnostic model), this doesn't significantly reduce the number of examples needed: for every concept class, classical and\nquantum sample complexity are the same up to constant factors. However, for learning under some\nfixed distribution \"D\", quantum examples can be very helpful, for example for learning DNF under\nthe uniform distribution. When considering \"time\" complexity, there exist concept classes that can be PAC-learned efficiently by quantum learners, even from classical examples, but not by classical learners (again, under plausible complexity-theoretic assumptions).\n\nThis passive learning type is also the most common scheme in supervised learning: a learning algorithm typically takes the training examples fixed, without the ability to query the label of unlabelled examples. Outputting a hypothesis \"h\" is a step of induction. Classically, an inductive model splits into a training and an application phase: the model parameters are estimated in the training phase, and the learned model is applied an arbitrary many times in the application phase. In the asymptotic limit of the number of applications, this splitting of phases is also present with quantum resources.\n\nThe term quantum machine learning is also used for approaches that apply classical methods of machine learning to the study of quantum systems. A prime example is the use of classical learning techniques to process large amounts of experimental data in order to characterize an unknown quantum system (for instance in the context of quantum information theory and for the development of quantum technologies), but there are also more exotic applications.\n\nThe ability to experimentally control and prepare increasingly complex quantum systems brings with it a growing need to turn large and noisy data sets into meaningful information. This is a problem that has already been studied extensively in the classical setting, and consequently, many existing machine learning techniques can be naturally adapted to more efficiently address experimentally relevant problems. For example, Bayesian methods and concepts of algorithmic learning can be fruitfully applied to tackle quantum state classification, Hamiltonian learning, and the characterization of an unknown unitary transformation. Other problems that have been addressed with this approach are given in the following list:\nHowever, the characterization of quantum states and processes is not the only application of classical machine learning techniques. Some additional applications include\n\nIn the most general case of quantum machine learning, both the learning device and the system under study, as well as their interaction, are fully quantum. This section gives a few examples of results on this topic.\n\nOne class of problem that can benefit from the fully quantum approach is that of 'learning' unknown quantum states, processes or measurements, in the sense that one can subsequently reproduce them on another quantum system. For example, one may wish to learn a measurement that discriminates between two coherent states, given not a classical description of the states to be discriminated, but instead a set of example quantum systems prepared in these states. The naive approach would be to first extract a classical description of the states and then implement an ideal discriminating measurement based on this information. This would only require classical learning. However, one can show that a fully quantum approach is strictly superior in this case. (This also relates to work on quantum pattern matching.) The problem of learning unitary transformations can be approached in a similar way.\n\nGoing beyond the specific problem of learning states and transformations, the task of clustering also admits a fully quantum version, wherein both the oracle which returns the distance between data-points and the information processing device which runs the algorithm are quantum. Finally, a general framework spanning supervised, unsupervised and reinforcement learning in the fully quantum setting was introduced in, where it was also shown that the possibility of probing the environment in superpositions permits a quantum speedup in reinforcement learning.\n\nThe earliest experiments were conducted using the adiabatic D-Wave quantum computer, for instance, to detect cars in digital images using regularized boosting with a nonconvex objective function in a demonstration in 2009. Many experiments followed on the same architecture, and leading tech companies have shown interest in the potential of quantum machine learning for future technological implementations. In 2013, Google Research, NASA, and the Universities Space Research Association launched the Quantum Artificial Intelligence Lab which explores the use of the adiabatic D-Wave quantum computer. A more recent example trained a probabilistic generative models with arbitrary pairwise connectivity, showing that their model is capable of generating handwritten digits as well as reconstructing noisy images of bars and stripes and handwritten digits.\n\nUsing a different annealing technology based on nuclear magnetic resonance (NMR), a quantum Hopfield network was implemented in 2009 that mapped the input data and memorized data to Hamiltonians, allowing the use of adiabatic quantum computation. NMR technology also enables universal quantum computing, and it was used for the first experimental implementation of a quantum support vector machine to distinguish hand written number ‘6’ and ‘9’ on a liquid-state quantum computer in 2015. The training data involved the pre-processing of the image which maps them to normalized 2-dimensional vectors to represent the images as the states of a qubit. The two entries of the vector are the vertical and horizontal ratio of the pixel intensity of the image. Once the vectors are defined on the feature space, the quantum support vector machine was implemented to classify the unknown input vector. The readout avoids costly quantum tomography by reading out the final state in terms of direction (up/down) of the NMR signal.\n\nPhotonic implementations are attracting more attention, not the least because they do not require extensive cooling. Simultaneous spoken digit and speaker recognition and chaotic time-series prediction were demonstrated at data rates beyond 1 gigabyte per second in 2013. Using non-linear photonics to implement an all-optical linear classifier, a perceptron model was capable of learning the classification boundary iteratively from training data through a feedback rule. A core building block in many learning algorithms is to calculate the distance between two vectors: this was first to experimentally demonstrated up to eight dimensions using entangled qubits in a photonic quantum computer in 2015.\n\nRecently, based on a neuromimetic approach, a novel ingredient has been added to the field of quantum machine learning, in the form of a so-called quantum memristor, a quantized model of the standard classical memristor. This device can be constructed by means of a tunable resistor, weak measurements on the system, and a classical feed-forward mechanism. An implementation of a quantum memristor in superconducting circuits has been proposed, and an experiment with quantum dots performed. A quantum memristor would implement nonlinear interactions in the quantum dynamics which would aid the search for a fully functional quantum neural network.\n\n", "id": "44108758", "title": "Quantum machine learning"}
{"url": "https://en.wikipedia.org/wiki?curid=44632031", "text": "M-Theory (learning framework)\n\nIn Machine Learning and Computer Vision, M-Theory is a learning framework inspired by feed-forward processing in the ventral stream of visual cortex and originally developed for recognition and classification of objects in visual scenes. M-Theory was later applied to other areas, such as speech recognition. On certain image recognition tasks, algorithms based on a specific instantiation of M-Theory, HMAX, achieved human-level performance.\n\nThe core principle of M-Theory is extracting representations invariant to various transformations of images (translation, scale, 2D and 3D rotation and others). In contrast with other approaches using invariant representations, in M-Theory they are not hardcoded into the algorithms, but learned. M-Theory also shares some principles with Compressed Sensing. The theory proposes multilayered hierarchical learning architecture, similar to that of visual cortex.\n\nA great challenge in visual recognition tasks is that the same object can be seen in a variety of conditions. It can be seen from different distances, different viewpoints, under different lighting, partially occluded, etc. In addition, for particular classes objects, such as faces, highly complex specific transformations may be relevant, such as changing facial expressions. For learning to recognize images, it is greatly beneficial to factor out these variations. It results in much simpler classification problem and, consequently, in great reduction of sample complexity of the model.\n\nA simple computational experiment illustrates this idea. Two instances of a classifier were trained to distinguish images of planes from those of cars. For training and testing of the first instance, images with arbitrary viewpoints were used. Another instance received only images seen from a particular viewpoint, which was equivalent to training and testing the system on invariant representation of the images. One can see that the second classifier performed quite well even after receiving a single example from each category, while performance of the first classifier was close to random guess even after seeing 20 examples.\n\nInvariant representations has been incorporated into several learning architectures, such as neocognitrons. Most of these architectures, however, provided invariance through custom-designed features or properties of architecture itself. While it helps to take into account some sorts of transformations, such as translations, it is very nontrivial to accommodate for other sorts of transformations, such as 3D rotations and changing facial expressions. M-Theory provides a framework of how such transformations can be learned. In addition to higher flexibility, this theory also suggests how human brain may have similar capabilities.\n\nAnother core idea of M-Theory is close in spirit to ideas from the field of compressed sensing. An implication from Johnson–Lindenstrauss lemma says that a particular number of images can be embedded into a low-dimensional feature space with the same distances between images by using random projections. This result suggests that dot product between the observed image and some other image stored in memory, called template, can be used as a feature helping to distinguish the image from other images. The template need not to be anyhow related to the image, it could be chosen randomly.\n\nThe two ideas outlined in previous sections can be brought together to construct a framework for learning invariant representations. The key observation is how dot product between image formula_1 and a template formula_2 behaves when image is transformed (by such transformations as translations, rotations, scales, etc.). If transformation formula_3 is a member of a unitary group of transformations, then the following holds:\n\nformula_4\n\nIn other words, the dot product of transformed image and a template is equal to the dot product of original image and inversely transformed template. For instance, for image rotated by 90 degrees, the inversely transformed template would be rotated by -90 degrees.\n\nConsider the set of dot products of an image formula_1 to all possible transformations of template: formula_6. If one applies a transformation formula_3 to formula_1, the set would become formula_9. But because of the property (1), this is equal to formula_10. The set formula_11 is equal to just the set of all elements in formula_12. To see this, note that every formula_13 is in formula_12 due to the closure property of groups, and for every formula_15 in G there exist its prototype formula_16 such as formula_17 (namely, formula_18). Thus, formula_19. One can see that the set of dot products remains the same despite that a transformation was applied to the image! This set by itself may serve as a (very cumbersome) invariant representation of an image. More practical representations can be derived from it.\n\nIn the introductory section, it was claimed that M-Theory allows to learn invariant representations. This is because templates and their transformed versions can be learned from visual experience - by exposing the system to sequences of transformations of objects. It is plausible that similar visual experiences occur in early period of human life, for instance when infants twiddle toys in their hands. Because templates may be totally unrelated to images that the system later will try to classify, memories of these visual experiences may serve as a basis for recognizing many different kinds of objects in later life. However, as it is shown later, for some kinds of transformations, specific templates are needed.\n\nTo implement the ideas described in previous sections, one need to know how to derive a computationally efficient invariant representation of an image. Such unique representation for each image can be characterized as it appears by a set of one-dimensional probability distributions (empirical distributions of the dot-products between image and a set of templates stored during unsupervised learning). These probability distributions in their turn can be described by either histograms or a set of statistical moments of it, as it will be shown below.\n\nOrbit formula_20 is a set of images formula_21 generated from a single image formula_1 under the action of the group formula_23.\n\nIn other words, images of an object and of its transformations correspond to a orbit formula_20. If two orbits have a point in common they are identical everywhere, i.e. an orbit is an invariant and unique representation of an image. So, two images are called equivalent when they belong to the same orbit: formula_25 if formula_26 such that formula_27. Conversely, two orbits are different if none of the images in one orbit coincide with any image in the other.\n\nA natural question arises: how can one compare two orbits? There are several possible approaches. One of them employs the fact that intuitively two empirical orbits are the same irrespective of the ordering of their points. Thus, one can consider a probability distribution formula_28 induced by the group’s action on images formula_1 (formula_21 can be seen as a realization of a random variable).\nThis probability distribution formula_28 can be almost uniquely characterized by formula_32 one-dimensional probability distributions formula_33 induced by the (one-dimensional) results of projections formula_34, where formula_35 are a set of templates (randomly chosen images) (based on the Cramer-Wold theorem and concentration of measures).\nConsider formula_36 images formula_37. Let formula_38 , where formula_39 is a universal constant. Then\n\nformula_40\n\nwith probability formula_41, for all formula_42 formula_43 formula_44.\nThis result (informally) says that an approximately invariant and unique representation of an image formula_1 can be obtained from the estimates of formula_32 1-D probability distributions formula_47 for formula_48. The number formula_32 of projections needed to discriminate formula_36 orbits, induced by formula_36 images, up to precision formula_52 (and with confidence formula_41) is formula_38, where formula_39 is a universal constant.\nTo classify an image, the following “recipe” can be used:\n\nEstimates of such one-dimensional probability density functions (PDFs) formula_33 can be written in terms of histograms as formula_57, where formula_58 is a set of nonlinear functions. These 1-D probability distributions can be characterized with N-bin histograms or set of statistical moments. For example, HMAX represents an architecture in which pooling is done with a max operation.\n\nIn the \"recipe\" for image classification, groups of transformations are approximated with finite number of transformations. Such approximation is possible only when the group is compact.\n\nSuch groups as all translations and all scalings of the image are not compact, as they allow arbitrarily big transformations. However, they are locally compact. For locally compact groups, invariance is achievable within certain range of transformations.\n\nAssume that formula_59 is a subset of transformations from formula_12 for which the transformed patterns exist in memory. For an image formula_1 and template formula_62, assume that formula_63 is equal to zero everywhere except some subset of formula_59. This subset is called support of formula_63 and denoted as formula_66. It can be proven that if for a transformation formula_16, support set will also lie within formula_68, then signature of formula_1 is invariant with respect to formula_16. This theorem determines the range of transformations for which invariance is guaranteed to hold.\n\nOne can see that the smaller is formula_66, the larger is the range of transformations for which invariance is guaranteed to hold. It means that for a group that is only locally compact, not all templates would work equally well anymore. Preferable templates are those with a reasonably small formula_72 for a generic image. This property is called localization: templates are sensitive only to images within a small range of transformations. Note that although minimizing formula_72 is not absolutely necessary for the system to work, it improves approximation of invariance. Requiring localization simultaneously for translation and scale yields a very specific kind of templates: Gabor functions.\n\nThe desirability of custom templates for non-compact group is in conflict with the principle of learning invariant representations. However, for certain kinds of regularly encountered image transformations, templates might be the result of evolutionary adaptations. Neurobiological data suggests that there is Gabor-like tuning in the first layer of visual cortex. The optimality of Gabor templates for translations and scales is a possible explanation of this phenomenon.\n\nMany interesting transformations of images do not form groups. For instance, transformations of images associated with 3D rotation of corresponding 3D object do not form a group, because it is impossible to define an inverse transformation (two objects may looks the same from one angle but different from another angle). However, approximate invariance is still achievable even for non-group transformations, if localization condition for templates holds and transformation can be locally linearized.\n\nAs it was said in the previous section, for specific case of translations and scaling, localization condition can be satisfied by use of generic Gabor templates. However, for general case (non-group) transformation, localization condition can be satisfied only for specific class of objects. More specifically, in order to satisfy the condition, templates must be similar to the objects one would like to recognize. For instance, if one would like to build a system to recognize 3D rotated faces, one need to use other 3D rotated faces as templates. This may explain the existence of such specialized modules in the brain as one responsible for face recognition. Even with custom templates, a noise-like encoding of images and templates is necessary for localization. It can be naturally achieved if the non-group transformation is processed on any layer other than the first in hierarchical recognition architecture.\n\nThe previous section suggests one motivation for hierarchical image recognition architectures. However, they have other benefits as well.\n\nFirstly, hierarchical architectures best accomplish the goal of ‘parsing’ a complex visual scene with many objects consisting of many parts, whose relative position may greatly vary. In this case, different elements of the system must react to different objects and parts. In hierarchical architectures, representations of parts at different levels of embedding hierarchy can be stored at different layers of hierarchy.\n\nSecondly, hierarchical architectures which have invariant representations for parts of objects may facilitate learning of complex compositional concepts. This facilitation may happen through reusing of learned representations of parts that were constructed before in process of learning of other concepts. As a result, sample complexity of learning compositional concepts may be greatly reduced.\n\nFinally, hierarchical architectures have better tolerance to clutter. Clutter problem arises when the target object is in front of a non-uniform background, which functions as a distractor for the visual task. Hierarchical architecture provides signatures for parts of target objects, which do not include parts of background and are not affected by background variations.\n\nIn hierarchical architectures, one layer is not necessarily invariant to all transformations that are handled by the hierarchy as a whole. Some transformations may pass through that layer to upper layers, as in the case of non-group transformations described in the previous section. For other transformations, an element of the layer may produce invariant representations only within small range of transformations. For instance, elements of the lower layers in hierarchy have small visual field and thus can handle only a small range of translation. For such transformations, the layer should provide \"covariant\" rather than invariant, signatures. The property of covariance can be written as formula_74, where formula_75 is a layer, formula_76 is the signature of image on that layer, and formula_77 stands for \"distribution of values of the expression for all formula_78\".\n\nM-theory is based on a quantitative theory of the ventral stream of visual cortex. Understanding how visual cortex works in object recognition is still a challenging task for neuroscience. Humans and primates are able to memorize and recognize objects after seeing just couple of examples unlike any state-of-the art machine vision systems that usually require a lot of data in order to recognize objects. Prior to the use of visual neuroscience in computer vision has been limited to early vision for deriving stereo algorithms (e.g.,) and to justify the use of DoG (derivative-of-Gaussian) filters and more recently of Gabor filters. No real attention has been given to biologically plausible features of higher complexity. While mainstream computer vision has always been inspired and challenged by human vision, it seems to have never advanced past the very first stages of processing in the simple cells in V1 and V2. Although some of the systems inspired - to various degrees - by neuroscience, have been tested on at least some natural images, neurobiological models of object recognition in cortex have not yet been extended to deal with real-world image databases.\n\nM-theory learning framework employs a novel hypothesis about the main computational function of the ventral stream: the representation of new objects/images in terms of a signature, which is invariant to transformations learned during visual experience. This allows recognition from very few labeled examples - in the limit, just one.\n\nNeuroscience suggests that natural functionals for a neuron to compute is a high-dimensional dot product between an “image patch” and another image patch (called template) \nwhich is stored in terms of synaptic weights (synapses per neuron). The standard computational model of a neuron is based on a dot product and a threshold. Another important feature of the visual cortex is that it consists of simple and complex cells. This idea was originally proposed by Hubel and Wiesel. M-theory employs this idea. Simple cells compute dot products of an image and transformations of templates formula_79 for formula_80 (formula_81 is a number of simple cells). Complex cells are responsible for pooling and computing empirical histograms or statistical moments of it. The following formula for constructing histogram can be computed by neurons:\n\nformula_82\n\nwhere formula_83 is a smooth version of step function, formula_84 is the width of a histogram bin, and formula_36 is the number of the bin.\n\nIn authors applied M-theory to unconstrained face recognition in natural photographs. Unlike the DAR (detection, alignment, and recognition) method, which handles clutter by detecting objects and cropping closely around them so that very little background remains, this approach accomplishes detection and alignment implicitly by storing transformations of training images (templates) rather than explicitly detecting and aligning or cropping faces at test time. This system is built according to the principles of a recent theory of invariance in hierarchical networks and can evade the clutter problem generally problematic for feedforward systems. \nThe resulting end-to-end system achieves a drastic improvement in the state of the art on this end-to-end task, reaching the same level of performance as the best systems operating on aligned, closely cropped images (no outside training data). It also performs well on two newer datasets, similar to LFW, but more difficult: significantly jittered (misaligned) version of LFW and SUFR-W (for example, the model’s accuracy in the LFW “unaligned & no outside data used” category is 87.55±1.41% compared to state-of-the-art APEM (adaptive probabilistic elastic matching): 81.70±1.78%).\n\nThe theory was also applied to a range of recognition tasks: from invariant single object recognition in clutter to multiclass categorization problems on publicly available data sets (CalTech5, CalTech101, MIT-CBCL) and complex (street) scene understanding tasks that requires the recognition of both shape-based as well as texture-based objects (on StreetScenes data set). The approach performs really well: It has the capability of learning from only a few training examples and was shown to outperform several more complex state-of-the-art systems constellation models, the hierarchical SVM-based face- detection system). A key element in the approach is a new set of scale and position-tolerant feature detectors, which are biologically plausible and agree quantitatively with the tuning properties of cells along the ventral stream of visual cortex. These features are adaptive to the training set, though we also show that a universal feature set, learned from a set of natural images unrelated to any categorization task, likewise achieves good performance.\n\nThis theory can also be extended for the speech recognition domain.\nAs an example, in an extension of a theory for unsupervised learning of invariant visual representations to the auditory domain and empirically evaluated its validity for voiced speech sound classification was proposed. Authors empirically demonstrated that a single-layer, phone-level representation, extracted from base speech features, improves segment classification accuracy and decreases the number of training examples in comparison with standard spectral and cepstral features for an acoustic classification task on TIMIT dataset.\n", "id": "44632031", "title": "M-Theory (learning framework)"}
{"url": "https://en.wikipedia.org/wiki?curid=470314", "text": "Instantaneously trained neural networks\n\nInstantaneously trained neural networks are feedforward artificial neural networks proposed by Subhash Kak that create a new hidden neuron node for each novel training sample. The weights to this hidden neuron separate out not only this training sample but others that are near it, thus providing generalization. This separation is done using the nearest hyperplane that can be written down instantaneously. In the two most important implementations the neighborhood of generalization either varies with the training sample (CC1 network) or remains constant (CC4 network) These networks use unary coding for an effective representation of the data sets.\n\nInstantaneously trained neural networks have been proposed as models of short term learning and used in web search, and financial time series prediction applications. They have also been used in instant classification of documents and for deep learning and data mining.\n\nAs in other neural networks, their normal use is as software, but they have also been implemented in hardware using FPGAs and by optical implementation.\n\nIn the CC4 network, which is a three-stage network, the number of input nodes is one more than the size of the training vector, with the extra node serving as the biasing node whose input is always 1. For binary input vectors, the weights from the input nodes to the hidden neuron (say of index j) corresponding to the trained vector is given by the following formula:\n\nwhere formula_2 is the radius of generalization and formula_3 is the Hamming weight (the number of 1s) of the binary sequence. From the hidden layer to the output layer the weights are 1 or -1 depending on whether the vector belongs to a given output class or not. The neurons in the hidden and output layers output 1 if the weighted sum to the input is 0 or positive and 0, if the weighted sum to the input is negative:\n\nThe CC4 network has also been modified to include non-binary input with varying radii of generalization so that it effectively provides a CC1 implementation.\n\nIn feedback networks the Willshaw network as well as the Hopfield network are able to learn instantaneously.\n", "id": "470314", "title": "Instantaneously trained neural networks"}
{"url": "https://en.wikipedia.org/wiki?curid=45049676", "text": "Adversarial machine learning\n\nAdversarial machine learning is a research field that lies at the intersection of machine learning and computer security. It aims to enable the safe adoption of machine learning techniques in adversarial settings like spam filtering, malware detection and biometric recognition.\n\nThe problem arises from the fact that machine learning techniques were originally designed for stationary environments in which the training and test data are assumed to be generated from the same (although possibly unknown) distribution. In the presence of intelligent and adaptive adversaries, however, this working hypothesis is likely to be violated to at least some degree (depending on the adversary). In fact, a malicious adversary can carefully manipulate the input data exploiting specific vulnerabilities of learning algorithms to compromise the whole system security.\n\nExamples include: attacks in spam filtering, where spam messages are obfuscated through misspelling of bad words or insertion of good words; attacks in computer security, e.g., to obfuscate malware code within network packets or mislead signature detection; attacks in biometric recognition, where fake biometric traits may be exploited to impersonate a legitimate user (biometric spoofing) or to compromise users’ template galleries that are adaptively updated over time.\n\nTo understand the security properties of learning algorithms in adversarial settings, one should address the following main issues:\n\nThis process amounts to simulating a proactive arms race (instead of a reactive one, as depicted in Figures 1 and 2), where system designers try to anticipate the adversary in order to understand whether there are potential vulnerabilities that should be fixed in advance; for instance, by means of specific countermeasures such as additional features or different learning algorithms. However proactive approaches are not necessarily superior to reactive ones. For instance, in, the authors showed that under some circumstances, reactive approaches are more suitable for improving system security.\nThe first step of the above-sketched arms race is identifying potential attacks against machine learning algorithms. A substantial amount of work has been done in this direction.\n\nAttacks against (supervised) machine learning algorithms have been categorized along three primary axes: their \"influence\" on the classifier, the \"security violation\" they cause, and their \"specificity\".\n\n\nThis taxonomy has been extended into a more comprehensive threat model that allows one to make explicit assumptions on the adversary’s goal, knowledge of the attacked system, capability of manipulating the input data and/or the system components, and on the corresponding (potentially, formally-defined) attack strategy. Details can be found here. Two of the main attack scenarios identified according to this threat model are sketched below.\n\nEvasion attacks are the most prevalent type of attack that may be encountered in adversarial settings during system operation. For instance, spammers and hackers often attempt to evade detection by obfuscating the content of spam emails and malware code. In the evasion setting, malicious samples are modified at test time to evade detection; that is, to be misclassified as legitimate. No influence over the training data is assumed.\nA clear example of evasion is image-based spam in which the spam content is embedded within an attached image to evade the textual analysis performed by anti-spam filters.\nAnother example of evasion is given by spoofing attacks against biometric verification systems.\n\nMachine learning algorithms are often re-trained on data collected during operation to adapt to changes in the underlying data distribution. For instance, intrusion detection systems (IDSs) are often re-trained on a set of samples collected during network operation. Within this scenario, an attacker may poison the training data by injecting carefully designed samples to eventually compromise the whole learning process. Poisoning may thus be regarded as an adversarial contamination of the training data. Examples of poisoning attacks against machine learning algorithms (including learning in the presence of worst-case adversarial label flips in the training data) can be found in.\n\nClustering algorithms have been increasingly adopted in security applications to find dangerous or illicit activities. For instance, clustering of malware and computer viruses aims to identify and categorize different existing malware families, and to generate specific signatures for their detection by anti-viruses, or signature-based intrusion detection systems like Snort.\nHowever, clustering algorithms have not been originally devised to deal with deliberate attack attempts that are designed to subvert the clustering process itself. Whether clustering can be safely adopted in such settings thus remains questionable. Preliminary work reporting some vulnerability of clustering can be found in.\n\nA number of defense mechanisms against evasion, poisoning and privacy attacks have been proposed in the field of adversarial machine learning, including:\n\n\nSome software libraries are available, mainly for testing purposes and research.\n\n\n", "id": "45049676", "title": "Adversarial machine learning"}
{"url": "https://en.wikipedia.org/wiki?curid=45390860", "text": "Domain adaptation\n\nDomain Adaptation is a field associated with machine learning and transfer learning. \nThis scenario arises when we aim at learning from a source data distribution a well performing model on a different (but related) target data distribution. For instance, one of the tasks of the common spam filtering problem consists in adapting a model from one user (the source distribution) to a new one who receives significantly different emails (the target distribution).\nNote that, when more than one source distribution is available the problem is referred to as multi-source domain adaptation.\n\nLet formula_1 be the input space (or description space) and let formula_2 be the output space (or label space). The objective of a machine learning algorithm is to learn a mathematical model (a hypothesis) formula_3 able to affect a label of formula_2 to an example from formula_1. This model is learned from a learning sample formula_6. \n\nUsually in supervised learning (without domain adaptation), we suppose that the examples formula_7 are drawn i.i.d. from a distribution formula_8 of support formula_9 (unknown and fixed). The objective is then to learn formula_10 (from formula_11) such that it commits the least error as possible for labelling new examples coming from the distribution formula_8.\n\nThe main difference between supervised learning and domain adaptation is that in the latter situation we study two different (but related) distributions formula_8 and formula_14 on formula_9. The domain adaptation task then consists of the transfer of knowledge from the source domain formula_8 to the target one formula_14. The goal is then to learn formula_10 (from labeled or unlabelled samples coming from the two domains) such that it commits as little error as possible on the target domain formula_14.\n\nThe major issue is the following: if a model is learned from a source domain, what is its capacity to correctly label data coming from the target domain?\n\nThere are several contexts of domain adaptation. They differ in the informations considered for the target task.\n\nThe objective is to reweight the source labeled sample such that it \"looks like\" the target sample (in term of the error measure considered)\n\nA method for adapting consists in iteratively \"auto-labeling\" the target examples. The principle is simple:\nNote that there exists other iterative approaches, but they usually need target labeled examples.\n\nThe goal is to find or construct a common representation space for the two domains. The objective is to obtain a space in which the domains are close to each other while keeping good performances on the source labeling task.\nThis can be achieved through the use of Adversarial machine learning techniques where feature representations from samples in different domains are encouraged to be indistinguishable .\n", "id": "45390860", "title": "Domain adaptation"}
{"url": "https://en.wikipedia.org/wiki?curid=45378845", "text": "Logic learning machine\n\nLogic Learning Machine (LLM) is a machine learning method based on the generation of intelligible rules. LLM is an efficient implementation of the Switching Neural Network (SNN) paradigm, developed by Marco Muselli, Senior Researcher at the Italian National Research Council CNR-IEIIT in Genoa.\nLogic Learning Machine is implemented in the Rulex suite.\n\nLLM has been employed in different fields, including orthopaedic patient classification, DNA microarray analysis and Clinical Decision Support System.\n\nThe Switching Neural Network approach was developed in the 1990s to overcome the drawbacks of the most commonly used machine learning methods. In particular, black box methods, such as multilayer perceptron and support vector machine, had good accuracy but could not provide deep insight into the studied phenomenon. On the other hand, decision trees were able to describe the phenomenon but often lacked accuracy. Switching Neural Networks made use of Boolean algebra to build sets of intelligible rules able to obtain very good performance. In 2014, an efficient version of Switching Neural Network was developed and implemented in the Rulex suite with the name Logic Learning Machine. Also a LLM version devoted to regression problems was developed.\n\nLike other machine learning methods, LLM uses data to build a model able to perform a good forecast about future behaviors. LLM starts from a table including a target variable (output) and some inputs and generates a set of rules that return the output value formula_1 corresponding to a given configuration of inputs. A rule is written in the form:\n\nwhere \"consequence\" contains the output value whereas \"premise\" includes one or more conditions on the inputs. According to the input type, conditions can have different forms:\n\nA possible rule is therefore in the form\n\nAccording to the output type, different versions of Logic Learning Machine have been developed:\n\n", "id": "45378845", "title": "Logic learning machine"}
{"url": "https://en.wikipedia.org/wiki?curid=45627703", "text": "Native-language identification\n\nNative-language identification (NLI) is the task of determining an author's native language (L1) based only on their writings in a second language (L2).\nNLI works through identifying language-usage patterns that are common to specific L1 groups and then applying this knowledge to predict the native language of previously unseen texts.\nThis is motivated in part by applications in second-language acquisition, language teaching and forensic linguistics, amongst others.\n\nNLI works under the assumption that an author's L1 will dispose them towards particular language production patterns in their L2, as influenced by their native language. This relates to cross-linguistic influence (CLI), a key topic in the field of second-language acquisition (SLA) that analyzes transfer effects from the L1 on later learned languages.\n\nUsing large-scale English data, NLI methods achieve over 80% accuracy in predicting the native language of texts written by authors from 11 different L1 backgrounds. This can be compared to a baseline of 9% for choosing randomly.\n\nThis identification of L1-specific features has been used to study language transfer effects in second-language acquisition. This is useful for developing pedagogical material, teaching methods, L1-specific instructions and generating learner feedback that is tailored to their native language.\n\nNLI methods can also be applied in forensic linguistics as a method of performing authorship profiling in order to infer the attributes of an author, including their linguistic background.\nThis is particularly useful in situations where a text, e.g. an anonymous letter, is the key piece of evidence in an investigation and clues about the native language of a writer can help investigators in identifying the source.\nThis has already attracted interest and funding from intelligence agencies.\n\nNatural language processing methods are used to extract and identify language usage patterns common to speakers of an L1-group. This is done using language learner data, usually from a learner corpus. Next, machine learning is applied to train classifiers, like support vector machines, for predicting the L1 of unseen texts.\nA range of ensemble based systems have also been applied to the task and shown to improve performance over single classifier systems.\n\nVarious linguistic feature types have been applied for this task. These include syntactic features such as constituent parses, grammatical dependencies and part-of-speech tags.\nSurface level lexical features such as character, word and lemma n-grams have also been found to be quite useful for this task. However, it seems that character n-grams are the single best feature for the task.\n\nThe Building Educational Applications (BEA) workshop at NAACL 2013 hosted the inaugural NLI shared task. The competition resulted in 29 entries from teams across the globe, 24 of which also published a paper describing their systems and approaches.\n", "id": "45627703", "title": "Native-language identification"}
{"url": "https://en.wikipedia.org/wiki?curid=28255458", "text": "Constrained conditional model\n\nA constrained conditional model (CCM) is a machine learning and inference framework that augments the learning of conditional (probabilistic or discriminative) models with declarative constraints. The constraint can be used as a way to incorporate expressive prior knowledge into the model and bias the assignments made by the learned model to satisfy these constraints. The framework can be used to support decisions in an expressive output space while maintaining modularity and tractability of training and inference.\n\nModels of this kind have recently attracted much attention within the natural language processing (NLP) community.\nFormulating problems as constrained optimization problems over the output of learned models has several advantages. It allows one to focus on the modeling of problems by providing the opportunity to incorporate domain-specific knowledge as global constraints using a first order language. Using this declarative framework frees the developer from low level feature engineering while capturing the problem's domain-specific properties and guarantying exact inference. From a machine learning perspective it allows decoupling the stage of model generation (learning) from that of the constrained inference stage, thus helping to simplify the learning stage while improving the quality of the solutions. For example, in the case of generating compressed sentences, rather than simply relying on a language model to retain the most commonly used n-grams in the sentence, constraints can be used to ensure that if a modifier is kept in the compressed sentence, its subject will also be kept.\n\nMaking decisions in many domains (such as natural language processing and computer vision problems) often involves assigning values to sets of interdependent variables where the expressive dependency structure can influence, or even dictate, what assignments are possible. These settings are applicable not only to Structured Learning problems such as semantic role labeling, but also for cases that require making use of multiple pre-learned components, such as summarization, textual entailment and question answering. In all these cases, it is natural to formulate the decision problem as a constrained optimization problem, with an objective function that is composed of learned models, subject to domain- or problem-specific constraints.\n\nConstrained conditional models form a learning and inference framework that augments the learning of conditional (probabilistic or discriminative) models with declarative constraints (written, for example, using a first-order representation) as a way to support decisions in an expressive output space while maintaining modularity and tractability of training and inference. These constraints can express either hard restrictions, completely prohibiting some assignments, or soft restrictions, penalizing unlikely assignments. In most applications of this framework in NLP, following, Integer Linear Programming (ILP) was used as the inference framework, although other algorithms can be used for that purpose.\n\nGiven a set of feature functions formula_1 and a set of constraints formula_2, defined over an input structure formula_3 and an output structure formula_4, a constraint conditional model is characterized by two weight vectors, w and formula_5, and is defined as the solution to the following optimization problem:\nEach constraint formula_7 is a boolean mapping indicating if the joint assignment formula_8 violates a constraint, and formula_5 is the penalty incurred for violating the constraints. Constraints assigned an infinite penalty are known as hard constraints, and represent unfeasible assignments to the optimization problem.\n\nThe objective function used by CCMs can be decomposed and learned in several ways, ranging from a complete joint training of the model along with the constraints to completely decoupling the learning and the inference stage. In the latter case, several local models are learned independently and the dependency between these models is considered only at decision time via a global decision process. The advantages of each approach are discussed in which studies the two training paradigms: (1) local models: L+I (learning + inference) and (2) global model: IBT (Inference based training), and shows both theoretically and experimentally that while IBT (joint training) is best in the limit, under some conditions (basically, ”good” components) L+I can generalize better.\n\nThe ability of CCM to combine local models is especially beneficial in cases where joint learning is computationally intractable or when training data are not available for joint learning. This flexibility distinguishes CCM from the other learning frameworks that also combine statistical information with declarative constraints, such as Markov logic network, that emphasize joint training.\n\nCCM can help reduce supervision by using domain knowledge (expressed as constraints) to drive learning. These settings were studied in \n(CODL) and show that by incorporating domain knowledge the performance of the learned model improves significantly.\n\nCCMs have also been applied to latent learning frameworks, where the learning problem is defined over a latent representation layer. Since the notion of a \"correct representation\" is inherently ill-defined, no gold-standard labeled data regarding the representation decision is available to the learner. Identifying the correct (or optimal) learning representation is viewed as a structured prediction process and therefore modeled as a CCM. \nThis problem was covered in several papers, in both supervised and unsupervised settings. In all cases research showed that explicitly modeling the interdependencies between representation decisions via constraints results in an improved performance.\n\nThe advantages of the CCM declarative formulation and the availability of off-the-shelf solvers have led to a large variety of natural language processing tasks being formulated within the framework, including semantic role labeling, syntactic parsing, coreference resolution, summarization, transliteration, natural language generation and joint information extraction.\n\nMost of these works use an integer linear programming (ILP) solver to solve the decision problem. Although theoretically solving an Integer Linear Program is exponential in the size of the decision problem, in practice using state-of-the-art solvers and approximate inference techniques large scale problems can be solved efficiently.\n\nThe key advantage of using an ILP solver for solving the optimization problem defined by a constrained conditional model is the declarative formulation used as input for the ILP solver, consisting of a linear objective function and a set of linear constraints.\n\n\n", "id": "28255458", "title": "Constrained conditional model"}
{"url": "https://en.wikipedia.org/wiki?curid=46207323", "text": "Feature engineering\n\nFeature engineering is the process of using domain knowledge of the data to create features that make machine learning algorithms work. Feature engineering is fundamental to the application of machine learning, and is both difficult and expensive. The need for manual feature engineering can be obviated by automated feature learning.\n\nFeature engineering is an informal topic, but it is considered essential in applied machine learning.\n\nA feature is an attribute or property shared by all of the independent units on which analysis or prediction is to be done. Any attribute could be a feature, as long as it is useful to the model.\n\nThe purpose of a feature, other than being an attribute, would be much easier to understand in the context of a problem. A feature is a characteristic that might help when solving the problem.\n\nThe features in your data are important to the predictive models you use and will influence the results you are going to achieve. The quality and quantity of the features will have great influence on whether the model is good or not.\n\nYou could say the better the features are, the better the result is. This isn't entirely true, because the results achieved also depend on the model and the data, not just the chosen features. That said, choosing the right features is still very important. Better features can produce simpler and more flexible models, and they often yield better results.\n\n\nDepending on a feature it could be strongly relevant (has information that doesn't exist in any other feature), relevant, weakly relevant (some information that other features include) or irrelevant. It is important to create a lot of features. Even if some of them are irrelevant, you can't afford missing the rest. Afterwards, feature selection can be used in order to prevent overfitting.\n\nFeature explosion can be caused by feature combination or feature templates, both leading to a quick growth in the total number of features.\nThere are a few solutions to help stop feature explosion such as: regularization, kernel method, feature selection.\n\nAutomation of feature engineering has become an emerging topic of research in academia. In 2015, researchers at MIT presented the Deep Feature Synthesis algorithm and demonstrated its effectiveness in online data science competitions where it beat 615 of 906 human teams. Deep Feature Synthesis is available as an open source library called Featuretools. That work was followed by other researchers including IBM's OneBM and Berkeley's ExploreKit. The researchers at IBM state that feature engineering automation \"helps data scientists reduce data exploration time allowing them to try and error many ideas in short time. On the other hand, it enables non-experts, who are not familiar with data science, to quickly extract value from their data with a little effort, time and cost.\"\n\n", "id": "46207323", "title": "Feature engineering"}
{"url": "https://en.wikipedia.org/wiki?curid=313845", "text": "Formal concept analysis\n\nFormal concept analysis (FCA) is a of deriving a \"concept hierarchy\" or formal from a collection of and their . Each concept in the hierarchy represents the objects sharing some set of properties; and each sub-concept in the hierarchy represents a of the objects (as well as a superset of the properties) in the concepts above it. The term was introduced by in 1980, and builds on the mathematical theory of and that was developed by and others in the 1930s.\n\nFormal concept analysis finds practical application in fields including , , , , , , and .\n\nThe original motivation of formal concept analysis was the search for real-world meaning of mathematical order theory. One such possibility of very general nature is that data tables can be transformed into algebraic structures called \"complete lattices\", and that these can be utilized for data visualization and interpretation. Data tables that represent between objects and attributes, thus tabulating pairs of the form \"object \"g\" has attribute \"m\",\" are considered as the basic data type and are referred to as \"formal contexts\". In this theory, a \"formal concept\" is defined to be a pair (\"A\", \"B\"), where \"A\" is a set of objects (called the \"extent\") and \"B\" is a set of attributes (the \"intent\") such that\n\n\nIn this way, formal concept analysis formalizes the notions of and .\n\nThe formal concepts of any formal context can—as explained below—be in a hierarchy called more formally the context's \"concept lattice.\" The concept lattice can be graphically visualized as a \"line diagram\", which then may be helpful for understanding the data. Often however these lattices get too large for visualization. Then the mathematical theory of formal concept analysis may be helpful, e.g., for decomposing the lattice into smaller pieces without information loss, or for embedding it into another structure which is easier to interpret. \n\nThe theory in its present form goes back to the early 1980s and a research group led by , Bernhard Ganter and Peter Burmeister at the . Its basic mathematical definitions, however, were already introduced in the 1930s by as part of general lattice theory. Other previous approaches to the same idea arose from various French research groups, but the Darmstadt group normalised the field and systematically worked out both its mathematical theory and its philosophical foundations. The latter refer in particular to , but also to the .\n\nIn his article \"Restructuring Lattice Theory\" \n(1982) initiating formal concept analysis as a mathematical discipline, Wille starts from a discontent with the current lattice theory and pure mathematics in general: The production of theoretical results - often achieved by \"elaborate mental gymnastics\" - were impressive, but the connections between neighboring domains, even parts of a theory were getting weaker.\n\nThis aim traces back to the educationalist Hartmut von Hentig, who in 1972 pleaded for restructuring sciences in view of better teaching and in order to make sciences mutually available and more generally (i.e. also without specialized knowledge) critiqueable. Hence, by its origins formal concept analysis aims at interdisciplinarity and democratic control of research.\n\nIt corrects the starting point of lattice theory during the development of formal logic in the 19th century. Then - and later in model theory - a concept as unary predicate had been reduced to its extent. Now again, the philosophy of concepts should become less abstract by considering the intent. Hence, formal concept analysis is oriented towards the categories extension and intension of linguistics and classical conceptual logic.\n\nFormal Concept Analysis aims at the clarity of concepts according to Charles S. Peirce's pragmatic maxim by unfolding observable, elementary properties of the subsumed objects. In his late philosophy, Peirce assumed that logical thinking aims at perceiving reality, by the triade concept, judgement and conclusion. Mathematics is an abstraction of logic, develops patterns of possible realities and therefore may support rational communication. On this background, Wille defines:\n\nThe data in the example is taken from a semantic field study, where different kinds of bodies of water were systematically categorized by their attributes. For the purpose here it has been simplified.\n\nThe data table represents a \"formal context\", the \"line diagram\" next to it shows its \"concept lattice\". Formal definitions follow below.\n  \n\nThe above line diagram consists of circles, connecting line segments, and labels. Circles represent \"formal concepts\". The lines allow to read off the subconcept-superconcept hierarchy. Each object and attribute name is used as a label\nexactly once in the diagram, with objects below and attributes above concept circles. This is done in a way that an attribute can be reached from an object via an ascending path if and only if the object has the attribute.\n\nIn the diagram shown, e.g. the item \"reservoir\" has the attributes \"stagnant\" and \"constant\", but not the attributes \"temporary, running, natural, maritime\". Accordingly, \"puddle\" has exactly the characteristics \"temporary, stagnant\" and \"natural\".\n\nThe original formal context can be reconstructed from the labelled diagram, as well as the formal concepts. The extent of a concept consists of those objects from which an ascending path leads to the circle representing the concept. The intent consists of those attributes to which there is an ascending path from that concept circle (in the diagram). \nIn this diagram the concept immediately to the left of the label \"reservoir\" has the intent \"stagnant\" and \"natural\" and the extent \"puddle, maar, lake, pond, tarn, pool, lagoon,\" and \"sea\".\n\nA formal context is a triple \"K\" = (\"G\", \"M\", \"I\"), where \"G\" is a set of \"objects\", \"M\" is a set of \"attributes\", and \"I\" ⊆ \"G\" × \"M\" is a binary relation called \"incidence\" that expresses which objects \"have\" which attributes.\n. For subsets \"A\" ⊆ \"G\" of objects and a subsets \"B\" ⊆ \"M\" of attributes, one defines two \"derivation operators\" as follows:\n\n\"A\"' = {\"m\" ∈ \"M\" | ∀ \"g\" ∈ \"A\", \"gIm\"}, and dually\n\n\"B\"' = {\"g\" ∈ \"G\" | ∀ \"m\" ∈ \"B\", \"gIm\"}.\n\nApplying either derivation operator and then the other constitutes two :\n\n\"A\"   ↦  \"A\"\" = (\"A\"')'   for \"A\" ⊆ G   (extent closure), and\n\n\"B\"   ↦  \"B\"\" = (\"B\"')'   for \"B\" ⊆ M   (intent closure).\n\nThe derivation operators define a between sets of objects and of attributes. This is why in\nFrench a concept lattice is sometimes called a \"trellis de Galois\" (Galois lattice).\n\nWith these derivation operators, it is possible to restate the definition of the term \"formal concept\" more rigorously:\na pair (\"A\",\"B\") is a \"formal concept\" of a context (\"G\", \"M\", \"I\") provided that:\n\n\"A\" ⊆ \"G\",   \"B\" ⊆ \"M\",   \"A\"′ = \"B\",   and  \"B\"′ = \"A\".\n\nEquivalently and more intuitively, (\"A\",\"B\") is a formal concept precisely when:\n\nFor computing purposes, a formal context may be naturally represented as a 0-1- \"K\" in which the rows correspond to the objects, the columns correspond to the attributes, and each entry \"k\" equals to 1 if \"object \"i\" has attribute \"j\".\" In this matrix representation, each formal concept corresponds to a submatrix (not necessarily contiguous) all of whose elements equal 1. It is however misleading to consider a formal context as \"boolean\", because the negated incidence (\"object \"g\" does not have attribute \"m\"\") is not concept forming in the same way as defined above. For this reason, the values TRUE and FALSE are usually avoided when representing formal contexts, and a symbol like formula_1 is used to express incidence.\n\nThe concepts (\"A\", \"B\") of a context \"K\" can be by the inclusion of extents, or, equivalently, by the dual inclusion of intents. An order ≤ on the concepts is defined as follows: for any two concepts (\"A\", \"B\") and (\"A\", \"B\") of \"K\", we say that (\"A\", \"B\") ≤ (\"A\", \"B\") precisely when \"A\" ⊆ \"A\". Equivalently, (\"A\", \"B\") ≤ (\"A\", \"B\") whenever \"B\" ⊇ \"B\".\n\nIn this order, every set of formal concepts has a , or meet. Its extent consists of those objects that are common to all extents of the set. , every set of formal concepts has a \"least common superconcept\", the intent of which comprises all attributes which all objects of that set of concepts have.\n\nThese meet and join operations satisfy the axioms defining a , in fact a . Conversely, it can be shown that every complete lattice is the concept lattice of some formal context (up to isomorphism).\n\nReal-world data is often given in the form of an object-attribute table, where the attributes have \"values\". Formal concept analysis handles such data by transforming them into the basic type of a (\"one-valued\") formal context. The method is called \"conceptual scaling\".\n\nThe negation of an attribute \"m\" is an attribute ¬\"m\", the extent of which is just the complement of the extent of \"m\", i.e., with (¬\"m\")' = G \\ m'. It is in general \"not\" assumed that negated attributes are available for concept formation. But pairs of attributes which are negations of each other often naturally occur, for example in contexts derived from conceptual scaling.\n\nFor possible negations of formal concepts see the section concept algebras below.\n\nAn implication \"A → B\" relates two sets \"A\" and \"B\" of attributes and expresses that every object possessing each attribute from \"A\" also has each attribute from \"B\". \nWhen (\"G\",\"M\",\"I\") is a formal context and \"A\", \"B\" are subsets of the set \"M\" of attributes (i.e., \"A,B ⊆ M\"), then the implication \"A → B\" holds if \"A′ ⊆ B′\". For each finite formal context, the set of all valid implications has a \"canonical basis\", an irredundant set of implications from which all valid implications can be derived by the natural inference ().\nThis is used in \"Attribute Exploration\", a knowledge acquisition method based on implications.\n\nFormal concept analysis has elaborate mathematical foundations, making the field versatile. As a basic example we mention the arrow relations, which are simple and easy to compute, but very useful. They are defined as follows: For \"g\" ∈ \"G\" and \"m\" ∈ \"M\" let\n\n\"g\" ↗ \"m\"  ⇔  ¬\"(gIm)\" and if \"m'⊆n' \" and \"m' ≠ n' \", then \"gIn\",\n\nand dually\n\n\"g\" ↙ \"m\"  ⇔  ¬\"(gIm)\" and if \"g'⊆h' \" and \"g' ≠ h' \", then \"hIm\".\n\nSince only non-incident object-attribute pairs can be related, these relations can conveniently be recorded in the table representing a formal context. Many lattice properties can be read off from the arrow relations, including distributivity and several of its generalizations. They also reveal structural information and can be used for determining, e.g., the congruence relations of the lattice.\n\n\nThere is a number of simple and fast algorithms for generating formal concepts and for constructing and navigating concept lattices. For a survey, see Kuznetsov and Obiedkov or the book by Ganter and Obiedkov, where also some pseudo-code can be found. Since the number of formal concepts may be exponential in the size of the formal context, the complexity of the algorithms usually is given with respect to the output size. Concept lattices with a few million elements can be handled without problems.\n\nMany FCA software applications are available today. The main purpose of these tools varies from formal context creation to formal and generating the concepts lattice of a given formal context and the corresponding implications and . Most of these tools are academic open-source applications, such as:\n\n\n\nThe formal concept analysis can be used as a qualitative method for data analysis. Since the early beginnings of FBA in the early 1980s, the FBA research group at TU Darmstadt has gained experience from more than 200 projects using the FBA (as of 2005). Including the fields of: medicine and cell biology, genetics, ecology, software engineering, ontology, information and library sciences, office administration, law, linguistics, political science.\n\nMany more examples are e.g. described in: \"Formal Concept Analysis. Foundations and Applications\", conference papers at regular conferences such as: \"International Conference on Formal Concept Analysis\" (ICFCA), \"Concept Lattices and their Applications\" (CLA), or \"International Conference on Conceptual Structures\" (ICCS).\n\n\n", "id": "313845", "title": "Formal concept analysis"}
{"url": "https://en.wikipedia.org/wiki?curid=43169442", "text": "Deeplearning4j\n\nEclipse Deeplearning4j is a deep learning programming library written for Java and the Java virtual machine (JVM) and a computing framework with wide support for deep learning algorithms. Deeplearning4j includes implementations of the restricted Boltzmann machine, deep belief net, deep autoencoder, stacked denoising autoencoder and recursive neural tensor network, word2vec, doc2vec, and GloVe. These algorithms all include distributed parallel versions that integrate with Apache Hadoop and Spark.\n\nDeeplearning4j is open-source software released under Apache License 2.0, developed mainly by a machine learning group headquartered in San Francisco and Tokyo and led by Adam Gibson. It is supported commercially by the startup Skymind, which bundles DL4J, Tensorflow, Keras and other deep learning libraries in an enterprise distribution called the Skymind Intelligence Layer. Deeplearning4j was contributed to the Eclipse Foundation in October 2017.\n\nDeeplearning4j relies on the widely used programming language, Java, though it is compatible with Clojure and includes a Scala application programming interface (API). It is powered by its own open-source numerical computing library, ND4J, and works with both central processing units (CPUs) and graphics processing units (GPUs).\n\nDeeplearning4j has been used in several commercial and academic applications. The code is hosted on GitHub. A support forum is maintained on Gitter.\n\nThe framework is composable, meaning shallow neural nets such as restricted Boltzmann machines, convolutional nets, autoencoders, and recurrent nets can be added to one another to create deep nets of varying types. It also has extensive visualization tools, and a computation graph.\n\nTraining with Deeplearning4j occurs in a cluster. Neural nets are trained in parallel via iterative reduce, which works on Hadoop-YARN and on Spark. Deeplearning4j also integrates with CUDA kernels to conduct pure GPU operations, and works with distributed GPUs.\n\nDeeplearning4j includes an n-dimensional array class using ND4J that allows scientific computing in Java and Scala, similar to the functions that NumPy provides to Python. It's effectively based on a library for linear algebra and matrix manipulation in a production environment.\n\nDataVec vectorizes various file formats and data types using an input/output format system similar to Hadoop's use of MapReduce; that is, it turns various data types into columns of scalars termed vectors. DataVec is designed to vectorize CSVs, images, sound, text, video, and time series.\n\nDeeplearning4j includes a vector space modeling and topic modeling toolkit, implemented in Java and integrating with parallel GPUs for performance. It is designed to handle large text sets.\n\nDeeplearning4j includes implementations of term frequency–inverse document frequency (tf–idf), deep learning, and Mikolov's word2vec algorithm, doc2vec, and GloVe, reimplemented and optimized in Java. It relies on t-distributed stochastic neighbor embedding (t-SNE) for word-cloud visualizations.\n\nReal-world use cases for Deeplearning4j include network intrusion detection and cybersecurity, fraud detection for the financial sector, anomaly detection in industries such as manufacturing, recommender systems in e-commerce and advertising, and image recognition. Deeplearning4j has integrated with other machine-learning platforms such as RapidMiner, Prediction.io, and Weka.\n\nDeeplearning4j serves machine-learning models for inference in production using the free developer edition of SKIL, the Skymind Intelligence Layer. A model server serves the parametric machine-learning models that makes decisions about data. It is used for the inference stage of a machine-learning workflow, after data pipelines and model training. A model server is the tool that allows data science research to be deployed in a real-world production environment. \n\nWhat a Web server is to the Internet, a model server is to AI. Where a Web server receives an HTTP request and returns data about a Web site, a model server receives data, and returns a decision or prediction about that data: e.g. sent an image, a model server might return a label for that image, identifying faces or animals in photographs.\n\nThe SKIL model server is able to import models from Python frameworks such as Tensorflow, Keras, Theano and CNTK, overcoming a major barrier in deploying deep learning models.\n\nDeeplearning4j is as fast as Caffe for non-trivial image recognition tasks using multiple GPUs. For programmers unfamiliar with HPC on the JVM, there are several parameters that must be adjusted to optimize neural network training time. These include setting the heap space, the garbage collection algorithm, employing off-heap memory and pre-saving data (pickling) for faster ETL. Together, these optimizations can lead to a 10x acceleration in performance with Deeplearning4j.\n\nDeeplearning4j can be used via multiple API languages including Java, Scala, Python and Clojure. Its Scala API is called ScalNet. Keras serves as its Python API. And its Clojure wrapper is known as DL4CLJ. The core languages performing the large-scale mathematical operations necessary for deep learning are C, C++ and CUDA C.\n\nTensorflow, Keras and Deeplearning4j work together. Deeplearning4j can import models from Tensorflow and other Python frameworks if they have been created with Keras. \n\n", "id": "43169442", "title": "Deeplearning4j"}
{"url": "https://en.wikipedia.org/wiki?curid=46963137", "text": "Local case-control sampling\n\nIn machine learning, local case-control sampling is an algorithm used to reduce the complexity of training a logistic regression classifier. The algorithm reduces the training complexity by selecting a small subsample of the original dataset for training. It assumes the availability of a (unreliable) pilot estimation of the parameters. It then performs a single pass over the entire dataset using the pilot estimation to identify the most \"surprising\" samples. In practice, the pilot may come from prior knowledge or training using a subsample of the dataset. The algorithm is most effective when the underlying dataset is imbalanced. It exploits the structures of conditional imbalanced datasets more efficiently than alternative methods, such as case control sampling and weighted case control sampling.\n\nIn classification, a dataset is a set of \"N\" data points formula_1, where formula_2 is a feature vector, formula_3 is a label. Intuitively, a dataset is imbalanced when certain important statistical patterns are rare. The lack of observations of certain patterns does not always imply their irrelevance. For example, in medical studies of rare diseases, the small number of infected patients (cases) conveys the most valuable information for diagnosis and treatments.\n\nFormally, an imbalanced dataset exhibits one or more of the following properties:\n\nIn logistic regression, given the model formula_8, the prediction is made according to formula_9. The local-case control sampling algorithm assumes the availability of a pilot model formula_10. Given the pilot model, the algorithm performs a single pass over the entire dataset to select the subset of samples to include in training the logistic regression model. For a sample formula_11, define the acceptance probability as formula_12. The algorithm proceeds as follows:\n\n\nThe algorithm can be understood as selecting samples that surprises the pilot model. Intuitively these samples are closer to the decision boundary of the classifier and is thus more informative.\n\nIn practice, for cases where a pilot model is naturally available, the algorithm can be applied directly to reduce the complexity of training. In cases where a natural pilot is nonexistent, an estimate using a subsample selected through another sampling technique can be used instead. In the original paper describing the algorithm, the authors propose to use weighted case-control sampling with half the assigned sampling budget. For example, if the objective is to use a subsample with size formula_20, first estimate a model formula_21 using formula_22 samples from weighted case control sampling, then collect another formula_22 samples using local case-control sampling.\n\nIt is possible to control the sample size by multiplying the acceptance probability with a constant formula_24. For a larger sample size, pick formula_25 and adjust the acceptance probability to formula_26. For a smaller sample size, the same strategy applies. In cases where the number of samples desired is precise, a convenient alternative method is to uniformly downsample from a larger subsample selected by local case-control sampling.\n\nThe algorithm has the following properties. When the pilot is consistent, the estimates using the samples from local case-control sampling is consistent even under model misspecification. If the model is correct then the algorithm has exactly twice the asymptotic variance of logistic regression on the full data set. For a larger sample size with formula_25, the factor 2 is improved to formula_28.\n", "id": "46963137", "title": "Local case-control sampling"}
{"url": "https://en.wikipedia.org/wiki?curid=233488", "text": "Machine learning\n\nMachine learning is a field of computer science that gives computers the ability to learn without being explicitly programmed.\n\nArthur Samuel, an American pioneer in the field of computer gaming and artificial intelligence, coined the term \"Machine Learning\" in 1959 while at IBM. Evolved from the study of pattern recognition and computational learning theory in artificial intelligence, machine learning explores the study and construction of algorithms that can learn from and make predictions on data – such algorithms overcome following strictly static program instructions by making data-driven predictions or decisions, through building a model from sample inputs. Machine learning is employed in a range of computing tasks where designing and programming explicit algorithms with good performance is difficult or infeasible; example applications include email filtering, detection of network intruders or malicious insiders working towards a data breach, optical character recognition (OCR), learning to rank, and computer vision.\n\nMachine learning is closely related to (and often overlaps with) computational statistics, which also focuses on prediction-making through the use of computers. It has strong ties to mathematical optimization, which delivers methods, theory and application domains to the field. Machine learning is sometimes conflated with data mining, where the latter subfield focuses more on exploratory data analysis and is known as unsupervised learning. Machine learning can also be unsupervised and be used to learn and establish baseline behavioral profiles for various entities and then used to find meaningful anomalies.\n\nWithin the field of data analytics, machine learning is a method used to devise complex models and algorithms that lend themselves to prediction; in commercial use, this is known as predictive analytics. These analytical models allow researchers, data scientists, engineers, and analysts to \"produce reliable, repeatable decisions and results\" and uncover \"hidden insights\" through learning from historical relationships and trends in the data.\n\nAccording to the Gartner hype cycle of 2016, machine learning is at its peak of inflated expectations. Effective machine learning is difficult because finding patterns is hard and often not enough training data are available; as a result, machine-learning programs often fail to deliver.\n\nTom M. Mitchell provided a widely quoted, more formal definition of the algorithms studied in the machine learning field: \"A computer program is said to learn from experience \"E\" with respect to some class of tasks \"T\" and performance measure \"P\" if its performance at tasks in \"T\", as measured by \"P\", improves with experience \"E\".\" This definition of the tasks in which machine learning is concerned offers a fundamentally operational definition rather than defining the field in cognitive terms. This follows Alan Turing's proposal in his paper \"Computing Machinery and Intelligence\", in which the question \"Can machines think?\" is replaced with the question \"Can machines do what we (as thinking entities) can do?\". In Turing's proposal the various characteristics that could be possessed by a \"thinking machine\" and the various implications in constructing one are exposed.\n\nMachine learning tasks are typically classified into two broad categories, depending on whether there is a learning \"signal\" or \"feedback\" available to a learning system:\n\nAnother categorization of machine learning tasks arises when one considers the desired \"output\" of a machine-learned system:\nAmong other categories of machine learning problems, learning to learn learns its own inductive bias based on previous experience. Developmental learning, elaborated for robot learning, generates its own sequences (also called curriculum) of learning situations to cumulatively acquire repertoires of novel skills through autonomous self-exploration and social interaction with human teachers and using guidance mechanisms such as active learning, maturation, motor synergies, and imitation.\n\nAs a scientific endeavour, machine learning grew out of the quest for artificial intelligence. Already in the early days of AI as an academic discipline, some researchers were interested in having machines learn from data. They attempted to approach the problem with various symbolic methods, as well as what were then termed \"neural networks\"; these were mostly perceptrons and other models that were later found to be reinventions of the generalized linear models of statistics. Probabilistic reasoning was also employed, especially in automated medical diagnosis.\n\nHowever, an increasing emphasis on the logical, knowledge-based approach caused a rift between AI and machine learning. Probabilistic systems were plagued by theoretical and practical problems of data acquisition and representation. By 1980, expert systems had come to dominate AI, and statistics was out of favor. Work on symbolic/knowledge-based learning did continue within AI, leading to inductive logic programming, but the more statistical line of research was now outside the field of AI proper, in pattern recognition and information retrieval. Neural networks research had been abandoned by AI and computer science around the same time. This line, too, was continued outside the AI/CS field, as \"connectionism\", by researchers from other disciplines including Hopfield, Rumelhart and Hinton. Their main success came in the mid-1980s with the reinvention of backpropagation.\n\nMachine learning, reorganized as a separate field, started to flourish in the 1990s. The field changed its goal from achieving artificial intelligence to tackling solvable problems of a practical nature. It shifted focus away from the symbolic approaches it had inherited from AI, and toward methods and models borrowed from statistics and probability theory. It also benefited from the increasing availability of digitized information, and the possibility to distribute that via the Internet.\n\nMachine learning and data mining often employ the same methods and overlap significantly, but while machine learning focuses on prediction, based on \"known\" properties learned from the training data, data mining focuses on the discovery of (previously) \"unknown\" properties in the data (this is the analysis step of knowledge discovery in databases). Data mining uses many machine learning methods, but with different goals; on the other hand, machine learning also employs data mining methods as \"unsupervised learning\" or as a preprocessing step to improve learner accuracy. Much of the confusion between these two research communities (which do often have separate conferences and separate journals, ECML PKDD being a major exception) comes from the basic assumptions they work with: in machine learning, performance is usually evaluated with respect to the ability to \"reproduce known\" knowledge, while in knowledge discovery and data mining (KDD) the key task is the discovery of previously \"unknown\" knowledge. Evaluated with respect to known knowledge, an uninformed (unsupervised) method will easily be outperformed by other supervised methods, while in a typical KDD task, supervised methods cannot be used due to the unavailability of training data.\n\nMachine learning also has intimate ties to optimization: many learning problems are formulated as minimization of some loss function on a training set of examples. Loss functions express the discrepancy between the predictions of the model being trained and the actual problem instances (for example, in classification, one wants to assign a label to instances, and models are trained to correctly predict the pre-assigned labels of a set of examples). The difference between the two fields arises from the goal of generalization: while optimization algorithms can minimize the loss on a training set, machine learning is concerned with minimizing the loss on unseen samples.\n\nMachine learning and statistics are closely related fields. According to Michael I. Jordan, the ideas of machine learning, from methodological principles to theoretical tools, have had a long pre-history in statistics. He also suggested the term data science as a placeholder to call the overall field.\n\nLeo Breiman distinguished two statistical modelling paradigms: data model and algorithmic model, wherein \"algorithmic model\" means more or less the machine learning algorithms like Random forest.\n\nSome statisticians have adopted methods from machine learning, leading to a combined field that they call \"statistical learning\".\n\nA core objective of a learner is to generalize from its experience. Generalization in this context is the ability of a learning machine to perform accurately on new, unseen examples/tasks after having experienced a learning data set. The training examples come from some generally unknown probability distribution (considered representative of the space of occurrences) and the learner has to build a general model about this space that enables it to produce sufficiently accurate predictions in new cases.\n\nThe computational analysis of machine learning algorithms and their performance is a branch of theoretical computer science known as computational learning theory. Because training sets are finite and the future is uncertain, learning theory usually does not yield guarantees of the performance of algorithms. Instead, probabilistic bounds on the performance are quite common. The bias–variance decomposition is one way to quantify generalization error.\n\nFor the best performance in the context of generalization, the complexity of the hypothesis should match the complexity of the function underlying the data. If the hypothesis is less complex than the function, then the model has underfit the data. If the complexity of the model is increased in response, then the training error decreases. But if the hypothesis is too complex, then the model is subject to overfitting and generalization will be poorer.\n\nIn addition to performance bounds, computational learning theorists study the time complexity and feasibility of learning. In computational learning theory, a computation is considered feasible if it can be done in polynomial time. There are two kinds of time complexity results. Positive results show that a certain class of functions can be learned in polynomial time. Negative results show that certain classes cannot be learned in polynomial time.\n\nDecision tree learning uses a decision tree as a predictive model, which maps observations about an item to conclusions about the item's target value.\n\nAssociation rule learning is a method for discovering interesting relations between variables in large databases.\n\nAn artificial neural network (ANN) learning algorithm, usually called \"neural network\" (NN), is a learning algorithm that is inspired by the structure and functional aspects of biological neural networks. Computations are structured in terms of an interconnected group of artificial neurons, processing information using a connectionist approach to computation. Modern neural networks are non-linear statistical data modeling tools. They are usually used to model complex relationships between inputs and outputs, to find patterns in data, or to capture the statistical structure in an unknown joint probability distribution between observed variables.\n\nFalling hardware prices and the development of GPUs for personal use in the last few years have contributed to the development of the concept of deep learning which consists of multiple hidden layers in an artificial neural network. This approach tries to model the way the human brain processes light and sound into vision and hearing. Some successful applications of deep learning are computer vision and speech recognition.\n\nInductive logic programming (ILP) is an approach to rule learning using logic programming as a uniform representation for input examples, background knowledge, and hypotheses. Given an encoding of the known background knowledge and a set of examples represented as a logical database of facts, an ILP system will derive a hypothesized logic program that entails all positive and no negative examples. Inductive programming is a related field that considers any kind of programming languages for representing hypotheses (and not only logic programming), such as functional programs.\n\nSupport vector machines (SVMs) are a set of related supervised learning methods used for classification and regression. Given a set of training examples, each marked as belonging to one of two categories, an SVM training algorithm builds a model that predicts whether a new example falls into one category or the other.\n\nCluster analysis is the assignment of a set of observations into subsets (called \"clusters\") so that observations within the same cluster are similar according to some predesignated criterion or criteria, while observations drawn from different clusters are dissimilar. Different clustering techniques make different assumptions on the structure of the data, often defined by some \"similarity metric\" and evaluated for example by \"internal compactness\" (similarity between members of the same cluster) and \"separation\" between different clusters. Other methods are based on \"estimated density\" and \"graph connectivity\".\nClustering is a method of unsupervised learning, and a common technique for statistical data analysis.\n\nA Bayesian network, belief network or directed acyclic graphical model is a probabilistic graphical model that represents a set of random variables and their conditional independencies via a directed acyclic graph (DAG). For example, a Bayesian network could represent the probabilistic relationships between diseases and symptoms. Given symptoms, the network can be used to compute the probabilities of the presence of various diseases. Efficient algorithms exist that perform inference and learning.\n\nReinforcement learning is concerned with how an \"agent\" ought to take \"actions\" in an \"environment\" so as to maximize some notion of long-term \"reward\". Reinforcement learning algorithms attempt to find a \"policy\" that maps \"states\" of the world to the actions the agent ought to take in those states. Reinforcement learning differs from the supervised learning problem in that correct input/output pairs are never presented, nor sub-optimal actions explicitly corrected.\n\nSeveral learning algorithms, mostly unsupervised learning algorithms, aim at discovering better representations of the inputs provided during training. Classical examples include principal components analysis and cluster analysis. Representation learning algorithms often attempt to preserve the information in their input but transform it in a way that makes it useful, often as a pre-processing step before performing classification or predictions, allowing reconstruction of the inputs coming from the unknown data generating distribution, while not being necessarily faithful for configurations that are implausible under that distribution.\n\nManifold learning algorithms attempt to do so under the constraint that the learned representation is low-dimensional. Sparse coding algorithms attempt to do so under the constraint that the learned representation is sparse (has many zeros). Multilinear subspace learning algorithms aim to learn low-dimensional representations directly from tensor representations for multidimensional data, without reshaping them into (high-dimensional) vectors. Deep learning algorithms discover multiple levels of representation, or a hierarchy of features, with higher-level, more abstract features defined in terms of (or generating) lower-level features. It has been argued that an intelligent machine is one that learns a representation that disentangles the underlying factors of variation that explain the observed data.\n\nIn this problem, the learning machine is given pairs of examples that are considered similar and pairs of less similar objects. It then needs to learn a similarity function (or a distance metric function) that can predict if new objects are similar. It is sometimes used in Recommendation systems.\n\nIn this method, a datum is represented as a linear combination of basis functions, and the coefficients are assumed to be sparse. Let \"x\" be a \"d\"-dimensional datum, \"D\" be a \"d\" by \"n\" matrix, where each column of \"D\" represents a basis function. \"r\" is the coefficient to represent \"x\" using \"D\". Mathematically, sparse dictionary learning means solving formula_1 where \"r\" is sparse. Generally speaking, \"n\" is assumed to be larger than \"d\" to allow the freedom for a sparse representation.\n\nLearning a dictionary along with sparse representations is strongly NP-hard and also difficult to solve approximately. A popular heuristic method for sparse dictionary learning is K-SVD.\n\nSparse dictionary learning has been applied in several contexts. In classification, the problem is to determine which classes a previously unseen datum belongs to. Suppose a dictionary for each class has already been built. Then a new datum is associated with the class such that it's best sparsely represented by the corresponding dictionary. Sparse dictionary learning has also been applied in image de-noising. The key idea is that a clean image patch can be sparsely represented by an image dictionary, but the noise cannot.\n\nA genetic algorithm (GA) is a search heuristic that mimics the process of natural selection, and uses methods such as mutation and crossover to generate new genotype in the hope of finding good solutions to a given problem. In machine learning, genetic algorithms found some uses in the 1980s and 1990s. Conversely, machine learning techniques have been used to improve the performance of genetic and evolutionary algorithms.\n\nRule-based machine learning is a general term for any machine learning method that identifies, learns, or evolves `rules’ to store, manipulate or apply, knowledge. The defining characteristic of a rule-based machine learner is the identification and utilization of a set of relational rules that collectively represent the knowledge captured by the system. This is in contrast to other machine learners that commonly identify a singular model that can be universally applied to any instance in order to make a prediction. Rule-based machine learning approaches include learning classifier systems, association rule learning, and artificial immune systems.\n\nLearning classifier systems (LCS) are a family of rule-based machine learning algorithms that combine a discovery component (e.g. typically a genetic algorithm) with a learning component (performing either supervised learning, reinforcement learning, or unsupervised learning). They seek to identify a set of context-dependent rules that collectively store and apply knowledge in a piecewise manner in order to make predictions.\n\nApplications for machine learning include:\n\nIn 2006, the online movie company Netflix held the first \"Netflix Prize\" competition to find a program to better predict user preferences and improve the accuracy on its existing Cinematch movie recommendation algorithm by at least 10%. A joint team made up of researchers from AT&T Labs-Research in collaboration with the teams Big Chaos and Pragmatic Theory built an ensemble model to win the Grand Prize in 2009 for $1 million. Shortly after the prize was awarded, Netflix realized that viewers' ratings were not the best indicators of their viewing patterns (\"everything is a recommendation\") and they changed their recommendation engine accordingly.\n\nIn 2010 The Wall Street Journal wrote about the firm Rebellion Research and their use of Machine Learning to predict the financial crisis. \nIn 2012, co-founder of Sun Microsystems Vinod Khosla predicted that 80% of medical doctors jobs would be lost in the next two decades to automated machine learning medical diagnostic software.\n\nIn 2014, it has been reported that a machine learning algorithm has been applied in Art History to study fine art paintings, and that it may have revealed previously unrecognized influences between artists.\n\nClassification machine learning models can be validated by accuracy estimation techniques like the Holdout method, which splits the data in a training and test set (conventionally 2/3 training set and 1/3 test set designation) and evaluates the performance of the training model on the test set. In comparison, the N-fold-cross-validation method randomly splits the data in k subsets where the k-1 instances of the data are used to train the model while the kth instance is used to test the predictive ability of the training model. In addition to the holdout and cross-validation methods, bootstrap, which samples n instances with replacement from the dataset, can be used to assess model accuracy.\n\nIn addition to overall accuracy, investigators frequently report sensitivity and specificity meaning True Positive Rate (TPR) and True Negative Rate (TNR) respectively. Similarly, investigators sometimes report the False Positive Rate (FPR) as well as the False Negative Rate (FNR). However, these rates are ratios that fail to reveal their numerators and denominators. The Total Operating Characteristic (TOC) is an effective method to express a model’s diagnostic ability. TOC shows the numerators and denominators of the previously mentioned rates, thus TOC provides more information than the commonly used Receiver operating characteristic (ROC) and ROC’s associated Area Under the Curve (AUC).\n\nMachine learning poses a host of ethical questions. Systems which are trained on datasets collected with biases may exhibit these biases upon use (algorithmic bias), thus digitizing cultural prejudices. For example, using job hiring data from a firm with racist hiring policies may lead to a machine learning system duplicating the bias by scoring job applicants against similarity to previous successful applicants. Responsible collection of data and documentation of algorithmic rules used by a system thus is a critical part of machine learning.\n\nBecause language contains biases, machines trained on language \"corpora\" will necessarily also learn bias.\n\nSoftware suites containing a variety of machine learning algorithms include the following :\n\n\n\n", "id": "233488", "title": "Machine learning"}
{"url": "https://en.wikipedia.org/wiki?curid=31877832", "text": "Ball tree\n\nIn computer science, a ball tree, balltree or metric tree, is a space partitioning data structure for organizing points in a multi-dimensional space. The ball tree gets its name from the fact that it partitions data points into a nested set of hyperspheres known as \"balls\". The resulting data structure has characteristics that make it useful for a number of applications, most notably nearest neighbor search.\n\nA ball tree is a binary tree in which every node defines a D-dimensional hypersphere, or ball, containing a subset of the points to be searched. Each internal node of the tree partitions the data points into two disjoint sets which are associated with different balls. While the balls themselves may intersect, each point is assigned to one or the other ball in the partition according to its distance from the ball's center. Each leaf node in the tree defines a ball and enumerates all data points inside that ball.\n\nEach node in the tree defines the smallest ball that contains all data points in its subtree. This gives rise to the useful property that, for a given test point , the distance to any point in a ball in the tree is greater than or equal to the distance from to the ball. Formally:\n\nWhere formula_2 is the minimum possible distance from any point in the ball to some point .\n\nBall-trees are related to the M-tree, but only support binary splits, whereas in the M-tree each level splits formula_3 to formula_4 fold, thus leading to a shallower tree structure, therefore need fewer distance computations, which usually yields faster queries. Furthermore, M-trees can better be stored on disk, which is organized in pages. The M-tree also keeps the distances from the parent node precomputed to speed up queries.\n\nVantage-point trees are also similar, but they binary split into one ball, and the remaining data, instead of using two balls.\n\nA number of ball tree construction algorithms are available. The goal of such an algorithm is to produce a tree that will efficiently support queries of the desired type (e.g. nearest-neighbor) efficiently in the average case. The specific criteria of an ideal tree will depend on the type of question being answered and the distribution of the underlying data. However, a generally applicable measure of an efficient tree is one that minimizes the total volume of its internal nodes. Given the varied distributions of real-world data sets, this is a difficult task, but there are several heuristics that partition the data well in practice. In general, there is a tradeoff between the cost of constructing a tree and the efficiency achieved by this metric. \nThis section briefly describes the simplest of these algorithms. A more in-depth discussion of five algorithms was given by Stephen Omohundro.\n\nThe simplest such procedure is termed the \"k-d Construction Algorithm\", by analogy with the process used to construct k-d trees. This is an off-line algorithm, that is, an algorithm that operates on the entire data set at once. The tree is built top-down by recursively splitting the data points into two sets. Splits are chosen along the single dimension with the greatest spread of points, with the sets partitioned by the median value of all points along that dimension. Finding the split for each internal node requires linear time in the number of samples contained in that node, yielding an algorithm with time complexity formula_5, where \"n\" is the number of data points.\n\n function construct_balltree is\n\nAn important application of ball trees is expediting nearest neighbor search queries, in which the objective is to find the k points in the tree that are closest to a given test point by some distance metric (e.g. Euclidean distance). A simple search algorithm, sometimes called KNS1, exploits the distance property of the ball tree. In particular, if the algorithm is searching the data structure with a test point \"t\", and has already seen some point \"p\" that is closest to \"t\" among the points encountered so far, then any subtree whose ball is further from \"t\" than \"p\" can be ignored for the rest of the search.\n\nThe ball tree nearest-neighbor algorithm examines nodes in depth-first order, starting at the root. During the search, the algorithm\nmaintains a max-first priority queue (often implemented with a heap), denoted \"Q\" here, of the k nearest points encountered so far. At each node \"B\", it may perform one of three operations, before finally returning an updated version of the priority queue:\n\n\nPerforming the recursive search in the order described in point 3 above increases likelihood that the further child will be pruned \nentirely during the search.\n\n function knn_search is\n\nIn comparison with several other data structures, ball trees have been shown to perform fairly well on \nthe nearest-neighbor search problem, particularly as their number of dimensions grows.\nHowever, the best nearest-neighbor data structure for a given application will depend on the dimensionality, number of data points, and underlying structure of the data.\n", "id": "31877832", "title": "Ball tree"}
{"url": "https://en.wikipedia.org/wiki?curid=47527969", "text": "Word2vec\n\nWord2vec is a group of related models that are used to produce word embeddings. These models are shallow, two-layer neural networks that are trained to reconstruct linguistic contexts of words. Word2vec takes as its input a large corpus of text and produces a vector space, typically of several hundred dimensions, with each unique word in the corpus being assigned a corresponding vector in the space. Word vectors are positioned in the vector space such that words that share common contexts in the corpus are located in close proximity to one another in the space.\n\nWord2vec was created by a team of researchers led by Tomas Mikolov at Google. The algorithm has been subsequently analysed and explained by other researchers. Embedding vectors created using the Word2vec algorithm have many advantages compared to earlier algorithms such as latent semantic analysis.\n\nWord2vec can utilize either of two model architectures to produce a distributed representation of words: continuous bag-of-words (CBOW) or continuous skip-gram. In the continuous bag-of-words architecture, the model predicts the current word from a window of surrounding context words. The order of context words does not influence prediction (bag-of-words assumption). In the continuous skip-gram architecture, the model uses the current word to predict the surrounding window of context words. The skip-gram architecture weighs nearby context words more heavily than more distant context words. According to the authors' note, CBOW is faster while skip-gram is slower but does a better job for infrequent words.\n\nResults of word2vec training can be sensitive to parametrization. The following are some important parameters in word2vec training.\n\nA Word2vec model can be trained with hierarchical softmax and/or negative sampling. To approximate the conditional log-likelihood a model seeks to maximize, the hierarchical softmax method uses a Huffman tree to reduce calculation. The negative sampling method, on the other hand, approaches the maximization problem by minimizing the log-likelihood of sampled negative instances. According to the authors, hierarchical softmax works better for infrequent words while negative sampling works better for frequent words and better with low dimensional vectors. As training epochs increase, hierarchical softmax stops being useful.\n\nHigh frequency words often provide little information. Words with frequency above a certain threshold may be subsampled to increase training speed.\n\nQuality of word embedding increases with higher dimensionality. But after reaching some point, marginal gain will diminish. Typically, the dimensionality of the vectors is set to be between 100 and 1,000.\n\nThe size of the context window determines how many words before and after a given word would be included as context words of the given word. According to the authors' note, the recommended value is 10 for skip-gram and 5 for CBOW.\n\nAn extension of word2vec to construct embeddings from entire documents (rather than the individual words) has been proposed. This extension is called paragraph2vec or doc2vec and has been implemented in the C, Python and Java/Scala tools (see below), with the Java and Python versions also supporting inference of document embeddings on new, unseen documents.\n\nAn extension of word vectors for n-grams in biological sequences (e.g. DNA, RNA, and Proteins) for bioinformatics applications have been proposed by Asgari and Mofrad. Named bio-vectors (BioVec) to refer to biological sequences in general with protein-vectors (ProtVec) for proteins (amino-acid sequences) and gene-vectors (GeneVec) for gene sequences, this representation can be widely used in applications of machine learning in proteomics and genomics. The results suggest that BioVectors can characterize biological sequences in terms of biochemical and biophysical interpretations of the underlying patterns.\n\nAn extension of word vectors for creating a dense vector representation of unstructured radiology reports has been proposed by Banerjee et. al. One of the biggest challenges with Word2Vec is how to handle unknown or out-of-vocabulary (OOV) words and morphologically similar words. This can particularly be an issue in domains like medicine where synonyms and related words can be used depending on the preferred style of radiologist, and words may have been used infrequently in a large corpus. If the word2vec model has not encountered a particular word before, it will be forced to use a random vector, which is generally far from its ideal representation.\n\nIWE combines Word2vec with a semantic dictionary mapping technique to tackle the major challenges of information extraction from clinical texts, which include ambiguity of free text narrative style, lexical variations, use of ungrammatical and telegraphic phases, arbitrary ordering of words, and frequent appearance of abbreviations and acronyms.  Of particular interest, the IWE model (trained on the one institutional dataset) successfully translated to a different institutional dataset which demonstrates good generalizability of the approach across institutions.\n\nThe reasons for successful word embedding learning in the word2vec framework are poorly understood. Goldberg and Levy point out that the word2vec objective function causes words that occur in similar contexts to have similar embeddings (as measured by cosine similarity) and note that this is in line with J. R. Firth's distributional hypothesis. However, they note that this explanation is \"very hand-wavy\" and argue that a more formal explanation would be preferable.\n\nLevy et al. (2015) show that much of the superior performance of word2vec or similar embeddings in downstream tasks is not a result of the models per se, but of the choice of specific hyperparameters. Transferring these hyperparameters to more 'traditional' approaches yields similar performances in downstream tasks.\n\nThe word embedding approach is able to capture multiple different degrees of similarity between words. Mikolov et al. (2013) found that semantic and syntactic patterns can be reproduced using vector arithmetic. Patterns such as “Man is to Woman as Brother is to Sister” can be generated through algebraic operations on the vector representations of these words such that the vector representation of “Brother” - ”Man” + ”Woman” produces a result which is closest to the vector representation of “Sister” in the model. Such relationships can be generated for a range of semantic relations (such as Country—Capital) as well as syntactic relations (e.g. present tense—past tense)\n\nMikolov et al. (2013) develop an approach to assessing the quality of a word2vec model which draws on the semantic and syntactic patterns discussed above. They developed a set of 8,869 semantic relations and 10,675 syntactic relations which they use as a benchmark to test the accuracy of a model. When assessing the quality of a vector model, a user may draw on this accuracy test which is implemented in word2vec, or develop their own test set which is meaningful to the corpora which make up the model. This approach offers a more challenging test than simply arguing that the words most similar to a given test word are intuitively plausible.\n\nThe use of different model parameters and different corpus sizes can greatly affect the quality of a word2vec model. Accuracy can be improved in a number of ways, including the choice of model architecture (CBOW or Skip-Gram), increasing the training data set, increasing the number of vector dimensions, and increasing the window size of words considered by the algorithm. Each of these improvements comes with the cost of increased computational complexity and therefore increased model generation time.\n\nIn models using large corpora and a high number of dimensions, the skip-gram model yields the highest overall accuracy, and consistently produces the highest accuracy on semantic relationships, as well as yielding the highest syntactic accuracy in most cases. However, the CBOW is less computationally expensive and yields similar accuracy results.\n\nAccuracy increases overall as the number of words used increases, and as the number of dimensions increases. Mikolov et al. report that doubling the amount of training data results in an increase in computational complexity equivalent to doubling the number of vector dimensions.\n\nAltszyler et al. (2016) studied Word2vec performance in two semantic tests for different corpus size. they found that Word2vec has a steep learning curve, outperforming other word-embedding technique (LSA) when it is trained with medium to large corpus size (more than 10 million words). However, with small training corpus LSA showed better performances. Additionally they show that the best parameter setting depends on the task and the training corpus. Nevertheless, for skip-gram models trained in medium size corpora, 50 dimensions, window size of 15 and 10 negative samples seems to be a good parameter setting.\n\n\n", "id": "47527969", "title": "Word2vec"}
{"url": "https://en.wikipedia.org/wiki?curid=47577902", "text": "Trax Image Recognition\n\nTrax is a technology company headquartered in Singapore, with offices throughout APAC, Europe, Middle East, North America and South America. Its computer vision technology is used by FMCG companies such as Coca-Cola and Retailers to collect, measure and analyse what is happening on physical shelves.\n\nFounded in 2010, Trax has over 150 customers in the Retail and FMCG industries, including beverage giant Coca-Cola and brewer Anheuser-Busch InBev. Its service is available in 45 markets and the company's development centre is located in Tel Aviv. Trax closed its first round of funding for US$1.1 million, in June, 2011. They opened their Tel-Aviv office in July, 2012, and closed their second round of funding for US$6.4 million in December, 2012. Their third round of funding for US$15.7 million closed in February, 2014. In December 2014 Trax announced its fourth round of investment of US$15 million. \n\nIn 2015, Trax opened their first two regional offices, London in January, and Brazil in April. In March 2016, Trax established their LATAM headquarters in Atlanta, Georgia. Trax announced a 5th round of funding for US$40 million on June 8, 2016. Two new regional offices were opened in Shanghai and Mexico City, in June and September 2016 respectively. On February 8, 2017, Trax closed their sixth round of funding for US$19.5 million. On June 30, 2017 Trax announced its most recent funding round of US$64 million lead by global private equity giant Warburg Pincus. \n\nOn July 12, 2017, Trax announced that they had acquired Nielsen Store Observation (NSO) assets in the USA from Nielsen Corporation.\n\nTrax reduces the time an employee needs to spend on audits to check inventory, shelf display and product promotions. It is also gathers more extensive data such as product assortment, shelf space, pricing, promotions, shelf location and arrangement of products on display. This market intelligence is valuable to Retail and FMCG manufacturers because they pay large sums for space in supermarkets and stores. For example, in the US companies pay approximately $18 billion for shelf space.\n\nThe computer vision technology uses Artificial Intelligence, fine-grained image recognition, and machine learning engines to convert store images into shelf insights. Trax is able to recognise products that are similar or identical such as branded drinks or shampoo bottles whilst also being able to differentiate between them based on variety and size. It piloted its machine learning algorithms with initial customers, allowing its algorithm to learn about different products. As the company processes more images, the better it gets at recognising the same products in different shapes and sizes.. To date, Trax has recognized more than 8 billion images, and recognizes approximately 400,000 million new products per month.\n", "id": "47577902", "title": "Trax Image Recognition"}
{"url": "https://en.wikipedia.org/wiki?curid=47845063", "text": "Stochastic block model\n\nThe stochastic block model is a generative model for random graphs. This model tends to produce graphs containing \"communities\", subsets characterized by being connected with one another with particular edge densities. For example, edges may be more common within communities than between communities. The stochastic block model is important in statistics, machine learning, and network science, where it serves as a useful benchmark for the task of recovering community structure in graph data.\n\nThe stochastic block model takes the following parameters:\nThe edge set is then sampled at random as follows: any two vertices formula_6 and formula_7 are connected by an edge with probability formula_8.\n\nIf the probability matrix is a constant, in the sense that formula_9 for all formula_10, then the result is the Erdős–Rényi model formula_11. This case is degenerate—the partition into communities becomes irrelevant—but it illustrates a close relationship to the Erdős–Rényi model.\n\nThe \"planted partition model\" is the special case that the values of the probability matrix formula_5 are a constant formula_13 on the diagonal and another constant formula_14 off the diagonal. Thus two vertices within the same community share an edge with probability formula_13, while two vertices in different communities share an edge with probability formula_14. Sometimes it is this restricted model that is called the stochastic block model. The case where formula_17 is called an \"assortative\" model, while the case formula_18 is called \"dissortative\".\n\nReturning to the general stochastic block model, a model is called \"strongly assortative\" if formula_19 whenever formula_20: all diagonal entries dominate all off-diagonal entries. A model is called \"weakly assortative\" if formula_21 whenever formula_22: each diagonal entry is only required to dominate the rest of its own row and column. \"Dissortative\" forms of this terminology exist, by reversing all inequalities. Algorithmic recovery is often easier against block models with assortative or dissortative conditions of this form.\n\nMuch of the literature on algorithmic community detection addresses three statistical tasks: detection, partial recovery, and exact recovery.\n\nThe goal of detection algorithms is simply to determine, given a sampled graph, whether the graph has latent community structure. More precisely, a graph might be generated, with some known prior probability, from a known stochastic block model, and otherwise from a similar Erdos-Renyi model. The algorithmic task is to correctly identify which of these two underlying models generated the graph.\n\nIn partial recovery, the goal is to approximately determine the latent partition into communities, in the sense of finding a partition that is correlated with the true partition significantly better than a random guess.\n\nIn exact recovery, the goal is to recover the latent partition into communities exactly. The community sizes and probability matrix may be known or unknown.\n\nStochastic block models exhibit a sharp threshold effect reminiscent of percolation thresholds. Suppose that we allow the size formula_1 of the graph to grow, keeping the community sizes in fixed proportions. If the probability matrix remains fixed, tasks such as partial and exact recovery become feasible for all non-degenerate parameter settings. However, if we scale down the probability matrix at a suitable rate as formula_1 increases, we observe a sharp phase transition: for certain settings of the parameters, it will become possible to achieve recovery with probability tending to 1, whereas on the opposite side of the parameter threshold, the probability of recovery tends to 0 no matter what algorithm is used.\n\nFor partial recovery, the appropriate scaling is to take formula_25 for fixed formula_26, resulting in graphs of constant average degree. In the case of two equal-sized communities, in the assortative planted partition model with probability matrix\nformula_27\npartial recovery is feasible with probability formula_28 whenever formula_29, whereas any estimator fails partial recovery with probability formula_30 whenever formula_31.\n\nFor exact recovery, the appropriate scaling is to take formula_32, resulting in graphs of logarithmic average degree. Here a similar threshold exists: for the assortative planted partition model with formula_33 equal-sized communities, the threshold lies at formula_34. In fact, the exact recovery threshold is known for the fully general stochastic block model.\nIn principle, exact recovery can be solved in its feasible range using maximum likelihood, but this amounts to solving a constrained or regularized cut problem such as minimum bisection that is typically NP-complete. Hence, no known efficient algorithms will correctly compute the maximum-likelihood estimate in the worst case.\n\nHowever, a wide variety of algorithms perform well in the average case, and many high-probability performance guarantees have been proven for algorithms in both the partial and exact recovery settings. Successful algorithms include spectral clustering of the vertices, semidefinite programming, and forms of belief propagation, among others.\n\nSeveral variants of the model exist. One minor tweak allocates vertices to communities randomly, according to a categorical distribution, rather than in a fixed partition. More significant variants include the censored block model and the mixed-membership block model.\n", "id": "47845063", "title": "Stochastic block model"}
{"url": "https://en.wikipedia.org/wiki?curid=926722", "text": "Relational data mining\n\nRelational data mining is the data mining technique for relational\ndatabases. Unlike traditional data mining algorithms, which look for\npatterns in a single table (propositional patterns), \nrelational data mining algorithms look for patterns among multiple tables\n(relational patterns). For most types of propositional\npatterns, there are corresponding relational patterns. For example,\nthere are relational classification rules (relational classification), relational regression tree, and relational association rules.\n\nThere are several approaches to relational data mining:\n\nMulti-Relation Association Rules: Multi-Relation Association Rules (MRAR) is a new class of association rules which in contrast to primitive, simple and even multi-relational association rules (that are usually extracted from multi-relational databases), each rule item consists of one entity but several relations. These relations indicate indirect relationship between the entities. Consider the following MRAR where the first item consists of three relations \"live in\", \"nearby\" and \"humid\": “Those who \"live in\" a place which is \"near by\" a city with \"humid\" climate type and also are \"younger\" than 20 -> their \"health condition\" is good”. Such association rules are extractable from RDBMS data or semantic web data.\n\n\n\n\n", "id": "926722", "title": "Relational data mining"}
{"url": "https://en.wikipedia.org/wiki?curid=47937215", "text": "The Master Algorithm\n\nThe Master Algorithm: How the Quest for the Ultimate Learning Machine Will Remake Our World is a book by Pedro Domingos released in 2015. Domingos wrote the book in order to generate interest from people outside the field.\n\nThe book outlines five tribes of machine learning: inductive reasoning, connectionism, evolutionary computation, bayes theorem and analogical modelling. The author explains these tribes to the reader by referring to more understandable processes of logic, connections made in the brain, natural selection, probability and similarity judgements. Throughout the book, it is suggested that each different tribe has the potential to contribute to a unifying \"master algorithm\".\n\nTowards the end of the book the author pictures a \"master algorithm\" in the near future, where machine learning algorithms asymptotically grow to a perfect understanding of how the world and people in it work. Although the algorithm doesn't yet exist, he briefly reviews his own invention of the Markov logic network.\n\n", "id": "47937215", "title": "The Master Algorithm"}
{"url": "https://en.wikipedia.org/wiki?curid=44628821", "text": "Matrix regularization\n\nIn the field of statistical learning theory, matrix regularization generalizes notions of vector regularization to cases where the object to be learned is a matrix. The purpose of regularization is to enforce conditions, for example sparsity or smoothness, that can produce stable predictive functions. For example, in the more common vector framework, Tikhonov regularization optimizes over\n\nto find a vector, formula_2, that is a stable solution to the regression problem. When the system is described by a matrix rather than a vector, this problem can be written as\n\nwhere the vector norm enforcing a regularization penalty on formula_2 has been extended to a matrix norm on formula_5.\n\nMatrix Regularization has applications in matrix completion, multivariate regression, and multi-task learning. Ideas of feature and group selection can also be extended to matrices, and these can be generalized to the nonparametric case of multiple kernel learning.\n\nConsider a matrix formula_6 to be learned from a set of examples, formula_7, where formula_8 goes from formula_9 to formula_10, and formula_11 goes from formula_9 to formula_13. Let each input matrix formula_14 be formula_15, and let formula_6 be of size formula_17. A general model for the output formula_18 can be posed as\n\nwhere the inner product is the Frobenius inner product. For different applications the matrices formula_14 will have different forms, but for each of these the optimization problem to infer formula_6 can be written as\n\nwhere formula_23 defines the empirical error for a given formula_6, and formula_25 is a matrix regularization penalty. The function formula_25 is typically chosen to be convex, and is often selected to enforce sparsity (using formula_27-norms) and/or smoothness (using formula_28-norms). Finally, formula_6 is in the space of matrices, formula_30, with Forbenius inner product.\n\nIn the problem of matrix completion, the matrix formula_31 takes the form\n\nwhere formula_33 and formula_34 are the canonical basis in formula_35 and formula_36. In this case the role of the Frobenius inner product is to select individual elements, formula_37, from the matrix formula_6. Thus, the output, formula_18, is a sampling of entries from the matrix formula_6.\n\nThe problem of reconstructing formula_6 from a small set of sampled entries is possible only under certain restrictions on the matrix, and these restrictions can be enforced by a regularization function. For example, it might be assumed that formula_6 is low-rank, in which case the regularization penalty can take the form of a nuclear norm.\n\nwhere formula_44, with formula_8 from formula_9 to formula_47, are the singular values of formula_6.\n\nModels used in multivariate regression are parameterized by a matrix of coefficients. In the Frobenius inner product above, each matrix formula_5 is\n\nsuch that the output of the inner product is the dot product of one row of the input with one column of the coefficient matrix. The familiar form of such models is\n\nMany of the vector norms used in single variable regression can be extended to the multivariate case. One example is the squared Frobenius norm, which can be viewed as an formula_28-norm acting either entrywise, or on the singular values of the matrix:\n\nIn the multivariate case the effect of regularizing with the Frobenius norm is the same as the vector case; very complex models will have larger norms, and, thus, will be penalized more.\n\nThe setup for multi-task learning is almost the same as the setup for multivariate regression. The primary difference is that the input variables are also indexed by task (columns of formula_54). The representation with the Frobenius inner product is then\n\nThe role of matrix regularization in this setting can be the same as in multivariate regression, but matrix norms can also be used to couple learning problems across tasks. In particular, note that for the optimization problem\n\nthe solutions corresponding to each column of formula_54 are decoupled. That is, the same solution can be found by solving the joint problem, or by solving an isolated regression problem for each column. The problems can be coupled by adding an additional regulatization penalty on the covariance of solutions\n\nwhere formula_59 models the relationship between tasks. This scheme can be used to both enforce similarity of solutions across tasks, and to learn the specific structure of task similarity by alternating between optimizations of formula_6 and formula_59. When the relationship between tasks is known to lie on a graph, the Laplacian matrix of the graph can be used to couple the learning problems.\n\nRegularization by spectral filtering has been used to find stable solutions to problems such as those discussed above by addressing ill-posed matrix inversions (see for example Filter function for Tikhonov regularization). In many cases the regularization function acts on the input (or kernel) to ensure a bounded inverse by eliminating small singular values, but it can also be useful to have spectral norms that act on the matrix that is to be learned.\n\nThere are a number of matrix norms that act on the singular values of the matrix. Frequently used examples include the Schatten p-norms, with \"p\" = 1 or 2. For example, matrix regularization with a Schatten 1-norm, also called the nuclear norm, can be used to enforce sparsity in the spectrum of a matrix. This has been used in the context of matrix completion when the matrix in question is believed to have a restricted rank. In this case the optimization problem becomes:\n\nSpectral Regularization is also used to enforce a reduced rank coefficient matrix in multivariate regression. In this setting, a reduced rank coefficient matrix can be found by keeping just the top formula_10 singular values, but this can be extended to keep any reduced set of singular values and vectors.\n\nSparse optimization has become the focus of much research interest as a way to find solutions that depend on a small number of variables (see e.g. the Lasso method). In principle, entry-wise sparsity can be enforced by penalizing the entry-wise formula_65-norm of the matrix, but the formula_65-norm is not convex. In practice this can be implemented by convex relaxation to the formula_27-norm. While entry-wise regularization with an formula_27-norm will find solutions with a small number of nonzero elements, applying an formula_27-norm to different groups of variables can enforce structure in the sparsity of solutions.\n\nThe most straightforward example of structured sparsity uses the formula_70 norm with formula_71 and formula_72:\n\nFor example, the formula_74 norm is used in multi-task learning to group features across tasks, such that all the elements in a given row of the coefficient matrix can be forced to zero as a group. The grouping effect is achieved by taking the formula_28-norm of each row, and then taking the total penalty to be the sum of these row-wise norms. This regularization results in rows that will tend to be all zeros, or dense. The same type of regularization can be used to enforce sparsity column-wise by taking the formula_28-norms of each column.\n\nMore generally, the formula_74 norm can be applied to arbitrary groups of variables:\n\nwhere the index formula_79 is across groups of variables, and formula_80 indicates the cardinality of group formula_79.\n\nAlgorithms for solving these group sparsity problems extend the more well-known Lasso and group Lasso methods by allowing overlapping groups, for example, and have been implemented via matching pursuit: and proximal gradient methods. By writing the proximal gradient with respect to a given coefficient, formula_82, it can be seen that this norm enforces a group-wise soft threshold\n\nwhere formula_84 is the indicator function for group norms formula_85.\n\nThus, using formula_74 norms it is straightforward to enforce structure in the sparsity of a matrix either row-wise, column-wise, or in arbitrary blocks. By enforcing group norms on blocks in multivariate or multi-task regression, for example, it is possible to find groups of input and output variables, such that defined subsets of output variables (columns in the matrix formula_54) will depend on the same sparse set of input variables.\n\nThe ideas of structured sparsity and feature selection can be extended to the nonparametric case of multiple kernel learning. This can be useful when there are multiple types of input data (color and texture, for example) with different appropriate kernels for each, or when the appropriate kernel is unknown. If there are two kernels, for example, with feature maps formula_88 and formula_89 that lie in corresponding reproducing kernel Hilbert spaces formula_90, then a larger space, formula_91, can be created as the sum of two spaces:\n\nassuming linear independence in formula_88 and formula_89. In this case the formula_74-norm is again the sum of norms:\n\nThus, by choosing a matrix regularization function as this type of norm, it is possible to find a solution that is sparse in terms of which kernels are used, but dense in the coefficient of each used kernel. Multiple kernel learning can also be used as a form of nonlinear variable selection, or as a model aggregation technique (e.g. by taking the sum of squared norms and relaxing sparsity constraints). For example, each kernel can be taken to be the Gaussian kernel with a different width.\n\n", "id": "44628821", "title": "Matrix regularization"}
{"url": "https://en.wikipedia.org/wiki?curid=48777199", "text": "Manifold regularization\n\nIn machine learning, Manifold regularization is a technique for using the shape of a dataset to constrain the functions that should be learned on that dataset. In many machine learning problems, the data to be learned do not cover the entire input space. For example, a facial recognition system may not need to classify any possible image, but only the subset of images that contain faces. The technique of manifold learning assumes that the relevant subset of data comes from a manifold, a mathematical structure with useful properties. The technique also assumes that the function to be learned is \"smooth\": data with different labels are not likely to be close together, and so the labeling function should not change quickly in areas where there are likely to be many data points. Because of this assumption, a manifold regularization algorithm can use unlabeled data to inform where the learned function is allowed to change quickly and where it is not, using an extension of the technique of Tikhonov regularization. Manifold regularization algorithms can extend supervised learning algorithms in semi-supervised learning and transductive learning settings, where unlabeled data are available. The technique has been used for applications including medical imaging, geographical imaging, and object recognition.\n\nManifold regularization is a type of regularization, a family of techniques that reduces overfitting and ensures that a problem is well-posed by penalizing complex solutions. In particular, manifold regularization extends the technique of Tikhonov regularization as applied to Reproducing kernel Hilbert spaces (RKHSs). Under standard Tikhonov regularization on RKHSs, a learning algorithm attempts to learn a function formula_1 from among a hypothesis space of functions formula_2. The hypothesis space is an RKHS, meaning that it is associated with a kernel formula_3, and so every candidate function formula_1 has a norm formula_5, which represents the complexity of the candidate function in the hypothesis space. When the algorithm considers a candidate function, it takes its norm into account in order to penalize complex functions.\n\nFormally, given a set of labeled training data formula_6 with formula_7 and a loss function formula_8, a learning algorithm using Tikhonov regularization will attempt to solve the expression\n\nwhere formula_10 is a hyperparameter that controls how much the algorithm will prefer simpler functions to functions that fit the data better.\n\nManifold regularization adds a second regularization term, the \"intrinsic regularizer\", to the \"ambient regularizer\" used in standard Tikhonov regularization. Under the manifold assumption in machine learning, the data in question do not come from the entire input space formula_11, but instead from a nonlinear manifold formula_12. The geometry of this manifold, the intrinsic space, is used to determine the regularization norm.\n\nThere are many possible choices for formula_13. Many natural choices involve the gradient on the manifold formula_14, which can provide a measure of how smooth a target function is. A smooth function should change slowly where the input data are dense; that is, the gradient formula_15 should be small where the \"marginal probability density\" formula_16, the probability density of a randomly drawn data point appearing at formula_17, is large. This gives one appropriate choice for the intrinsic regularizer:\n\nIn practice, this norm cannot be computed directly because the marginal distribution formula_19 is unknown, but it can be estimated from the provided data. In particular, if the distances between input points are interpreted as a graph, then the Laplacian matrix of the graph can help to estimate the marginal distribution. Suppose that the input data include formula_20 labeled examples (pairs of an input formula_17 and a label formula_22) and formula_23 unlabeled examples (inputs without associated labels). Define formula_24 to be a matrix of edge weights for a graph, where formula_25 is a distance measure between the data points formula_26 and formula_27. Define formula_28 to be a diagonal matrix with formula_29 and formula_30 to be the Laplacian matrix formula_31. Then, as the number of data points formula_32 increases, formula_30 converges to the Laplace-Beltrami operator formula_34, which is the divergence of the gradient formula_35. Then, if formula_36 is a vector of the values of formula_1 at the data, formula_38, the intrinsic norm can be estimated:\n\nAs the number of data points formula_32 increases, this empirical definition of formula_41 converges to the definition when formula_19 is known.\n\nUsing the weights formula_43 and formula_44 for the ambient and intrinsic regularizers, the final expression to be solved becomes:\n\nAs with other kernel methods, formula_2 may be an infinite-dimensional space, so if the regularization expression cannot be solved explicitly, it is impossible to search the entire space for a solution. Instead, a representer theorem shows that under certain conditions on the choice of the norm formula_13, the optimal solution formula_48 must be a linear combination of the kernel centered at each of the input points: for some weights formula_49,\n\nUsing this result, it is possible to search for the optimal solution formula_48 by searching the finite-dimensional space defined by the possible choices of formula_49.\n\nManifold regularization can extend a variety of algorithms that can be expressed using Tikhonov regularization, by choosing an appropriate loss function formula_8 and hypothesis space formula_2. Two commonly used examples are the families of support vector machines and regularized least squares algorithms. (Regularized least squares includes the ridge regression algorithm; the related algorithms of LASSO and elastic net regularization can be expressed as support vector machines.) The extended versions of these algorithms are called Laplacian Regularized Least Squares (abbreviated LapRLS) and Laplacian Support Vector Machines (LapSVM), respectively.\n\nRegularized least squares (RLS) is a family of regression algorithms: algorithms that predict a value formula_55 for its inputs formula_17, with the goal that the predicted values should be close to the true labels for the data. In particular, RLS is designed to minimize the mean squared error between the predicted values and the true labels, subject to regularization. Ridge regression is one form of RLS; in general, RLS is the same as ridge regression combined with the kernel method. The problem statement for RLS results from choosing the loss function formula_8 in Tikhonov regularization to be the mean squared error:\n\nThanks to the representer theorem, the solution can be written as a weighted sum of the kernel evaluated at the data points:\n\nand solving for formula_60 gives:\n\nwhere formula_3 is defined to be the kernel matrix, with formula_63, and formula_64 is the vector of data labels.\n\nAdding a Laplacian term for manifold regularization gives the Laplacian RLS statement:\n\nThe representer theorem for manifold regularization again gives\n\nand this yields an expression for the vector formula_60. Letting formula_3 be the kernel matrix as above, formula_64 be the vector of data labels, and formula_70 be the formula_71 block matrix formula_72:\n\nwith a solution of\n\nLapRLS has been applied to problems including sensor networks,\nmedical imaging,\nobject detection,\nspectroscopy,\ndocument classification,\ndrug-protein interactions,\nand compressing images and videos.\n\nSupport vector machines (SVMs) are a family of algorithms often used for classifying data into two or more groups, or \"classes\". Intuitively, an SVM draws a boundary between classes so that the closest labeled examples to the boundary are as far away as possible. This can be directly expressed as a linear program, but it is also equivalent to Tikhonov regularization with the hinge loss function, formula_75:\n\nAdding the intrinsic regularization term to this expression gives the LapSVM problem statement:\n\nAgain, the representer theorem allows the solution to be expressed in terms of the kernel evaluated at the data points:\n\nformula_79 can be found by writing the problem as a linear program and solving the dual problem. Again letting formula_3 be the kernel matrix and formula_70 be the block matrix formula_72, the solution can be shown to be\n\nwhere formula_84 is the solution to the dual problem\n\nand formula_86 is defined by\n\nLapSVM has been applied to problems including geographical imaging,\nmedical imaging,\nface recognition,\nmachine maintenance,\nand brain-computer interfaces.\n\n\n\n", "id": "48777199", "title": "Manifold regularization"}
{"url": "https://en.wikipedia.org/wiki?curid=48833041", "text": "Error tolerance (PAC learning)\n\nIn PAC learning, error tolerance refers to the ability of an algorithm to learn when the examples received have been corrupted in some way. In fact, this is a very common and important issue since in many applications it is not possible to access noise-free data. Noise can interfere with the learning process at different levels: the algorithm may receive data that have been occasionally mislabeled, or the inputs may have some false information, or the classification of the examples may have been maliciously adulterated.\n\nIn the following, let formula_1 be our formula_2-dimensional input space. Let formula_3 be a class of functions that we wish to use in order to learn a formula_4-valued target function formula_5 defined over formula_1. Let formula_7 be the distribution of the inputs over formula_1. The goal of a learning algorithm formula_9 is to choose the best function formula_10 such that it minimizes formula_11. Let us suppose we have a function formula_12 that can measure the complexity of formula_5. Let formula_14 be an oracle that, whenever called, returns an example formula_15 and its correct label formula_16.\n\nWhen no noise corrupts the data, we can define learning in the Valiant setting:\n\nDefinition:\nWe say that formula_5 is efficiently learnable using formula_3 in the Valiant setting if there exists a learning algorithm formula_9 that has access to formula_14 and a polynomial formula_21 such that for any formula_22 and formula_23 it outputs, in a number of calls to the oracle bounded by formula_24 , a function formula_10 that satisfies with probability at least formula_26 the condition formula_27.\n\nIn the following we will define learnability of formula_5 when data have suffered some modification.\n\nIn the classification noise model a noise rate formula_29 is introduced. Then, instead of formula_30 that returns always the correct label of example formula_15, algorithm formula_32 can only call a faulty oracle formula_33 that will flip the label of formula_15 with probability formula_35. As in the Valiant case, the goal of a learning algorithm formula_9 is to choose the best function formula_10 such that it minimizes formula_11. In applications it is difficult to have access to the real value of formula_35, but we assume we have access to its upperbound formula_40. Note that if we allow the noise rate to be formula_41, then learning becomes impossible in any amount of computation time, because every label conveys no information about the target function.\n\nDefinition:\nWe say that formula_5 is efficiently learnable using formula_3 in the classification noise model if there exists a learning algorithm formula_9 that has access to formula_33 and a polynomial formula_21 such that for any formula_47, formula_48 and formula_49 it outputs, in a number of calls to the oracle bounded by formula_50 , a function formula_10 that satisfies with probability at least formula_26 the condition formula_27.\n\nStatistical Query Learning is a kind of active learning problem in which the learning algorithm formula_9 can decide if to request information about the likelihood formula_55 that a function formula_5 correctly labels example formula_15, and receives an answer accurate within a tolerance formula_58. Formally, whenever the learning algorithm formula_9 calls the oracle formula_60, it receives as feedback probability formula_61, such that formula_62.\n\nDefinition:\nWe say that formula_5 is efficiently learnable using formula_3 in the statistical query learning model if there exists a learning algorithm formula_9 that has access to formula_60 and polynomials formula_67, formula_68, and formula_69 such that for any formula_22 the following hold:\n\nNote that the confidence parameter formula_80 does not appear in the definition of learning. This is because the main purpose of formula_80 is to allow the learning algorithm a small probability of failure due to an unrepresentative sample. Since now formula_60 always guarantees to meet the approximation criterion formula_62, the failure probability is no longer needed.\n\nThe statistical query model is strictly weaker than the PAC model: any efficiently SQ-learnable class is efficiently PAC learnable in the presence of classification noise, but there exist efficient PAC-learnable problems such as parity that are not efficiently SQ-learnable.\n\nIn the malicious classification model an adversary generates errors to foil the learning algorithm. This setting describes situations of error burst, which may occur when for a limited time transmission equipment malfunctions repeatedly. Formally, algorithm formula_9 calls an oracle formula_85 that returns a correctly labeled example formula_15 drawn, as usual, from distribution formula_7 over the input space with probability formula_88, but it returns with probability formula_89 an example drawn from a distribution that is not related to formula_7. \nMoreover, this maliciously chosen example may strategically selected by an adversary who has knowledge of formula_5, formula_89, formula_7, or the current progress of the learning algorithm.\n\nDefinition:\nGiven a bound formula_94 for formula_95, we say that formula_5 is efficiently learnable using formula_3 in the malicious classification model, if there exist a learning algorithm formula_9 that has access to formula_85 and a polynomial formula_100 such that for any formula_22, formula_23 it outputs, in a number of calls to the oracle bounded by formula_103 , a function formula_10 that satisfies with probability at least formula_26 the condition formula_27.\n\nIn the nonuniform random attribute noise model the algorithm is learning a Boolean function, a malicious oracle formula_107 may flip each formula_108-th bit of example formula_109 independently with probability formula_110.\n\nThis type of error can irreparably foil the algorithm, in fact the following theorem holds:\n\nIn the nonuniform random attribute noise setting, an algorithm formula_9 can output a function formula_10 such that formula_113 only if formula_114.\n", "id": "48833041", "title": "Error tolerance (PAC learning)"}
{"url": "https://en.wikipedia.org/wiki?curid=48841414", "text": "Multiple instance learning\n\nDepending on the type and variation in training data, machine learning can be roughly categorized into three frameworks: supervised learning, unsupervised learning, and reinforcement learning. Multiple instance learning (MIL) falls under the supervised learning framework, where every training instance has a label, either discrete or real valued. MIL deals with problems with incomplete knowledge of labels in training sets. More precisely, in multiple-instance learning, the training set consists of labeled “bags”, each of which is a collection of unlabeled instances. A bag is positively labeled if at least one instance in it is positive, and is negatively labeled if all instances in it are negative. The goal of the MIL is to predict the labels of new, unseen bags.\n\nConvenient and simple example for MIL was given in. Imagine several people, and each of them has a key chain that contains few keys. Some of these people are able to enter a certain room, and some aren’t. The task is then to predict whether a certain key or a certain key chain can get you into that room. To solve this problem we need to find the exact key that is common for all the “positive” key chains. If we can correctly identify this key, we can also correctly classify an entire key chain - positive if it contains the required key, or negative if it doesn’t.\n\nKeeler et al., in his work in early 1990s was the first one to explore the area of MIL. The actual term multi-instance learning was introduced in the middle of the 1990s, by Dietterich et al. while they were investigating the problem of drug activity prediction. They tried to create a learning systems that could predict whether new molecule was qualified to make some drug, or not, through analyzing a collection of known molecules. Molecules can have many alternative low-energy states, but only one, or some of them, are qualified to make a drug. The problem arose because scientists could only determine if molecule is qualified, or not, but they couldn’t say exactly which of its low-energy shapes are responsible for that. \nOne of the proposed ways to solve this problem was to use supervised learning, and regard all the low-energy shapes of the qualified molecule as positive training instances, while all of the low-energy shapes of unqualified molecules as negative instances. Dietterich et al. showed that such method would have a high false positive noise, from all low-energy shapes that are mislabeled as positive, and thus wasn’t really useful. Their approach was to regard each molecule as a labeled bag, and all the alternative low-energy shapes of that molecule as instances in the bag, without individual labels. Thus formulating multiple-instance learning. \nSolution to the multiple instance learning problem that Dietterich et al. proposed is three axis-parallel rectangle (APR) algorithm. It attempts to search for appropriate axis-parallel rectangles constructed by the conjunction of the features. They tested the algorithm on Musk dataset, which is a concrete test data of drug activity prediction and the most popularly used benchmark in multiple-instance learning. APR algorithm achieved the best result, but it should be noted that APR was designed with Musk data in mind.\n\nProblem of multi-instance learning is not unique to drug finding. In 1998, Maron and Ratan found another application of multiple instance learning to scene classification in machine vision, and devised Diverse Density framework. Given an image, an instance is taken to be one or more fixed-size subimages, and the bag of instances is taken to be the entire image. An image is labeled positive if it contains the target scene - a waterfall, for example - and negative otherwise. Multiple instance learning can be used to learn the properties of the subimages which characterize the target scene. From there on, these frameworks have been applied to a wide spectrum of applications, ranging from image concept learning and text categorization, to stock market prediction.\nIf the space of instances is formula_1, then the set of bags is the set of functions formula_2, which is isomorphic to the set of multi-subsets of formula_1. For each bag formula_4 and each instance formula_5, formula_6 is viewed as the number of times formula_7 occurs in formula_8. Let formula_9 be the space of labels, then a \"multiple instance concept\" is a map formula_10. The goal of MIL is to learn such a concept. The remainder of the article will focus on binary classification, where formula_11.\n\nMost of the work on Multiple instance learning, including Dietterich et al. (1997) and Maron & Lozano-P´erez (1997) early papers, make the assumption regarding the relationship between the instances within a bag and the class label of the bag. Because of its importance, that assumption is often called standard MI assumption.\n\nThe standard assumption takes each instance formula_12 to have an associated label formula_13 which is hidden to the learner. The pair formula_14 is called an\"instance-level concept\". A bag is now viewed as a multiset of instance-level concepts, and is labeled positive if at least one of its instances has a positive label, and negative if all of its instances have negative labels. Formally, let formula_15 be a bag. The label of formula_8 is then formula_17. Standard MI assumption is asymmetric, which means that if the positive and negative labels are reversed, the assumption has a different meaning. Because of that, when we use this assumption, we need to be clear which label should be the positive one.\n\nStandard assumption might be viewed as too strict, and therefore in the recent years, researchers tried to relax that position, which gave rise to other more loose assumptions. Reason for this is the belief that standard MI assumption is appropriate for the Musk dataset, but since MLI can be applied to numerous other problems, some different assumptions could probably be more appropriate. Guided by that idea, Weidmann formulated a hierarchy of generalized instance-based assumptions for MIL. It consists of the standard MI assumption and three types of generalized MI assumptions, each more general than the last, formula_18, with the count-based assumption being the most general and the standard assumption being the least general. One would expect an algorithm which performs well under one of these assumptions to perform at least as well under the less general assumptions.\n\nThe presence-based assumption is a generalization of the standard assumption, wherein a bag must contain one or more instances that belong to a set of required instance-level concepts in order to be labeled positive. Formally, let formula_19 be the set of required instance-level concepts, and let formula_20 denote the number of times the instance-level concept formula_21 occurs in the bag formula_8. Then formula_23 for all formula_24. Note that, by taking formula_25 to contain only one instance-level concept, the presence-based assumption reduces to the standard assumption.\n\nA further generalization comes with the threshold-based assumption, where each required instance-level concept must occur not only once in a bag, but some minimum (threshold) number of times in order for the bag to be labeled positive. With the notation above, to each required instance-level concept formula_24 is associated a threshold formula_27. For a bag formula_8, formula_29 for all formula_24.\n\nThe count-based assumption is a final generalization which enforces both lower and upper bounds for the number of times a required concept can occur in a positively labeled bag. Each required instance-level concept formula_24 has a lower threshold formula_27 and upper threshold formula_33 with formula_34. A bag formula_8 is labeled according to formula_36 for all formula_24.\n\nScott, Zhang, and Brown (2005) describe another generalization of the standard model, which they call \"generalized multiple instance learning\" (GMIL). The GMIL assumption specifies a set of required instances formula_38. A bag formula_39 is labeled positive if it contains instances which are sufficiently close to at least formula_40 of the required instances formula_41. Under only this condition, the GMIL assumption is equivalent to the presence-based assumption. However, Scott et. al. describe a further generalization in which there is a set of attraction points formula_38 and a set of repulsion points formula_43. A bag is labeled positive if and only if it contains instances which are sufficiently close to at least formula_40 of the attraction points and are sufficiently close to at most formula_45 of the repulsion points. This condition is strictly more general than the presence-based, though it does not fall within the above hierarchy.\n\nIn contrast to the previous assumptions where the bags were viewed as fixed, the collective assumption views a bag formula_8 as a distribution formula_47 over instances formula_1, and similarly view labels as a distribution formula_49 over instances. The goal of an algorithm operating under the collective assumption is then to model the distribution formula_50.\n\nSince formula_47 is typically considered fixed but unknown, algorithms instead focus on computing the empirical version: formula_52, where formula_53 is the number of instances in bag formula_8. Since formula_49 is also typically taken to be fixed but unknown, most collective-assumption based methods focus on learning this distribution, as in the single-instance version.\n\nWhile the collective assumption weights every instance with equal importance, Foulds extended the collective assumption to incorporate instance weights. The weighted collective assumption is then that formula_56, where formula_57 is a weight function over instances and formula_58.\n\n There are two major flavors of algorithms for Multiple Instance Learning: instance-based and metadata-based, or embedding-based algorithms. The term \"instance-based\" denotes that the algorithm attempts to find a set of representative instances based on an MI assumption and classify future bags from these representatives. By contrast, metadata-based algorithms make no assumptions about the relationship between instances and bag labels, and instead try to extract instance-independent information (or metadata) about the bags in order to learn the concept. For a survey of some of the modern MI algorithms see Foulds and Frank \nThe earliest proposed MI algorithms were a set of \"iterated-discrimination\" algorithms developed by Dietterich et. al, and Diverse Density developed by Maron and Lozano-Pérez. Both of these algorithms operated under the standard assumption.\n\nBroadly, all of the iterated-discrimination algorithms consist of two phases. The first phase is to grow an axis parallel rectangle (APR) which contains at least one instance from each positive bag and no instances from any negative bags. This is done iteratively: starting from a random instance formula_59 in a positive bag, the APR is expanded to the smallest APR covering any instance formula_60 in a new positive bag formula_61. This process is repeated until the APR covers at least one instance from each positive bag. Then, each instance formula_62 contained in the APR is given a \"relevance\", corresponding to how many negative points it excludes from the APR if removed. The algorithm then selects candidate representative instances in order of decreasing relevance, until no instance contained in a negative bag is also contained in the APR. The algorithm repeats these growth and representative selection steps until convergence, where APR size at each iteration is taken to be only along candidate representatives.\n\nAfter the first phase, the APR is thought to tightly contain only the representative attributes. The second phase expands this tight APR as follows: a Gaussian distribution is centered at each attribute and a looser APR is drawn such that positive instances will fall outside the tight APR with fixed probability. Though iterated discrimination techniques work well with the standard assumption, they do not generalize well to other MI assumptions.\n\nIn its simplest form, Diverse Density (DD) assumes a single representative instance formula_63 as the concept. This representative instance must be \"dense\" in that it is much closer to instances from positive bags than from negative bags, as well as \"diverse\" in that it is close to at least one instance from each positive bag.\n\nLet formula_64 be the set of positively labeled bags and let formula_65 be the set of negatively labeled bags, then the best candidate for the representative instance is given by formula_66, where the diverse density formula_67 under the assumption that bags are independently distributed given the concept formula_63. Letting formula_69 denote the jth instance of bag i, the noisy-or model gives:\nformula_72 is taken to be the scaled distance formula_73 where formula_74 is the scaling vector. This way, if every positive bag has an instance close to formula_75, then formula_76 will be high for each formula_77, but if any negative bag formula_78 has an instance close to formula_75, formula_80 will be low. Hence, formula_81 is high only if every positive bag has an instance close to formula_75 and no negative bags have an instance close to formula_75. The candidate concept formula_84 can be obtained through gradient methods. Classification of new bags can then be done by evaluating proximity to formula_84. Though Diverse Density was originally proposed by Maron et. al. in 1998, more recent MIL algorithms use the DD framework, such as EM-DD in 2001 and DD-SVM in 2004, and MILES in 2006 \n\nA number of single-instance algorithms have also been adapted to a multiple-instance context under the standard assumption, including\n\nPost 2000, there was a movement away from the standard assumption and the development of algorithms designed to tackle the more general assumptions listed above.\n\n\nBecause of the high dimensionality of the new feature space and the cost of explicitly enumerating all APRs of the original instance space, GMIL-1 is inefficient both in terms of computation and memory. GMIL-2 was developed as a refinement of GMIL-1 in an effort to improve efficiency. GMIL-2 pre-processes the instances to find a set of candidate representative instances. GMIL-2 then maps each bag to a Boolean vector, as in GMIL-1, but only considers APRs corresponding to unique subsets of the candidate representative instances. This significantly reduces the memory and computational requirements.\n\n\nBy mapping each bag to a feature vector of metadata, metadata-based algorithms allow the flexibility of using an arbitrary single-instance algorithm to perform the actual classification task. Future bags are simply mapped (embedded) into the feature space of metadata and labeled by the chosen classifier. Therefore, much of the focus for metadata-based algorithms is on what features or what type of embedding leads to effective classification. Note that some of the previously mentioned algorithms, such as TLC and GMIL could be considered metadata-based.\n\nThey define two variations of kNN, Bayesian-kNN and citation-kNN, as adaptations of the traditional nearest-neighbor problem to the multiple-instance setting.\n\nSo far this article has considered multiple instance learning exclusively in the context of binary classifiers. However, the generalizations of single-instance binary classifiers can carry over to the multiple-instance case.\n\n\n", "id": "48841414", "title": "Multiple instance learning"}
{"url": "https://en.wikipedia.org/wiki?curid=48827727", "text": "Learnable function class\n\nIn statistical learning theory, a learnable function class is a set of functions for which an algorithm can be devised to asymptotically minimize the expected risk, uniformly over all probability distributions. The concept of learnable classes are closely related to regularization in machine learning, and provides large sample justifications for certain learning algorithms.\n\nLet formula_1 be the sample space, where formula_2 are the labels and formula_3 are the covariates (predictors). formula_4 is a collection of mappings (functions) under consideration to link formula_3 to formula_2. formula_7 is a pre-given loss function (usually non-negative). Given a probability distribution formula_8 on formula_9, define the expected risk formula_10 to be:\nThe general goal in statistical learning is to find the function in formula_12 that minimizes the expected risk. That is, to find solutions to the following problem:\nBut in practice the distribution formula_14 is unknown, and any learning task can only be based on finite samples. Thus we seek instead to find an algorithm that asymptotically minimizes the empirical risk, i.e., to find a sequence of functions formula_15 that satisfies\nOne usual algorithm to find such a sequence is through empirical risk minimization.\n\nWe can make the condition given in the above equation stronger by requiring that the convergence is uniform for all probability distributions. That is:\n\nThe intuition behind the more strict requirement is as such: the rate at which sequence formula_17 converges to the minimizer of the expected risk can be very different for different formula_8. Because in real world the true distribution formula_14 is always unknown, we would want to select a sequence that performs well under all cases.\n\nHowever, by the no free lunch theorem, such a sequence that satisfies () does not exist if formula_12 is too complex. This means we need to be careful and not allow too \"many\" functions in formula_12 if we want () to be a meaningful requirement. Specifically, function classes that ensure the existence of a sequence formula_17 that satisfies () are known as learnable classes.\n\nIt is worth noting that at least for supervised classification and regression problems, if a function class is learnable, then the empirical risk minimization automatically satisfies (). Thus in these settings not only do we know that the problem posed by () is solvable, we also immediately have an algorithm that gives the solution.\n\nIf the true relationship between formula_2 and formula_3 is formula_25, then by selecting the appropriate loss function, formula_26 can always be expressed as the minimizer of the expected loss across all possible functions. That is,\n\nHere we let formula_28 be the collection of all possible functions mapping formula_29 onto formula_30. formula_26 can be interpreted as the actual data generating mechanism. However, the no free lunch theorem tells us that in practice, with finite samples we cannot hope to search for the expected risk minimizer over formula_28. Thus we often consider a subset of formula_28, formula_12, to carry out searches on. By doing so, we risk that formula_26 might not be an element of formula_12. This tradeoff can be mathematically expressed as\n\nIn the above decomposition, part formula_37 does not depend on the data and is non-stochastic. It describes how far away our assumptions (formula_12) are from the truth (formula_28). formula_37 will be strictly greater than 0 if we make assumptions that are too strong (formula_12 too small). On the other hand, failing to put enough restrictions on formula_12 will cause it to be not learnable, and part formula_43 will not stochastically converge to 0. This is the well-known overfitting problem in statistics and machine learning literature.\n\nA good example where learnable classes are used is the so-called Tikhonov regularization in reproducing kernel Hilbert space (RKHS). Specifically, let formula_44 be an RKHS, and formula_45 be the norm on formula_44 given by its inner product. It is shown in that formula_47 is a learnable class for any finite, positive formula_48. The empirical minimization algorithm to the dual form of this problem is\n\nThis was first introduced by Tikhonov to solve ill-posed problems. Many statistical learning algorithms can be expressed in such a form (for example, the well-known ridge regression).\n\nThe tradeoff between formula_43 and formula_37 in () is geometrically more intuitive with Tikhonov regularization in RKHS. We can consider a sequence of formula_52, which are essentially balls in formula_44 with centers at 0. As formula_48 gets larger, formula_55 gets closer to the entire space, and formula_37 is likely to become smaller. However we will also suffer smaller convergence rates in formula_43. The way to choose an optimal formula_48 in finite sample settings is usually through cross-validation.\n\nPart formula_43 in () is closely linked to empirical process theory in statistics, where the empirical risk formula_60 are known as empirical processes. In this field, the function class formula_12 that satisfies the stochastic convergence\n\nare known as uniform Glivenko–Cantelli classes. It has been shown that under certain regularity conditions, learnable classes and uniformly Glivenko-Cantelli classes are equivalent. Interplay between formula_43 and formula_37 in statistics literature is often known as the bias-variance tradeoff.\n\nHowever, note that in the authors gave an example of stochastic convex optimization for General Setting of Learning where learnability is not equivalent with uniform convergence.\n", "id": "48827727", "title": "Learnable function class"}
{"url": "https://en.wikipedia.org/wiki?curid=48987892", "text": "Isotropic position\n\nIn the fields of machine learning, the theory of computation, and random matrix theory, a probability distribution over vectors is said to be in isotropic position if its covariance matrix is equal to the identity matrix. \n\nLet formula_1 be a distribution over vectors in the vector space formula_2.\nThen formula_1 is in isotropic position if, for vector formula_4 sampled from the distribution,\n\nA \"set\" of vectors is said to be in isotropic position if the uniform distribution over that set is in isotropic position. In particular, every orthonormal set of vectors is isotropic.\n\nAs a related definition, a convex body formula_6 in formula_2 is called isotropic if it has volume formula_8, center of mass at the origin, and there is a constant formula_9 such that\n\nfor all vectors formula_11 in formula_2; here formula_13 stands \nfor the standard Euclidean norm.\n\n", "id": "48987892", "title": "Isotropic position"}
{"url": "https://en.wikipedia.org/wiki?curid=48844125", "text": "Structured sparsity regularization\n\nStructured sparsity regularization is a class of methods, and an area of research in statistical learning theory, that extend and generalize sparsity regularization learning methods. Both sparsity and structured sparsity regularization methods seek to exploit the assumption that the output variable formula_1 (i.e., response, or dependent variable) to be learned can be described by a reduced number of variables in the input space formula_2 (i.e., the domain, space of features or explanatory variables). \"Sparsity regularization methods\" focus on selecting the input variables that best describe the output. \"Structured sparsity regularization methods\" generalize and extend sparsity regularization methods, by allowing for optimal selection over structures like groups or networks of input variables in formula_2.\n\nCommon motivation for the use of structured sparsity methods are model interpretability, high-dimensional learning (where dimensionality of formula_2 may be higher than the number of observations formula_5), and reduction of computational complexity. Moreover, structured sparsity methods allow to incorporate prior assumptions on the structure of the input variables, such as overlapping groups, non-overlapping groups, and acyclic graphs. Examples of uses of structured sparsity methods include face recognition, magnetic resonance image (MRI) processing, socio-linguistic analysis in natural language processing, and analysis of genetic expression in breast cancer.\n\nConsider the linear kernel regularized empirical risk minimization problem with a loss function formula_6 and the formula_7 \"norm\" as the regularization penalty:\nwhere formula_9, and formula_10 denotes the formula_7 \"norm\", defined as the number of nonzero entries of the vector formula_12. formula_13 is said to be sparse if formula_14. Which means that the output formula_15 can be described by a small subset of input variables.\n\nMore generally, assume a dictionary formula_16 with formula_17 is given, such that the target function formula_18 of a learning problem can be written as:\nThe formula_7 norm formula_22 as the number of non-zero components of formula_12 is defined as \nformula_27 is said to be sparse if formula_28.\n\nHowever, while using the formula_7 norm for regularization favors sparser solutions, it is computationally difficult to use and additionally is not convex. A computationally more feasible norm that favors sparser solutions is the formula_30 norm; this has been shown to still favor sparser solutions and is additionally convex.\n\nStructured sparsity regularization extends and generalizes the variable selection problem that characterizes sparsity regularization. Consider the above regularized empirical risk minimization problem with a general kernel and associated feature map formula_16 with formula_17.\nThe regularization term formula_34 penalizes each formula_35 component independently, which means that the algorithm will suppress input variables independently from each other.\n\nIn several situations we may want to impose more structure in the regularization process, so that, for example, input variables are suppressed according to predefined groups. Structured sparsity regularization methods allow to impose such structure by adding structure to the norms defining the regularization term.\n\nThe non-overlapping group case is the most basic instance of structured sparsity. In it, an \"a priori\" partition of the coefficient vector formula_12 in formula_37 non-overlapping groups is assumed. Let formula_38 be the vector of coefficients in group formula_39, we can define a regularization term and its group norm as\nwhere formula_41 is the group formula_42 norm formula_43 , formula_44 is group formula_39, and formula_46 is the \"j-th\" component of group formula_44.\n\nThe above norm is also referred to as group Lasso. This regularizer will force entire coefficient groups towards zero, rather than individual coefficients. As the groups are non-overlapping, the set of non-zero coefficients can be obtained as the union of the groups that were not set to zero, and conversely for the set of zero coefficients.\n\nOverlapping groups is the structure sparsity case where a variable can belong to more than one group formula_39. This case is often of interest as it can represent a more general class of relationships among variables than non-overlapping groups can, such as tree structures or other type of graphs.\n\nThere are two types of overlapping group sparsity regularization approaches, which are used to model different types of input variable relationships:\n\nThe \"intersection of complements\" approach is used in cases when we want to select only those input variables that have positive coefficients in all groups they belong to. Consider again the group Lasso for a regularized empirical risk minimization problem:\nwhere formula_41 is the group formula_42 norm, formula_44 is group formula_39, and formula_46 is the \"j-th\" component of group formula_44.\n\nAs in the non-overlapping groups case, the \"group Lasso\" regularizer will potentially set entire groups of coefficients to zero. Selected variables are those with coefficients formula_56. However, as in this case groups may overlap, we take the intersection of the complements of those groups that are not set to zero.\n\nThis \"intersection of complements\" selection criteria implies the modeling choice that we allow some coefficients within a particular group formula_39 to be set to zero, while others within the same group formula_39 may remain positive. In other words, coefficients within a group may differ depending on the several group memberships that each variable within the group may have.\n\nA different approach is to consider union of groups for variable selection. This approach captures the modeling situation where variables can be selected as long as they belong at least to one group with positive coefficients. This modeling perspective implies that we want to preserve group structure.\n\nThe formulation of the union of groups approach is also referred to as latent group Lasso, and requires to modify the group formula_42 norm considered above and introduce the following regularizer \nwhere formula_61, formula_62 is the vector of coefficients of group g, and formula_63 is a vector with coefficients formula_46 for all variables formula_65 in group formula_39 , and formula_67 in all others, i.e., formula_68 if formula_65 in group formula_39 and formula_71 otherwise.\n\nThis regularizer can be interpreted as effectively replicating variables that belong to more than one group, therefore conserving group structure. As intended by the union of groups approach, requiring formula_72 produces a vector of weights w that effectively sums up the weights of all variables across all groups they belong to.\n\nThe objective function using group lasso consists of an error function, which is generally required to be convex but not necessarily strongly convex, and a group formula_30 regularization term. An issue with this objective function is that it is convex but not necessarily strongly convex, and thus generally does not lead to unique solutions.\n\nAn example of a way to fix this is to introduce the squared formula_42 norm of the weight vector as an additional regularization term while keeping the formula_30 regularization term from the group lasso approach. If the coefficient of the squared formula_42 norm term is greater than formula_67, then because the squared formula_42 norm term is strongly convex, the resulting objective function will also be strongly convex. Provided that the formula_42 coefficient is suitably small but still positive, the weight vector minimizing the resulting objective function is generally very close to a weight vector that minimizes the objective function that would result from removing the group formula_42 regularization term altogether from the original objective function; the latter scenario corresponds to the group Lasso approach. Thus this approach allows for simpler optimization while maintaining sparsity.\n\n\"See: Submodular set function\"\n\nBesides the norms discussed above, other norms used in structured sparsity methods include hierarchical norms and norms defined on grids. These norms arise from submodular functions and allow the incorporation of prior assumptions on the structure of the input variables. In the context of hierarchical norms, this structure can be represented as a directed acyclic graph over the variables while in the context of grid-based norms, the structure can be represented using a grid.\n\n\"See:\" Unsupervised learning\n\nUnsupervised learning methods are often used to learn the parameters of latent variable models. Latent variable models are statistical models where in addition to the observed variables, a set of latent variables also exists which is not observed. Often in such models, \"hierarchies\" are assumed between the variables of the system; this system of hierarchies can be represented using directed acyclic graphs.\n\nHierarchies of latent variables have emerged as a natural structure in several applications, notably to model text documents. Hierarchical models using Bayesian non-parametric methods have been used to learn topic models, which are statistical models for discovering the abstract \"topics\" that occur in a collection of documents. Hierarchies have also been considered in the context of kernel methods. Hierarchical norms have been applied to bioinformatics, computer vision and topic models.\n\nIf the structure assumed over variables is in the form of a 1D, 2D or 3D grid, then submodular functions based on overlapping groups can be considered as norms, leading to stable sets equal to rectangular or convex shapes. Such methods have applications in computer vision\n\nThe problem of choosing the best subset of input variables can be naturally formulated under a penalization framework as:\nWhere formula_10 denotes the formula_7 \"norm\", defined as the number of nonzero entries of the vector formula_12.\n\nAlthough this formulation makes sense from a modeling perspective, it is computationally unfeasible, as it is equivalent to an exhaustive search evaluating all possible subsets of variables.\n\nTwo main approaches for solving the optimization problem are: 1) greedy methods, such as step-wise regression in statistics, or matching pursuit in signal processing; and 2) convex relaxation formulation approaches and proximal gradient optimization methods.\n\nA natural approximation for the best subset selection problem is the formula_30 norm regularization:\nSuch as scheme is called basis pursuit or the Lasso, which substitutes the formula_7 \"norm\" for the convex, non-differentiable formula_30 norm.\n\nProximal gradient methods, also called forward-backward splitting, are optimization methods useful for minimizing functions with a convex and differentiable component, and a convex potentially non-differentiable component.\n\nAs such, proximal gradient methods are useful for solving sparsity and structured sparsity regularization problems of the following form: \nWhere formula_90 is a convex and differentiable loss function like the quadratic loss, and formula_91 is a convex potentially non-differentiable regularizer such as the formula_30 norm.\n\nStructured Sparsity regularization can be applied in the context of multiple kernel learning. Multiple kernel learning refers to a set of machine learning methods that use a predefined set of kernels and learn an optimal linear or non-linear combination of kernels as part of the algorithm.\n\nIn the algorithms mentioned above, a whole space was taken into consideration at once and was partitioned into groups, i.e. subspaces. A complementary point of view is to consider the case in which distinct spaces are combined to obtain a new one. It is useful to discuss this idea considering finite dictionaries. Finite dictionaries with linearly independent elements - these elements are also known as atoms - refer to finite sets of linearly independent basis functions, the linear combinations of which define hypothesis spaces. Finite dictionaries can be used to define specific kernels, as will be shown. Assume for this example that rather than only one dictionary, several finite dictionaries are considered.\n\nFor simplicity, the case in which there are only two dictionaries formula_93 and formula_94 where formula_95 and formula_96 are integers, will be considered. The atoms in formula_26 as well as the atoms in formula_98 are assumed to be linearly independent. Let formula_99 be the union of the two dictionaries. Consider the linear space of functions formula_100 given by linear combinations of the form\n\nformula_101\n\nfor some coefficient vectors formula_102, where formula_103. Assume the atoms in formula_104 to still be linearly independent, or equivalently, that the map formula_105 is one to one. The functions in the space formula_100 can be seen as the sums of two components, one in the space formula_107, the linear combinations of atoms in formula_26 and one in formula_109, the linear combinations of the atoms in formula_98.\n\nOne choice of norm on this space is formula_111. Note that we can now view formula_100 as a function space in which formula_107, formula_109 are subspaces. In view of the linear independence assumption, formula_100 can be identified with formula_116 and formula_117 with formula_118 respectively. The norm mentioned above can be seen as the group norm in formula_100associated to the subspaces formula_107, formula_109, providing a connection to structured sparsity regularization.\n\nHere, formula_107, formula_109 and formula_100 can be seen to be the reproducing kernel Hilbert spaces with corresponding feature maps formula_125, given by formula_126, formula_127, given by formula_128, and formula_129, given by the concatenation of formula_130, respectively.\n\nIn the structured sparsity regularization approach to this scenario, the relevant groups of variables which the group norms consider correspond to the subspaces formula_107 and formula_109. This approach promotes setting the groups of coefficients corresponding to these subspaces to zero as opposed to only individual coefficients, promoting sparse multiple kernel learning.\n\nThe above reasoning directly generalizes to any finite number of dictionaries, or feature maps. It can be extended to feature maps inducing infinite dimensional hypothesis\n\nspaces.\n\nConsidering sparse multiple kernel learning is useful in several situations including the following:\n\n• Data fusion: When each kernel corresponds to a different kind of modality/feature.\n\n• Nonlinear variable selection: Consider kernels formula_133 depending only one dimension of the input.\n\nGenerally sparse multiple kernel learning is particularly useful when there are many kernels and model selection and interpretability are important.\n\nStructured sparsity regularization methods have been used in a number of settings where it is desired to impose an \"a priori\" input variable structure to the regularization process. Some such applications are:\n\n", "id": "48844125", "title": "Structured sparsity regularization"}
{"url": "https://en.wikipedia.org/wiki?curid=48976249", "text": "MysteryVibe\n\nMysteryVibe is a British manufacturer of sex toys.\n\nMysteryVibe was founded by a group of researchers, engineers and designers. Inspired by trends in smartphones like Nokia Morph, the founders came up with the idea of creating a sex toy that would adapt to any body shape and vibrate to any pattern. They continued to research for a number of years before formally starting the company in May 2014, when they were incubated by London-based industrial design firm Seymourpowell.\n\nMysteryVibe released their iOS app on the Apple App Store in December 2015 and their Android app on Google Play in September 2016. The apps are designed without any adult themes to support MysteryVibe's wider goal of improving sex education for teenagers and are the only apps in their class to be rated 12+. Their apps have been downloaded more than 250,000 times since launch.\n\nMysteryVibe's flagship product, Crescendo, is the world's first vibrator that can be bent to adapt to any body shape. Crescendo was the first crowdfunding project to offer its backers 2 versions of their product: \"Pilot\" and \"Retail\". They ran what they called the #\"Pilot1000\" programme for their first 1,000 users to get feedback on their Crescendo product. The #\"Pilot1000\" users spanned 48 countries and included both backers and experts. MysteryVibe gave all 1,000 users full access to their founding CEO with direct email, phone and Skype. They then used the feedback they received to make the final \"Retail\" Crescendo.\n\nDue to the lean model adopted by MysteryVibe with \"collectives\" and \"collaborations\", they were able to build the company from a sketch to shipped products with less than £1m ($1.5m) in funding. They were also unique in raising 100% of the money from Angel investors without any recourse to Venture capital. As of Q2 2017, MysteryVibe has raised $3.5m in total funding.\n\nMysteryVibe has won numerous awards for their company, products and founders. Notable mentions are Red Dot, IDA Design, The Drum, and Excellence in Design. Their biggest recognition has been the Young Guns award.\n\nIn June 2016, MysteryVibe became the first pleasure product to be featured by Virgin in their #VOOM competition. They were showcased under the Export Awards category for exporting their products to over 50 countries worldwide. This led to their selection to the Hardware Club and a nomination for the 'Best Hardware Startup' award at The Europas in London.\n\nMysteryVibe is the first brand in their category to have been featured on BBC. Ranked by European investors as No. 9 of the 100 Slush start-ups in \"Cofounder Magazine\", MysteryVibe has been named as one of the \"Top 100 Europe's hottest early-stage Founders\" by \"PathFounders,\" \"Europas\". They have been listed at No. 7 in the \"12 days of start-ups: Spectacular businesses set for stardom in 2016\".\n", "id": "48976249", "title": "MysteryVibe"}
{"url": "https://en.wikipedia.org/wiki?curid=48813654", "text": "Sparse dictionary learning\n\nSparse dictionary learning is a representation learning method which aims at finding a sparse representation of the input data (also known as \"sparse coding\") in the form of a linear combination of basic elements as well as those basic elements themselves. These elements are called \"atoms\" and they compose a \"dictionary\". Atoms in the dictionary are not required to be orthogonal, and they may be an over-complete spanning set. This problem setup also allows the dimensionality of the signals being represented to be higher than the one of the signals being observed. The above two properties lead to having seemingly redundant atoms that allow multiple representations of the same signal but also provide an improvement in sparsity and flexibility of the representation. \n\nOne of the most important applications of sparse dictionary learning is in the field of compressed sensing or signal recovery. In compressed sensing, a high dimensional signal can be recovered with only a few linear measurements provided that the signal is sparse or nearly sparse. Since not all signals satisfy this sparsity condition, it is of great importance to find a sparse representation of that signal such as the wavelet transform or the directional gradient of a rasterized matrix. Once a matrix or a high dimensional vector is transferred to a sparse space, different recovery algorithms like basis pursuit, CoSaMP or fast non-iterative algorithms can be used to recover the signal. \n\nOne of the key principles of dictionary learning is that the dictionary has to be inferred from the input data. The emergence of sparse dictionary learning methods was stimulated by the fact that in signal processing one typically wants to represent the input data using as few components as possible. Before this approach the general practice was to use predefined dictionaries (such as fourier or wavelet transforms). However, in certain cases a dictionary that is trained to fit the input data can significantly improve the sparsity, which has applications in data decomposition, compression and analysis and has been used in the fields of image denoising and classification, video and audio processing. Sparsity and overcomplete dictionaries have immense applications in image compression, image fusion and inpainting. \nGiven the input dataset formula_1 we wish to find a dictionary formula_2 and a representation formula_3 such that both formula_4 is minimized and the representations formula_5 are sparse enough. This can be formulated as the following optimization problem:\n\nformula_6, where formula_7\n\nformula_8 is required to constrain formula_9 so that its atoms would not reach arbitrarily high values allowing for arbitrarily low (but non-zero) values of formula_5.\n\nThe minimization problem above is not convex because of the ℓ-\"norm\" and solving this problem is NP-hard. In some cases \"L\"-norm is known to ensure sparsity and so the above becomes a convex optimization problem with respect to each of the variables formula_9 and formula_12 when the other one is fixed, but it is not jointly convex in formula_13.\nThe dictionary formula_9 defined above can be \"undercomplete\" if formula_15 or \"overcomplete\" in case formula_16 with the latter being a typical assumption for a sparse dictionary learning problem. The case of a complete dictionary does not provide any improvement from a representational point of view and thus isn't considered.\n\nUndercomplete dictionaries represent the setup in which the actual input data lies in a lower-dimensional space. This case is strongly related to dimensionality reduction and techniques like principal component analysis which require atoms formula_17 to be orthogonal. The choice of these subspaces is crucial for efficient dimensionality reduction, but it is not trivial. And dimensionality reduction based on dictionary representation can be extended to address specific tasks such as data analysis or classification. However, their main downside is limiting the choice of atoms.\n\nOvercomplete dictionaries, however, do not require the atoms to be orthogonal (they will never be a basis anyway) thus allowing for more flexible dictionaries and richer data representations. \n\nAn overcomplete dictionary which allows for sparse representation of signal can be a famous transform matrix (wavelets transform, fourier transform) or it can be formulated so that its elements are changed in such a way that it sparsely represents given signal in a best way. Learned dictionaries are capable to give more sparse solution as compared to predefined transform matrices.\n\nAs the optimization problem described above can be solved as a convex problem with respect to either dictionary or sparse coding while the other one of the two is fixed, most of the algorithms are based on the idea of iteratively updating one and then the other.\n\nThe problem of finding an optimal sparse coding formula_18 with a given dictionary formula_9 is known as sparse approximation (or sometimes just sparse coding problem). There has been developed a number of algorithms to solve it (such as matching pursuit and LASSO) which are incorporated into the algorithms described below.\n\nThe method of optimal directions (or MOD) was one of the first methods introduced to tackle the sparse dictionary learning problem. The core idea of it is to solve the minimization problem subject to the limited number of non-zero components of the representation vector:\n\nformula_20\n\nHere, formula_21 denotes the Frobenius norm. MOD alternates between getting the sparse coding using a method such as matching pursuit and updating the dictionary by computing the analytical solution of the problem given by formula_22 where formula_23 is a Moore-Penrose pseudoinverse. After this update formula_24 is renormalized to fit the constraints and the new sparse coding is obtained again. The process is repeated until convergence (or until a sufficiently small residue).\n\nMOD has proved to be a very efficient method for low-dimensional input data formula_25 requiring just a few iterations to converge. However, due to the high complexity of the matrix-inversion operation, computing the pseudoinverse in high-dimensional cases is in many cases intractable. This shortcoming has inspired the development of other dictionary learning methods.\n\nK-SVD is an algorithm that performs SVD at its core to update the atoms of the dictionary one by one and basically is a generalization of K-means. It enforces that each element of the input data formula_26 is encoded by a linear combination of not more than formula_27 elements in a way identical to the MOD approach:\n\nformula_28\n\nThis algorithm's essence is to first fix the dictionary, find the best possible formula_29 under the above constraint (using Orthogonal Matching Pursuit) and then iteratively update the atoms of dictionary formula_9 in the following manner:\n\nformula_31\n\nThe next steps of the algorithm include rank-1 approximation of the residual matrix formula_32, updating formula_33 and enforcing the sparsity of formula_34 after the update. This algorithm is considered to be standard for dictionary learning and is used in a variety of applications. However, it shares weaknesses with MOD being efficient only for signals with relatively low dimensionality and having the possibility for being stuck at local minima.\n\nOne can also apply a widespread stochastic gradient descent method with iterative projection to solve this problem. The idea of this method is to update the dictionary using the first order stochastic gradient and project it on the constraint set formula_8. The step that occurs at i-th iteration is described by this expression:\n\nformula_36, where formula_37 is a random subset of formula_38 and formula_39 is a gradient step.\n\nAn algorithm based on solving a dual Lagrangian problem provides an efficient way to solve for the dictionary having no complications induced by the sparsity function. Consider the following Lagrangian:\n\nformula_40, where formula_41 is a constraint on the norm of the atoms and formula_42 are the so-called dual variables forming the diagonal matrix formula_43.\n\nWe can then provide an analytical expression for the Lagrange dual after minimization over formula_9:\n\nformula_45.\n\nAfter applying one of the optimization methods to the value of the dual (such as Newton's method or conjugate gradient) we get the value of formula_9:\n\nformula_47\n\nSolving this problem is less computational hard because the amount of dual variables formula_48 is a lot of times much less than the amount of variables in the primal problem.\n\nParametric training methods are aimed to incorporate the best of both worlds — the realm of analytically constructed dictionaries and the learned ones. This allows to construct more powerful generalized dictionaries that can potentially be applied to the cases of arbitrary-sized signals. Notable approaches include: \n\nMany common approaches to sparse dictionary learning rely on the fact that the whole input data formula_52 (or at least a large enough training dataset) is available for the algorithm. However, this might not be the case in the real-world scenario as the size of the input data might be too big to fit it into memory. The other case where this assumption can not be made is when the input data comes in a form of a stream. Such cases lie in the field of study of online learning which essentially suggests iteratively updating the model upon the new data points formula_53 becoming available.\n\nA dictionary can be learned in an online manner the following way:\n\nThis method allows us to gradually update the dictionary as new data becomes available for sparse representation learning and helps drastically reduce the amount of memory needed to store the dataset (which often has a huge size).\n\nThe dictionary learning framework, namely the linear decomposition of an input signal using a few basis elements learned from data itself, has led to state-of-art results in various image and video processing tasks. This technique can be applied to classification problems in a way that if we have built specific dictionaries for each class, the input signal can be classified by finding the dictionary corresponding to the sparsest representation.\n\nIt also has properties that are useful for signal denoising since usually one can learn a dictionary to represent the meaningful part of the input signal in a sparse way but the noise in the input will have a much less sparse representation.\n\nSparse dictionary learning has been successfully applied to various image, video and audio processing tasks as well as to texture synthesis and unsupervised clustering. In evaluations with the Bag-of-Words model, sparse coding was found empirically to outperform other coding approaches on the object category recognition tasks.\n\nDictionary learning is used to analyse medical signals in detail. Such medical signals include those from electroencephalography (EEG), electrocardiography (ECG), magnetic resonance imaging (MRI), fuctional MRI (fMRI), and ultrasound computer tomography (USCT), where different assumptions are used to analyze each signal.\n\n", "id": "48813654", "title": "Sparse dictionary learning"}
{"url": "https://en.wikipedia.org/wiki?curid=5008963", "text": "Inauthentic text\n\nAn inauthentic text is a computer-generated expository document meant to appear as genuine, but which is actually meaningless. Frequently they are created in order to be intermixed with genuine documents and thus manipulate the results of search engines, as with Spam blogs. They are also carried along in email in order to fool spam filters by giving the spam the superficial characteristics of legitimate text.\n\nSometimes nonsensical documents are created with computer assistance for humorous effect, as with Dissociated press or Flarf poetry. They have also been used to challenge the veracity of a publication—MIT students submitted papers generated by a computer program called SCIgen to a conference, where they were initially accepted. This led the students to claim that the bar for submissions was too low.\n\nWith the amount of computer generated text outpacing the ability of people to humans to curate it, there needs some means of distinguishing between the two. Yet automated approaches to determining absolutely whether a text is authentic or not face intrinsic challenges of semantics. Noam Chomsky coined the phrase \"Colorless green ideas sleep furiously\" giving an example of grammatically-correct, but semantically incoherent sentence; some will point out that in certain contexts one could give this sentence (or any phrase) meaning.\n\nThe first group to use the expression in this regard can be found below from Indiana University. Their work explains in detail an attempt to detect inauthentic texts and identify pernicious problems of inauthentic texts in cyberspace. The site has a means of submitting text that assesses, based on supervised learning, whether a corpus is inauthentic or not. Many users have submitted incorrect types of data and have correspondingly commented on the scores. This application is meant for a specific kind of data; therefore, submitting, say, an email, will not return a meaningful score.\n\n\n", "id": "5008963", "title": "Inauthentic text"}
{"url": "https://en.wikipedia.org/wiki?curid=50211107", "text": "Bayesian structural time series\n\nBayesian structural time series (BSTS) model is a machine learning technique used for feature selection, time series forecasting, nowcasting, inferring causal impact and other. The model is designed to work with time series data.\n\nThe model has also promising application in the field of analytical marketing. In particular, it can be used in order to assess how much different marketing campaigns have contributed to the change in web search volumes, product sales, brand popularity and other relevant indicators (difference-in-differences model is a usual alternative approach in this case). \"In contrast to classical difference-in-differences schemes, state-space models make it possible to (i) infer the temporal evolution of attributable impact, (ii) incorporate empirical priors on the parameters in a fully Bayesian treatment, and (iii) flexibly accommodate multiple sources of variation, including the time-varying influence of contemporaneous covariates, i.e., synthetic controls.\"\n\nThe model consists of three main parts:\nThe model seems to discover not only correlations, but also causations in the underlying data.\n\nA possible drawback of the model can be its relatively complicated mathematical underpinning and difficult implementation as a computer program. However, the programming language R has ready-to-use packages for calculating the BSTS model, which do not require strong mathematical background from a researcher.\n\n\n", "id": "50211107", "title": "Bayesian structural time series"}
{"url": "https://en.wikipedia.org/wiki?curid=50222574", "text": "Semantic folding\n\nSemantic folding theory describes a procedure for encoding the semantics of natural language text in a semantically grounded binary representation. This approach provides a framework for modelling how language data is processed by the neocortex.\n\nSemantic folding theory draws inspiration from Douglas R. Hofstadter's \"Analogy as the Core of Cognition\" which suggests that the brain makes sense of the world by identifying and applying analogies. The theory hypothesises that semantic data must therefore be introduced to the neocortex in such a form as to allow the application of a similarity measure and offers, as a solution, the sparse binary vector employing a two-dimensional topographic semantic space as a distributional reference frame. The theory builds on the computational theory of the human cortex known as hierarchical temporal memory (HTM), and positions itself as a complementary theory for the representation of language semantics.\n\nA particular strength claimed by this approach is that the resulting binary representation enables complex semantic operations to be performed simply and efficiently at the most basic computational level.\n\nAnalogous to the structure of the neocortex, Semantic Folding theory posits the implementation of a semantic space as a two-dimensional grid. This grid is populated by context-vectors in such a way as to place similar context-vectors closer to each other, for instance, by using competitive learning principles. This vector space model is presented in the theory as an equivalence to the well known word space model described in the Information Retrieval literature.\n\nGiven a semantic space (implemented as described above) a word-vector can be obtained for any given word Y by employing the following algorithm:\n\nFor each position X in the semantic map (where X represents cartesian coordinates)\n\nThe result of this process will be a word-vector containing all the contexts in which the word Y appears and will therefore be representative of the semantics of that word in the semantic space. It can be seen that the resulting word-vector is also in a sparse distributed representation (SDR) format [Schütze, 1993] & [Sahlgreen, 2006]. Some properties of word-SDRs that are of particular interest with respect to computational semantics are:\n\nSemantic spaces in the natural language domain aim to create representations of natural language that are capable of capturing meaning. The original motivation for semantic spaces stems from two core challenges of natural language: Vocabulary mismatch (the fact that the same meaning can be expressed in many ways) and ambiguity of natural language (the fact that the same term can have several meanings).\n\nThe application of semantic spaces in natural language processing (NLP) aims at overcoming limitations of rule-based or model-based approaches operating on the keyword level. The main drawback with these approaches is their brittleness, and the large manual effort required to create either rule-based NLP systems or training corpora for model learning. Rule-based and machine learning based models are fixed on the keyword level and break down if the vocabulary differs from that defined in the rules or from the training material used for the statistical models.\n\nResearch in semantic spaces dates back more than 20 years. In 1996, two papers were published that raised a lot of attention around the general idea of creating semantic spaces: latent semantic analysis from Microsoft and Hyperspace Analogue to Language from the University of California. However, their adoption was limited by the large computational effort required to construct and use those semantic spaces. A breakthrough with regard to the accuracy of modelling associative relations between words (e.g. \"spider-web\", \"lighter-cigarette\", as opposed to synonymous relations such as \"whale-dolphin\", \"astronaut-driver\") was achieved by explicit semantic analysis (ESA) in 2007. ESA was a novel (non-machine learning) based approach that represented words in the form of vectors with 100,000 dimensions (where each dimension represents an Article in Wikipedia). However practical applications of the approach are limited due to the large number of required dimensions in the vectors.\n\nMore recently, advances in neural networking techniques in combination with other new approaches (tensors) led to a host of new recent developments: Word2vec from Google and GloVe from Stanford University.\n\nSemantic folding represents a novel, biologically inspired approach to semantic spaces where each word is represented as a sparse binary vector with 16,000 dimensions (a semantic fingerprint) in a 2D semantic map (the semantic universe). Sparse binary representation are advantageous in terms of computational efficiency, and allow for the storage of very large numbers of possible patterns.\n\nThe topological distribution over a two-dimensional grid (outlined above) lends itself to a bitmap type visualization of the semantics of any word or text, where each active semantic feature can be displayed as e.g. a pixel. As can be seen in the images shown here, this representation allows for a direct visual comparison of the semantics of two (or more) linguistic items.\n\nImage 1 clearly demonstrates that the two disparate terms \"dog\" and \"car\" have, as expected, very obviously different semantics.\n\nImage 2 shows that only one of the meaning contexts of \"jaguar\", that of \"Jaguar\" the car, overlaps with the meaning of Porsche (indicating partial similarity). Other meaning contexts of \"jaguar\" e.g. \"jaguar\" the animal clearly have different non-overlapping contexts.\n\nNote also that the visualization of semantic similarity using Semantic Folding bears a strong resemblance to the fMRI images produced in a research study conducted by A.G. Huth et al., where it is claimed that words are grouped in the brain by meaning.\n", "id": "50222574", "title": "Semantic folding"}
{"url": "https://en.wikipedia.org/wiki?curid=50227596", "text": "Spike-and-slab variable selection\n\nSpike-and-slab regression is a Bayesian variable selection technique that is particularly useful when the number of possible predictors is larger than the number of observations.\n\nInitially, the idea of the spike-and-slab model was proposed by Mitchell & Beauchamp (1988). The approach was further significantly developed by Madigan & Raftery (1994) and George & McCulloch (1997). The final adjustments to the model were done by Ishwaran & Rao (2005).\n\nSuppose we have \"P\" possible predictors in some model. Vector \"γ\" has a length equal to \"P\" and consists of zeros and ones. This vector indicates whether a particular variable is included in the regression or not. If no specific prior information on initial inclusion probabilities of particular variables is available, a Bernoulli prior distribution is a common default choice. Conditional on a predictor being in the regression, we identify a prior distribution for the model coefficient, which corresponds to that variable (\"β\"). A common choice on that step is to use a Normal prior with mean equal to zero and a large variance calculated based on formula_1 (where formula_2 is a design matrix of explanatory variables of the model).\n\nA draw of \"γ\" from its prior distribution is a list of the variables included in the regression. Conditional on this set of selected variables, we take a draw from the prior distribution of the regression coefficients (if \"γ\" = 1 then \"β\" ≠ 0 and if \"γ\" = 0 then \"β\" = 0). \"βγ\" denotes the subset of \"β\" for which \"γ\" = 1. In the next step, we calculate a posterior probability distribution for both inclusion and coefficients by applying a standard statistical procedure. All steps of the described algorithm are repeated thousands of times using Markov chain Monte Carlo (MCMC) technique. As a result, we obtain a posterior distribution of \"γ\" (variable inclusion in the model), \"β\" (regression coefficient values) and the corresponding prediction of \"y\".\n\nThe model got its name (spike-and-slab) due to the shape of the two prior distributions. The \"spike\" is the probability of a particular coefficient in the model to be zero. The \"slab\" is the prior distribution for the regression coefficient values.\n\nAn advantage of Bayesian variable selection techniques is that they are able to make use of prior knowledge about the model. In the absence of such knowledge, some reasonable default values can be used: \"For the analyst who prefers simplicity at the cost of some reasonable assumptions, useful prior information can be reduced to an expected model size, an expected \"R\", and a sample size \"ν\" determining the weight given to the guess at \"R\".\" Some researchers suggest the following default values: \"R\" = 0.5, \"ν\" = 0.01, and = 0.5 (parameter of a prior Bernoulli distribution).\n\nA possible drawback of the Spike-and-Slab model can be its mathematical complexity (in comparison to linear regression). A deep understanding of this model requires sound knowledge in stochastic processes. On the other hand, some modern statistical software (e.g. R) have ready-to-use solutions for calculating various Bayesian variable selection models. In this case, it would be enough for a researcher to know the idea of the method, required model parameters and input variables. The analysis of the model outcomes (distribution of \"γ\", \"β\", and corresponding predictions of \"y\") can be more challenging in comparison to linear regression case. The spike-and-slab model produces inclusion probabilities for each of possible predictors. This can cause difficulties when comparing results to the studies with simple regression (usually only regression coefficients with corresponding statistics are available).\n\nSpike-and-slab regression is a part of Bayesian structural time series model (which is used for feature selection, time series forecasting, nowcasting, inferring causation, and other).\n\n", "id": "50227596", "title": "Spike-and-slab variable selection"}
{"url": "https://en.wikipedia.org/wiki?curid=30909817", "text": "Multilinear subspace learning\n\nMultilinear subspace learning is an approach to dimensionality reduction. \nDimensionality reduction can be performed on a data tensor whose observations have been vectorized and organized into a data tensor, or whose observations are matrices that are concatenated into a data tensor. Here are some examples of data tensors whose observations are vectorized or whose observations are matrices concatenated into data tensor images (2D/3D), video sequences (3D/4D), and hyperspectral cubes (3D/4D).\n\nThe mapping from a high-dimensional vector space to a set of lower dimensional vector spaces is a multilinear projection.\n\nMultilinear subspace learning algorithms are higher-order generalizations of linear subspace learning methods such as principal component analysis (PCA), independent component analysis (ICA), linear discriminant analysis (LDA) and canonical correlation analysis (CCA).\n\nWith the advances in data acquisition and storage technology, big data (or massive data sets) are being generated on a daily basis in a wide range of emerging applications. Most of these big data are multidimensional. Moreover, they are usually very-high-dimensional, with a large amount of redundancy, and only occupying a part of the input space. Therefore, dimensionality reduction is frequently employed to map high-dimensional data to a low-dimensional space while retaining as much information as possible.\n\nLinear subspace learning algorithms are traditional dimensionality reduction techniques that represent input data as vectors and solve for an optimal linear mapping to a lower-dimensional space. Unfortunately, they often become inadequate when dealing with massive multidimensional data. They result in very-high-dimensional vectors, lead to the estimation of a large number of parameters.\n\nMultilinear Subspace Learning employ different types of data tensor analysis tools for dimensionality reduction. Multilinear Subspace learning can be applied to observations whose measurements were vectorized and organized into a data tensor, or whose measurements are treated as a matrix and concatenated into a tensor.\n\nHistorically, Multilinear Principal Component Analysis has been referred to as \"M-mode PCA\", a terminology which was coined by Peter Kroonenberg. In 2005, Vasilescu and Terzopoulos introduced the Multilinear PCA terminology as a way to better differentiate between linear tensor decompositions and multilinear tensor decomposition, as well as, to better differentiate between analysis approaches that computed 2nd order statistics associated with each data tensor mode(axis)s, and subsequent work on Multilinear Independent Component Analysis that computed higher order statistics associated with each tensor mode/axis. MPCA is an extension of PCA.\n\nMultilinear Independent Component Analysis is an extension of ICA.\n\n\n\n\n\nThere are \"N\" sets of parameters to be solved, one in each mode. The solution to one set often depends on the other sets (except when \"N=1\", the linear case). Therefore, the suboptimal iterative procedure in is followed.\n\n\nThis is originated from the alternating least square method for multi-way data analysis.\n\nThe advantages of MSL over traditional linear subspace modeling, in common domains where the representation is naturally somewhat tensorial, are:\n\n\nHowever, MSL algorithms are iterative and are not guaranteed to converge; where an MSL algorithm does converge, it may do so at a local optimum. (In contrast, traditional linear subspace modeling techniques often produce an exact closed-form solution.) MSL convergence problems can often be mitigated by choosing an appropriate subspace dimensionality, and by appropriate strategies for initialization, for termination, and for choosing the order in which projections are solved.\n\n\n\n\n", "id": "30909817", "title": "Multilinear subspace learning"}
{"url": "https://en.wikipedia.org/wiki?curid=50646178", "text": "Bing Predicts\n\nBing Predicts is a prediction engine developed by Microsoft that uses machine learning from data on trending social media topics (and sentiment towards those topics), along with trending searches on Bing. It predicts the outcomes of political elections, popular reality shows, and major sporting events. Predictions can be accessed through the Bing search engine.\n\nThe idea for a prediction engine was first suggested by Walter Sun, Development Manager for the Core Ranking team at Bing, when he noticed that school districts were more frequently searched before a major weather event in the area was forecasted, because searchers wanted to find out if a closing or delay was caused. He concluded that the time and location of major weather events could accurately be predicted without referring to a weather forecast by observing major increases in search frequency of school districts in the area. This inspired Bing to use its search data to infer outcomes of certain events, such as winners of reality shows. Bing Predicts launched on April 21, 2014. The first reality shows to be featured on Bing Predicts were \"The Voice\", \"American Idol\", and \"Dancing with the Stars\".\n\nThe prediction accuracy for Bing Predicts is 80% for \"American Idol\", and 85% for \"The Voice\". Bing Predicts also predicts the outcomes of major political elections in the United States. Bing Predicts had 97% accuracy for the 2014 United States Senate elections, 96% accuracy for the 2014 United States House of Representatives elections, and an 89% accuracy for the 2014 United States gubernatorial elections. Bing Predicts is also making predictions for the results of the 2016 United States presidential primaries. It has also done predictions in sports, including a perfect 15 for 15 in the 2014 World Cup, leading to positive press such as a Business Insider story on its successes and a PC World article on how Microsoft CEO Satya Nadella did well in his March Madness bracket entry.\n", "id": "50646178", "title": "Bing Predicts"}
{"url": "https://en.wikipedia.org/wiki?curid=49786340", "text": "Movidius\n\nMovidius is a company based in San Mateo, California that designs specialised low-power processor chips for computer vision and deep-learning. It was announced that the company was to be acquired by Intel in September 2016.\n\nMovidius was co-founded in Dublin in 2005 by Sean Mitchell and Dr. David Moloney, with Dr. Valentin Muresan heading up the Timisoara (Romania) design-centre and Martin Mellody as VP of SW Engineering.\n\nDavid and Sean's vision for the company when they set it up was nothing less than to revolutionise the fabless semiconductor industry which until that point was focused on building processor based SoCs (System on Chip) with hardware acceleration to do most of the intensive processing which couldn't be handled by the CPU.\n\nFergal Connor (SHAVE processor architect) and Cormac Brick (formerly VP of SW Engineering and now Director of Machine Intelligence Group or MIG) joined the company in late 2006 and Brendan Barry (VP of HW Engineering) joined in March 2007 to head up Movidius SoC development. John Bourke joined the company as CFO in 2008 and spearheaded Movidius fundraising activities along with Sean Mitchell. Paul Costigan joined the company as COO in 2009 and ran the Movidius Hong Kong operation for the duration of his tenure in Movidius.\n\nBetween 2006 and 2016, it raised nearly $90 million in capital funding. In May, 2013 the company appointed Remi El-Ouazzane as CEO. In January, 2016 the company announced a partnership with Google. Movidius has been active in the Google Project Tango project. Movidius announced a planned acquisition by Intel in September 2016.\n\nIn 2016, the company was ranked #24 on the Deloitte Fast 500 North America list.\n\nAfter the first year of feasibility study on accelerating game-physics, Movidius joined the Hothouse incubation programme in DIT Dublin Docklands centre and started to ramp up the IC design team to get the first test chip “ISAAC” off the ground. The ISAAC design was already very advanced by the time the company took on the first external funding with investment from Enterprise Ireland in August 2007 followed by an investment round from angel investors in November 2007. ISAAC was a fully functional SoC with all of the interfaces necessary to fully test the core communications and computation subsystem and contained eight SHAVE v1.0 processors and a LEON3 RISC as system controller with peripherals and caches. The ISAAC test chip was taped out at the end of 2007 and we had working silicon back on 65nm HCMOS LP process technology from TSMC by March 2008. While the chip design was going on, the software team were working to build development tools and the game physics engine software. At the time it was calculated that the ISAAC testchip had cost around $1M to build starting from a blank sheet of paper including the SHAVE processor and CMX multiported memory subsystem and software tools. During the timeframe much more straightforward conventional SoCs were being built using licensed IP in competing fabless companies for on the order of $10M.\n\nUsing the ISAAC testchip Movidius started to test the market mainly with customers like Samsung and LG in Korea who started the company more towards imaging and video processing applications which in turn fed into the product definition of the production version of ISAAC code-named “SABRE” which eventually became known as Myriad 1. Myriad1 was manufactured in the same TSMC 65 nm HCMOS LP process as ISAAC. The entire system ran off a 180 MHz clock generated by an onboard PLL as in the case of ISAAC.\n\nThe first foray into image and video processing came when the company, together with Toshiba, developed a Myriad1 version in 2010 with a 512Mb stacked DRAM in package and began the development of the first Image Signal Processing (ISP) pipelines and 3D rectification processing for stereoscopic capture from the 2 camera interfaces of Myriad 1 via a pair of MIPI to parallel converter chips from Toshiba which were integrated into a SiP (System in Package) device.\n\nMovidius CTO David Moloney gave the first information on the Myriad1 architecture at HotChips in 2011 which generated a lot of interest in the platform. This interest resulted in Movidius being introduced to Motorola's ATAP division via Kartik Venkataraman, CTO of Pelican Imaging. The relationship with ATAP blossomed, championed by Victor Vedovato and Johnny Lee within Regina Dugan's DARPA-inspired team aimed at building rapid prototypes, in this case using the depth solution developed dual camera module developed using Myriad1.\n\nWith input from the team at ATAP Movidius began to define a new architecture aimed at high performance computer vision applications codenamed “Fragrak” (Myriad 2), targeting 28 nm technology. The engagement with ATAP was formalised in late 2012 around a computer vision project for object tracking called “Project Pink”. Project Pink eventually became the Google Project “Tango” when the ATAP team were transferred into Google proper.\n\nThe strong interest in Myriad2 from Google ATAP and other customers with the skillful negotiation of Sean Mitchell led to renewed VC interest in funding the company which had been struggling financially and ultimately led to a reboot of the company with new VCs in 2013 and with the reboot came a focus on the US market and a Silicon Valley HQ and new CEO.\n\n, Movidius's latest Myriad 2 chip is an always-on manycore Vision processing unit that can function on power constrained devices. It is a heterogeneous architecture, combining twelve SHAVE (Streaming Hybrid Architecture Vector Engine) 128bit VLIW SIMD processors connected to a multiported Scratchpad memory, a pair of LEON4 UltraSPARC ISA processors for control, and a number of fixed function units to accelerate specific video processing tasks (such as small Convolutions and color conversion lookups). It includes camera interface hardware, bypassing the need for external memory buffers when handling realtime image inputs. In terms of software, a Visual programming language allows workflows to be devised, and there is support for OpenCL.\n\n\"Neural Compute Stick (NCS)\" (originally known as Fathom) is a USB stick containing a Myriad 2 processor, allowing a vision accelerator to be easily added to devices using ARM processors including PCs, drones, robots, IoT devices and video surveillance for tasks such as identifying people or objects. It can run between 80 and 150 GFLOPS performance at below 1W of power. The company switched from a previous 65nm process to a 28 nm one to increase its chip’s efficiency by 20-30x. NCS was expected to cost under $100 per unit . After Intel's acquisition of Movidius, the Movidius™ Neural Compute Stick was released on July 21, 2017 at a cost of $79 in the USA.\n\nMyriad X was launched on 28 August 2017 and is the third generation and most advanced VPU from Movidius, and Intel company. Myriad X is the first VPU to feature the Neural Compute Engine - a dedicated hardware accelerator for deep neural network inferences. The Neural Compute Engine in conjunction with the 16 powerful SHAVE cores and an ultra-high throughput intelligent memory fabric makes Myriad X the industry leader for on-device deep neural networks and computer vision applications. Myriad X has received additional upgrades to imaging and vision engines including additional programmable SHAVE cores, upgraded and expanded vision accelerators, and a new native 4K ISP pipeline with support for up to 8 HD sensors connecting directly to the VPU. Myriad X features the all-new Neural Compute Engine - a purpose-built hardware accelerator designed to dramatically increase performance of deep neural networks without compromising the low power characteristics of the Myriad VPU product line. Featuring an array of MAC blocks and directly interfacing with the intelligent memory fabric, the Neural Compute Engine is able to rapidly perform the calculations necessary for deep inference without hitting the so-called \"data wall\" bottleneck encountered by other processor designs. Combining the neural network performance of the 16 proprietary SHAVE cores with the neural compute engine, Myriad X delivers 10X the performance compared to previous generations*.\n\n", "id": "49786340", "title": "Movidius"}
{"url": "https://en.wikipedia.org/wiki?curid=50828755", "text": "Timeline of machine learning\n\nThis page is a timeline of machine learning. Major discoveries, achievements, milestones and other major events are included.\n\n", "id": "50828755", "title": "Timeline of machine learning"}
{"url": "https://en.wikipedia.org/wiki?curid=995455", "text": "Savi Technology\n\nSavi Technology was founded in 1989 and is based in Alexandria, Virginia.\n\nSavi provides the most complete Sensor Analytics solutions for organizations that face critical decisions based on the location and status of their assets.\n\nSavi Technology offers sensor analytics solutions for logistics and supply chain operations. It tracks shipment locations in real time and applies analytics to accurately predict arrival of goods. The company provides Savi Insight, a solution that offers predictive and prescriptive supply chain analytics to forecast future outcomes, prevent operational disruptions, and reduce risk; Savi Tracking, a solution that monitors and provides operational intelligence for asset tracking, journey management, and electronic cargo tracking assets in motion; ETAaaS, a SaaS analytics solution that processes multiple real-time data sources, enterprise resource planning (ERP), and historical information; and Savi Now, a mobile application for tracking and tracing high-value assets. It also offers tags that enable organizations to access real-time information on the location, condition, and security status of assets and shipments; fixed and mobile readers; radio-frequency identification devices and sensors; and portable deployment kits. In addition, the company provides professional services, including program management, systems integration, system and network design, support, and hosting. It serves the U.S. Department of Defense, the U.S. and allied militaries, civilian governmental organizations, and commercial companies, as well as transportation, pharmaceuticals, retail, life sciences, and manufacturing industries worldwide.\n\nSavi Company Website\nLinkedIn\nSavi Technology Overview\n\n", "id": "995455", "title": "Savi Technology"}
{"url": "https://en.wikipedia.org/wiki?curid=51112472", "text": "Dataiku\n\nDataiku is a computer software company headquartered in New York City. The company develops collaborative data science software marketed for big data.\n\nThe company was founded in Paris in 2013 by 4 co-founders. Two of them met while working at French search engine company Exalead, including chief executive Florian Douetteau, and Clément Sténac.\n\nFor its first two years, the company relied on its own capital. In January 2015, Dataiku raised $3.6 million from Serena Capital and Alven Capital, two French technology venture capital funds. This was followed by $14 million raised with FirstMark Capital, a New York City-based venture capital firm in October 2016. In September 2017 the company raised a $28 million Series B investment from Battery Ventures, as well as historic investors.\n\nDataiku opened an office in New York City in 2015 which became the company headquarters. They opened an office in London in the summer of 2016.\n\nThe software Dataiku Data Science Studio (DSS) was announced in 2014, supporting predictive modelling to build business applications. Later versions of DSS added other features.\n\nDataiku offers a free edition and enterprise versions with additional features, such as multi-user collaboration or real-time scoring.\n\nIn 2017, Dataiku entered the Gartner Magic Quadrant for Data Science Platforms as a \"visionary\".\n", "id": "51112472", "title": "Dataiku"}
