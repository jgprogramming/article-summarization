[{"url":"https://en.wikipedia.org/wiki?curid=33742232","text":"Restricted Boltzmann machine\n\nA restricted Boltzmann machine (RBM) is a generative stochastic artificial neural network that can learn a probability distribution over its set of inputs. \n\nRBMs were initially invented under the name Harmonium by Paul Smolensky in 1986,\nand rose to prominence after Geoffrey Hinton and collaborators invented fast learning algorithms for them in the mid-2000s. RBMs have found applications in dimensionality reduction,\nclassification,\ncollaborative filtering, feature learning\nand topic modelling.\nThey can be trained in either supervised or unsupervised ways, depending on the task.\n\nAs their name implies, RBMs are a variant of Boltzmann machines, with the restriction that their neurons must form a bipartite graph: \na pair of nodes from each of the two groups of units (commonly referred to as the \"visible\" and \"hidden\" units respectively) may have a symmetric connection between them; and there are no connections between nodes within a group. By contrast, \"unrestricted\" Boltzmann machines may have connections between hidden units. This restriction allows for more efficient training algorithms than are available for the general class of Boltzmann machines, in particular the gradient-based contrastive divergence algorithm.\n\nRestricted Boltzmann machines can also be used in deep learning networks. In particular, deep belief networks can be formed by \"stacking\" RBMs and optionally fine-tuning the resulting deep network with gradient descent and backpropagation.\n\nThe standard type of RBM has binary-valued (Boolean/Bernoulli) hidden and visible units, and consists of a matrix of weights formula_1 (size \"m\"Ã—\"n\") associated with the connection between hidden unit formula_2 and visible unit formula_3, as well as bias weights (offsets) formula_4 for the visible units and formula_5 for the hidden units. Given these, the \"energy\" of a configuration (pair of boolean vectors) is defined as\n\nor, in matrix notation,\n\nThis energy function is analogous to that of a Hopfield network. As in general Boltzmann machines, probability distributions over hidden and/or visible vectors are defined in terms of the energy function:\n\nwhere formula_9 is a partition function defined as the sum of formula_10 over all possible configurations (in other words, just a normalizing constant to ensure the probability distribution sums to 1). Similarly, the (marginal) probability of a visible (input) vector of booleans is the sum over all possible hidden layer configurations:\n\nSince the RBM has the shape of a bipartite graph, with no intra-layer connections, the hidden unit activations are mutually independent given the visible unit activations and conversely, the visible unit activations are mutually independent given the hidden unit activations. That is, for formula_12 visible units and formula_13 hidden units, the conditional probability of a configuration of the visible units , given a configuration of the hidden units , is\n\nConversely, the conditional probability of given is\n\nThe individual activation probabilities are given by\n\nwhere formula_18 denotes the logistic sigmoid.\n\nThe visible units of RBM can be multinomial, although the hidden units are Bernoulli. In this case, the logistic function for visible units is replaced by the softmax function\n\nwhere \"K\" is the number of discrete values that the visible values have. They are applied in topic modeling, and recommender systems.\n\nRestricted Boltzmann machines are a special case of Boltzmann machines and Markov random fields.\nTheir graphical model corresponds to that of factor analysis.\n\nRestricted Boltzmann machines are trained to maximize the product of probabilities assigned to some training set formula_20 (a matrix, each row of which is treated as a visible vector formula_21),\n\nor equivalently, to maximize the expected log probability of a training sample formula_21 selected randomly from formula_20:\n\nThe algorithm most often used to train RBMs, that is, to optimize the weight vector formula_26, is the contrastive divergence (CD) algorithm due to Hinton, originally developed to train PoE (product of experts) models.\nThe algorithm performs Gibbs sampling and is used inside a gradient descent procedure (similar to the way backpropagation is used inside such a procedure when training feedforward neural nets) to compute weight update.\n\nThe basic, single-step contrastive divergence (CD-1) procedure for a single sample can be summarized as follows:\n\n\nA Practical Guide to Training RBMs written by Hinton can be found on his homepage.\n\n\n","id":"33742232","title":"Restricted Boltzmann machine"}]
