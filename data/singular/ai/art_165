[{"url":"https://en.wikipedia.org/wiki?curid=2266644","text":"Multilayer perceptron\n\nA multilayer perceptron (MLP) is a class of feedforward artificial neural network. An MLP consists of at least three layers of nodes. Except for the input nodes, each node is a neuron that uses a nonlinear activation function. MLP utilizes a supervised learning technique called backpropagation for training. Its multiple layers and non-linear activation distinguish MLP from a linear perceptron. It can distinguish data that is not linearly separable.\n\nMultilayer perceptrons are sometimes colloquially referred to as \"vanilla\" neural networks, especially when they have a single hidden layer.\n\n<section begin=theory />\nIf a multilayer perceptron has a linear activation function in all neurons, that is, a linear function that maps the weighted inputs to the output of each neuron, then linear algebra shows that any number of layers can be reduced to a two-layer input-output model. In MLPs some neurons use a \"nonlinear\" activation function that was developed to model the frequency of action potentials, or firing, of biological neurons.\n\nThe two common activation functions are both sigmoids, and are described by\n\nThe first is a hyperbolic tangent that ranges from -1 to 1, while the other is the logistic function, which is similar in shape but ranges from 0 to 1. Here formula_2 is the output of the formula_3th node (neuron) and formula_4 is the weighted sum of the input connections. Alternative activation functions have been proposed, including the rectifier and softplus functions. More specialized activation functions include radial basis functions (used in radial basis networks, another class of supervised neural network models).\n\nThe MLP consists of three or more layers (an input and an output layer with one or more \"hidden layers\") of nonlinearly-activating nodes making it a deep neural network. Since MLPs are fully connected, each node in one layer connects with a certain weight formula_5 to every node in the following layer. \n\nLearning occurs in the perceptron by changing connection weights after each piece of data is processed, based on the amount of error in the output compared to the expected result. This is an example of supervised learning, and is carried out through backpropagation, a generalization of the least mean squares algorithm in the linear perceptron.\n\nWe represent the error in output node formula_6 in the formula_7th data point (training example) by formula_8, where formula_9 is the target value and formula_10 is the value produced by the perceptron. The node weights are adjusted based on corrections that minimize the error in the entire output, given by\n\nUsing gradient descent, the change in each weight is\n\nwhere formula_2 is the output of the previous neuron and formula_14 is the \"learning rate\", which is selected to ensure that the weights quickly converge to a response, without oscillations.\n\nThe derivative to be calculated depends on the induced local field formula_15, which itself varies. It is easy to prove that for an output node this derivative can be simplified to\n\nwhere formula_17 is the derivative of the activation function described above, which itself does not vary. The analysis is more difficult for the change in weights to a hidden node, but it can be shown that the relevant derivative is\n\nThis depends on the change in weights of the formula_19th nodes, which represent the output layer. So to change the hidden layer weights, the output layer weights change according to the derivative of the activation function, and so this algorithm represents a backpropagation of the activation function.\n<section end=theory />\n\nThe term \"multilayer perceptron\" does not refer to a single perceptron that has multiple layers. Rather, it contains many perceptrons that are organized into layers. An alternative is \"multilayer perceptron network\". Moreover, MLP \"perceptrons\" are not perceptrons in the strictest possible sense. True perceptrons are formally a special case of artificial neurons that use a threshold activation function such as the Heaviside step function. MLP perceptrons can employ arbitrary activation functions. A true perceptron performs binary classification (either this or that), an MLP neuron is free to either perform classification or regression, depending upon its activation function.\n\nThe term \"multilayer perceptron\" later was applied without respect to nature of the nodes/layers, which can be composed of arbitrarily defined artificial neurons, and not perceptrons specifically. This interpretation avoids the loosening of the definition of \"perceptron\" to mean an artificial neuron in general.\n\nMLPs are useful in research for their ability to solve problems stochastically, which often allows approximate solutions for extremely complex problems like fitness approximation.\n\nMLPs are universal function approximators as showed by Cybenko's theorem, so they can be used to create mathematical models by regression analysis. As classification is a particular case of regression when the response variable is categorical, MLPs make good classifier algorithms.\n\nMLPs were a popular machine learning solution in the 1980s, finding applications in diverse fields such as speech recognition, image recognition, and machine translation software, but thereafter faced strong competition from much simpler (and related) support vector machines. Interest in backpropagation networks returned due to the successes of deep learning.\n\n","id":"2266644","title":"Multilayer perceptron"}]
