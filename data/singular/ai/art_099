[{"url":"https://en.wikipedia.org/wiki?curid=47805","text":"Vector quantization\n\nVector quantization (VQ) is a classical quantization technique from signal processing that allows the modeling of probability density functions by the distribution of prototype vectors. It was originally used for data compression. It works by dividing a large set of points (vectors) into groups having approximately the same number of points closest to them. Each group is represented by its centroid point, as in k-means and some other clustering algorithms.\n\nThe density matching property of vector quantization is powerful, especially for identifying the density of large and high-dimensioned data. Since data points are represented by the index of their closest centroid, commonly occurring data have low error, and rare data high error. This is why VQ is suitable for lossy data compression. It can also be used for lossy data correction and density estimation.\n\nVector quantization is based on the competitive learning paradigm, so it is closely related to the self-organizing map model and to sparse coding models used in deep learning algorithms such as autoencoder.\n\nA simple training algorithm for vector quantization is :\n\nA more sophisticated algorithm reduces the bias in the density matching estimation, and ensures that all points are used, by including an extra sensitivity parameter :\n\nIt is desirable to use a cooling schedule to produce convergence: see Simulated annealing. Another (simpler) method is LBG which is based on K-Means.\n\nThe algorithm can be iteratively updated with 'live' data, rather than by picking random points from a data set, but this will introduce some bias if the data are temporally correlated over many samples.\nA vector is represented either geometrically by an arrow whose length corresponds to its magnitude and points in an appropriate direction, or by two or three numbers representing the magnitude of its components.\n\nVector quantization is used for lossy data compression, lossy data correction, pattern recognition, density estimation and clustering.\n\nLossy data correction, or prediction, is used to recover data missing from some dimensions. It is done by finding the nearest group with the data dimensions available, then predicting the result based on the values for the missing dimensions, assuming that they will have the same value as the group's centroid.\n\nFor density estimation, the area/volume that is closer to a particular centroid than to any other is inversely proportional to the density (due to the density matching property of the algorithm).\n\nVector quantization, also called \"block quantization\" or \"pattern matching quantization\" is often used in lossy data compression. It works by encoding values from a multidimensional vector space into a finite set of values from a discrete subspace of lower dimension. A lower-space vector requires less storage space, so the data is compressed. Due to the density matching property of vector quantization, the compressed data has errors that are inversely proportional to density.\n\nThe transformation is usually done by projection or by using a codebook. In some cases, a codebook can be also used to entropy code the discrete value in the same step, by generating a prefix coded variable-length encoded value as its output.\n\nThe set of discrete amplitude levels is quantized jointly rather than each sample being quantized separately. Consider a \"k\"-dimensional vector formula_12 of amplitude levels. It is compressed by choosing the nearest matching vector from a set of \"n\"-dimensional vectors formula_13, with \"n\" < \"k\".\n\nAll possible combinations of the \"n\"-dimensional vector formula_13 form the vector space to which all the quantized vectors belong.\nOnly the index of the codeword in the codebook is sent instead of the quantized values. This conserves space and achieves more compression.\n\nTwin vector quantization (VQF) is part of the MPEG-4 standard dealing with time domain weighted interleaved vector quantization.\n\nThe usage of video codecs based on vector quantization has declined significantly in favor of those based on motion compensated prediction combined with transform coding, e.g. those defined in MPEG standards, as the low decoding complexity of vector quantization has become less relevant.\n\n\nVQ was also used in the eighties for speech and speaker recognition.\nRecently it has also been used for efficient nearest neighbor search \n\nand on-line signature recognition. \nIn pattern recognition applications, one codebook is constructed for each class (each class being a user in biometric applications) using acoustic vectors of this user. In the testing phase the quantization distortion of a testing signal is worked out with the whole set of codebooks obtained in the training phase. The codebook that provides the smallest vector quantization distortion indicates the identified user.\n\nThe main advantage of VQ in pattern recognition is its low computational burden when compared with other techniques such as dynamic time warping (DTW) and hidden Markov model (HMM). The main drawback when compared to DTW and HMM is that it does not take into account the temporal evolution of the signals (speech, signature, etc.) because all the vectors are mixed up. In order to overcome this problem a multi-section codebook approach has been proposed. The multi-section approach consists of modelling the signal with several sections (for instance, one codebook for the initial part, another one for the center and a last codebook for the ending part).\n\nAs VQ is seeking for centroids as density points of nearby lying samples, it can be also directly used as a prototype-based clustering method: each centroid is then associated with one prototype. \nBy aiming to minimize the expected squared quantization error and introducing a decreasing learning gain fulfilling the Robbins-Monro conditions, multiple iterations over the whole data set with a concrete but fixed number of prototypes converges to the solution of k-means clustering algorithm in an incremental manner.\n\n\"Part of this article was originally based on material from the Free On-line Dictionary of Computing and is used with under the GFDL.\"\n\n","id":"47805","title":"Vector quantization"}]
