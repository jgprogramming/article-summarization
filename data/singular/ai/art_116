[{"url":"https://en.wikipedia.org/wiki?curid=14179835","text":"Activation function\n\nIn computational networks, the activation function of a node defines the output of that node given an input or set of inputs. A standard computer chip circuit can be seen as a digital network of activation functions that can be \"ON\" (1) or \"OFF\" (0), depending on input. This is similar to the behavior of the linear perceptron in neural networks. However, only \"nonlinear\" activation functions allow such networks to compute nontrivial problems using only a small number of nodes. In artificial neural networks this function is also called the transfer function.\n\nIn biologically inspired neural networks, the activation function is usually an abstraction representing the rate of action potential firing in the cell. In its simplest form, this function is binaryâ€”that is, either the neuron is firing or not. The function looks like formula_1, where formula_2 is the Heaviside step function. In this case many neurons must be used in computation beyond linear separation of categories.\n\nA line of positive slope may be used to reflect the increase in firing rate that occurs as input current increases. Such a function would be of the form formula_3, where formula_4 is the slope. This activation function is linear, and therefore has the same problems as the binary function. In addition, networks constructed using this model have unstable convergence because neuron inputs along favored paths tend to increase without bound, as this function is not normalizable.\n\nAll problems mentioned above can be handled by using a normalizable sigmoid activation function. One realistic model stays at zero until input current is received, at which point the firing frequency increases quickly at first, but gradually approaches an asymptote at 100% firing rate. Mathematically, this looks like formula_5, where the hyperbolic tangent function can be replaced by any sigmoid function. This behavior is realistically reflected in the neuron, as neurons cannot physically fire faster than a certain rate. This model runs into problems, however, in computational networks as it is not differentiable, a requirement to calculate backpropagation.\n\nThe final model, then, that is used in multilayer perceptrons is a sigmoidal activation function in the form of a hyperbolic tangent. Two forms of this function are commonly used: formula_6 whose range is normalized from -1 to 1, and formula_7 is vertically translated to normalize from 0 to 1. The latter model is often considered more biologically realistic, but it runs into theoretical and experimental difficulties with certain types of computational problems.\n\nA special class of activation functions known as radial basis functions (RBFs) are used in RBF networks, which are extremely efficient as universal function approximators. These activation functions can take many forms, but they are usually found as one of three functions:\nwhere formula_11 is the vector representing the function \"center\" and formula_12 and formula_13 are parameters affecting the spread of the radius.\n\nSupport vector machines (SVMs) can effectively utilize a class of activation functions that includes both sigmoids and RBFs. In this case, the input is transformed to reflect a decision boundary hyperplane based on a few training inputs called \"support vectors\" formula_14. The activation function for the hidden layer of these machines is referred to as the \"inner product kernel\", formula_15. The support vectors are represented as the centers in RBFs with the kernel equal to the activation function, but they take a unique form in the perceptron as \nwhere formula_17 and formula_18 must satisfy certain conditions for convergence. These machines can also accept arbitrary-order polynomial activation functions where\nActivation function having types:\n\nSome desirable properties in an activation function include:\n\n\nThe following table compares the properties of several activation functions that are functions of one fold from the previous layer or layers:\n</math>\nwith formula_51 and formula_52\n\nThe following table lists activation functions that are not functions of a single fold from the previous layer or layers:\n\n","id":"14179835","title":"Activation function"}]
