[{"url":"https://en.wikipedia.org/wiki?curid=7049330","text":"Leabra\n\nLeabra stands for local, error-driven and associative, biologically realistic algorithm. It is a model of learning which is a balance between Hebbian and error-driven learning with other network-derived characteristics. This model is used to mathematically predict outcomes based on inputs and previous learning influences. This model is heavily influenced by and contributes to neural network designs and models. This algorithm is the default algorithm in \"emergent\" (successor of PDP++) when making a new project, and is extensively used in various simulations.\n\nHebbian learning is performed using conditional principal components analysis (CPCA) algorithm with correction factor for sparse expected activity levels.\n\nError-driven learning is performed using GeneRec, which is a generalization of the recirculation algorithm, and approximates Almeidaâ€“Pineda recurrent backpropagation. The symmetric, midpoint version of GeneRec is used, which is equivalent to the contrastive Hebbian learning algorithm (CHL). See O'Reilly (1996; Neural Computation) for more details.\n\nThe activation function is a point-neuron approximation with both discrete spiking and continuous rate-code output.\n\nLayer or unit-group level inhibition can be computed directly using a k-winners-take-all (KWTA) function, producing sparse distributed representations.\n\nThe net input is computed as an average, not a sum, over connections, based on normalized, sigmoidally transformed weight values, which are subject to scaling on a connection-group level to alter relative contributions. Automatic scaling is performed to compensate for differences in expected activity level in the different projections.\n\nDocumentation about this algorithm can be found in the book \"Computational Explorations in Cognitive Neuroscience: Understanding the Mind by Simulating the Brain\" published by MIT press. and in the Emergent Documentation\n\nThe pseudocode for Leabra is given here, showing exactly how the\npieces of the algorithm described in more detail in the subsequent\nsections fit together.\n\ncodice_1\n\nEmergent is the original implementation of Leabra, written in C++ and highly optimized. This is the fastest implementation, suitable for constructing large networks. Although \"emergent\" has a graphical user interface, it is very complex and has a steep learning curve.\n\nIf you want to understand the algorithm in detail, it will be easier to read non-optimzed code. For this purpose, check out the MATLAB version. There is also an R version available, that can be easily installed via codice_2 in R and has a short introduction to how the package is used. The MATLAB and R versions are not suited for constructing very large networks, but they can be installed quickly and (with some programming background) are easy to use. Furthermore, they can also be adapted easily.\n\n\n","id":"7049330","title":"Leabra"}]
