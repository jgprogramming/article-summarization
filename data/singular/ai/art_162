[{"url":"https://en.wikipedia.org/wiki?curid=10711453","text":"Long short-term memory\n\nLong short-term memory (LSTM) units (or blocks) are a building unit for layers of a recurrent neural network (RNN). An RNN composed of LSTM units is often called an LSTM network. A common LSTM unit is composed of a cell, an input gate, an output gate and a forget gate. The cell is responsible for \"remembering\" values over arbitrary time intervals; hence the word \"memory\" in LSTM. Each of the three \"gates\" can be thought of as a \"conventional\" artificial neuron, as in a multi-layer (or feedforward) neural network: that is, they compute an activation (using an activation function) of a weighted sum. Intuitively, they can be thought as \"regulators\" of the flow of values that goes through the connections of the LSTM; hence the denotation \"gate\". There are connections between these gates and the cell.\n\nThe expression \"long short-term\" refers to the fact that LSTM is a model for the \"short-term memory\" which can last for a \"long\" period of time. An LSTM is well-suited to classify, process and predict time series given time lags of unknown size and duration between important events. LSTMs were developed to deal with the exploding and vanishing gradient problem when training traditional RNNs. Relative insensitivity to gap length gives an advantage to LSTM over alternative RNNs, hidden Markov models and other sequence learning methods in numerous applications .\n\nLSTM was proposed in 1997 by Sepp Hochreiter and JÃ¼rgen Schmidhuber and improved in 2000 by Felix Gers' team.\n\nAmong other successes, LSTM achieved record results in natural language text compression, unsegmented connected handwriting recognition and won the ICDAR handwriting competition (2009). LSTM networks were a major component of a network that achieved a record 17.7% phoneme error rate on the classic TIMIT natural speech dataset (2013).\n\nAs of 2016, major technology companies including Google, Apple, and Microsoft were using LSTM as fundamental components in new products. For example, Google used LSTM for speech recognition on the smartphone, for the smart assistant Allo and for Google Translate. Apple uses LSTM for the \"Quicktype\" function on the iPhone and for Siri. Amazon uses LSTM for Amazon Alexa.\n\nIn 2017 Microsoft reported reaching 95.1% recognition accuracy on the Switchboard corpus, incorporating a vocabulary of 165,000 words. The approach used \"dialog session-based long-short-term memory\".\n\nThere are several architectures of LSTM units. A common architecture is composed of a memory \"cell\", an \"input gate\", an \"output gate\" and a \"forget gate\".\n\nAn LSTM (memory) cell stores a value (or state), for either long or short time periods. This is achieved by using an identity (or no) activation function for the memory cell. In this way, when an LSTM network (that is an RNN composed of LSTM units) is trained with backpropagation through time, the gradient does not tend to vanish. \n\nThe LSTM gates compute an activation, often using the logistic function. Intuitively, the \"input gate\" controls the extent to which a new value flows into the cell, the \"forget gate\" controls the extent to which a value remains in the cell and the \"output gate\" controls the extent to which the value in the cell is used to compute the output activation of the LSTM unit.\n\nThere are connections into and out of these gates. A few connections are recurrent. The weights of these connections, which need to be learned during training, of an LSTM unit are used to direct the operation of the gates. Each of the gates has its own parameters, that is weights and biases, from possibly other units outside the LSTM unit.\n\nIn the equations below, each variable in lowercase italics represents a vector. Matrices formula_1 and formula_2 collect respectively the weights of the input and recurrent connections, \nwhere formula_3 can either be the input gate formula_4, output gate formula_5, the forget gate formula_6 or the memory cell formula_7, depending on the activation being calculated.\n\nCompact form of the equations for the forward pass of a LSTM unit with a forget gate. \n\nwhere the initial values are formula_9 and formula_10 and the operator formula_11 denotes the Hadamard product (entry-wise product). The subscripts formula_12 refer to the time step.\n\n\n\nThe figure on the right is a graphical representation of a LSTM unit with peephole connections (i.e. a peephole LSTM). Peephole connections allow the gates to access the constant error carousel (CEC), whose activation is the cell state. formula_26 is not used, formula_27 is used instead in most places.\n\nConvolutional LSTM. formula_29 denotes the convolution operator.\n\nTo minimize LSTM's total error on a set of training sequences, iterative gradient descent such as backpropagation through time can be used to change each weight in proportion to its derivative with respect to the error. A problem with using gradient descent for standard RNNs is that error gradients vanish exponentially quickly with the size of the time lag between important events. This is due to formula_31 if the spectral radius of formula_32 is smaller than 1. With LSTM units, however, when error values are back-propagated from the output, the error remains in the unit's memory. This \"error carousel\" continuously feeds error back to each of the gates until they learn to cut off the value. Thus, regular backpropagation is effective at training an LSTM unit to remember values for long durations.\n\nLSTM can also be trained by a combination of artificial evolution for weights to the hidden units, and pseudo-inverse or support vector machines for weights to the output units. In reinforcement learning applications LSTM can be trained by policy gradient methods, evolution strategies or genetic algorithms.\n\nMany applications use stacks of LSTM RNNs and train them by connectionist temporal classification (CTC) to find an RNN weight matrix that maximizes the probability of the label sequences in a training set, given the corresponding input sequences. CTC achieves both alignment and recognition.\n\nApplications of LSTM include:\n\nLSTM has Turing completeness in the sense that given enough network units it can compute any result that a conventional computer can compute, provided it has the proper weight matrix, which may be viewed as its program.\n\n\n","id":"10711453","title":"Long short-term memory"}]
